{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?1825","webpack:///./src/components/PieChart.vue?3f25","webpack:///./src/components/BaseFile.vue?5b74","webpack:///./src/components/BasicInfo.vue?c9d8","webpack:///./src/views/NotFound.vue?18b8","webpack:///./src/components/OperationDetail.vue?7823","webpack:///./src/components/PayloadComposition.vue?be7e","webpack:///./src/components/PartialCheckbox.vue?cce7","webpack:///./src/components/PartitionDetail.vue?e22f","webpack:///./src/plugins/vuetify.ts","webpack:///./src/App.vue","webpack:///./src/App.vue?6697","webpack:///./src/views/PackageAnalysis.vue","webpack:///./src/components/BaseFile.vue","webpack:///./src/components/BaseFile.vue?5af0","webpack:///./src/components/BaseFile.vue?408d","webpack:///./src/components/PayloadDetail.vue","webpack:///./src/components/PartitionDetail.vue","webpack:///./src/services/update_metadata_pb.js","webpack:///./src/services/payload_nonab.ts","webpack:///./src/services/payload.ts","webpack:///./src/components/OperationDetail.vue","webpack:///./src/services/echarts_data.ts","webpack:///./src/services/map_parser.ts","webpack:///./src/services/payload_composition.ts","webpack:///./src/components/OperationDetail.vue?0239","webpack:///./src/components/OperationDetail.vue?19cd","webpack:///./src/components/PartitionDetail.vue?7d27","webpack:///./src/components/PartitionDetail.vue?b40d","webpack:///./src/components/BasicInfo.vue","webpack:///./src/services/trim_zip.ts","webpack:///./src/components/BasicInfo.vue?bb39","webpack:///./src/components/BasicInfo.vue?e053","webpack:///./src/components/PayloadDetail.vue?cdd8","webpack:///./src/components/PayloadDetail.vue?a20c","webpack:///./src/components/PayloadComposition.vue","webpack:///./src/components/PartialCheckbox.vue","webpack:///./src/components/PartialCheckbox.vue?fbe3","webpack:///./src/components/PartialCheckbox.vue?59db","webpack:///./src/components/PieChart.vue","webpack:///./src/components/PieChart.vue?1278","webpack:///./src/components/PayloadComposition.vue?3e04","webpack:///./src/components/PayloadComposition.vue?d59c","webpack:///./src/views/PackageAnalysis.vue?3fdf","webpack:///./src/views/PackageAnalysis.vue?2d24","webpack:///./src/views/Demo.vue","webpack:///./src/views/Demo.vue?9616","webpack:///./src/views/Demo.vue?e633","webpack:///./src/views/About.vue","webpack:///./src/views/About.vue?aa81","webpack:///./src/views/NotFound.vue","webpack:///./src/views/NotFound.vue?2812","webpack:///./src/router/index.ts","webpack:///./src/store/index.ts","webpack:///./src/main.ts","webpack:///./src/components/PayloadDetail.vue?0b74"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","components","directives","theme","defaultTheme","rounded","color","links","link","to","class","fluid","render","style","cols","md","label","unpackOTA","zipFile","payload","vertical","manifest","dragover","dragleave","drop","fileName","ref","type","accept","handleFileChange","placeholder","url","urlKeyup","props","String","default","emits","computed","parsedURL","URL","this","methods","event","currentTarget","target","files","selectedFile","$emit","preventDefault","classList","contains","add","remove","dataTransfer","console","log","error","__scopeId","exportOTAPackage","partitions","partition","partitionName","elevation","hover","shaped","dynamicPartitionList","dynamicPartitions","metadata_signature","nonAB","octToHex","signatures","oldPartitionInfo","isDynamicPartition","isFECEnabled","isHashtreeEnabled","estimateCowSize","postinstallPath","toggle","showInfo","size","hash","newPartitionInfo","version","readableTimestamp","showOPs","operations","operation","dataSha256Hash","mapType","opType","$Reader","$protobuf","$Writer","$util","$root","chromeos_update_engine","Extent","properties","keys","startBlock","Long","fromBits","numBlocks","encode","message","writer","uint32","uint64","encodeDelimited","ldelim","decode","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","isInteger","low","high","fromObject","fromValue","unsigned","parseInt","LongBits","toNumber","toObject","options","defaults","long","longs","toString","Number","toJSON","constructor","toJSONOptions","Signatures","emptyArray","Signature","fork","Array","isArray","TypeError","arrays","newBuffer","unpaddedSignatureSize","bytes","fixed32","isString","base64","PartitionInfo","InstallOperation","srcExtents","dstExtents","dataOffset","dataLength","srcLength","dstLength","srcSha256Hash","int32","ProtocolError","instance","enums","Type","valuesById","values","CowMergeOperation","srcExtent","dstExtent","srcOffset","PartitionUpdate","newPartitionSignature","mergeOperations","runPostinstall","filesystemType","postinstallOptional","hashTreeDataExtent","hashTreeExtent","hashTreeAlgorithm","hashTreeSalt","fecDataExtent","fecExtent","fecRoots","string","bool","Boolean","DynamicPartitionGroup","partitionNames","DynamicPartitionMetadata","groups","snapshotEnabled","vabcEnabled","vabcCompressionParam","cowVersion","ApexInfo","packageName","isCompressed","decompressedSize","int64","ApexMetadata","apexInfo","DeltaArchiveManifest","blockSize","signaturesOffset","signaturesSize","minorVersion","maxTimestamp","dynamicPartitionMetadata","partialUpdate","securityPatchLevel","packedFile","Blocksize","regexName","getEntries","entries","entry","filename","match","newPartition","getData","rawText","parseTransferList","lines","split","totalBlocks","entryStashed","maxStashed","Uint8Array","sizeNewData","newDataSize","line","op","elements","reduce","parseRange","RegExp","uncompressedSize","extents","rangeset","regexRange","extent","_MAGIC","_VERSION_SIZE","_MANIFEST_LEN_SIZE","_METADATA_SIGNATURE_LEN_SIZE","_PAYLOAD_HEADER_SIZE","_BRILLO_MAJOR_PAYLOAD_VERSION","MetadataFormat","prefix","Error","magic","manifest_len","metadata_signature_len","readIntAt","buffer","position","DataView","arrayBuffer","view","getBigUint64","offset","a","BigInt","getUint32","b","bigNumber","getUint16","contentType","blob","Blob","prefixLength","cursor","readInt","ret","decoder","TextDecoder","magicBytes","header_version","header","array","readHeader","file","File","zipreader","href","readManifest","metadata","payload_properties","init","alert","manifestBlob","signatureBlob","formatter","regex","trimEntry","unzip","parseMetadata","has","Map","types","set","bufferArray","space","maxLine","hex_table","hex","toUpperCase","getWithDefault","srcTotalBlocks","srcBlocks","dstTotalBlocks","dstBlocks","statisticData","title","unit","maximumEntries","trimmedData","trimMap","table","option","text","left","tooltip","trigger","legend","orient","top","from","series","radius","center","map","pair","emphasis","itemStyle","shadowBlur","shadowOffsetX","shadowColor","new_map","curr","currKey","restTotal","targetFile","build","mapFiles","maps","regexPath","forEach","totalLength","regexNumber","mapText","fileEntries","right","InsertMap","names","ext","queryMap","addNumberToMap","operatedBlockStatistics","operatedBlocks","operationType","partitionPayloadSize","partitionPayloadSizeStatistics","partitionStats","mergeOperationStatistics","Math","ceil","operatedPayloadStatistics","operatedFileExtensionsStatistics","operatedFilenamesStatistics","filenameStats","fileExtenstionStats","name2Extension","operatedFilenames","buildMap","operatedFileNames","query","extentDataLength","distributeFilenames","analysePartitions","metrics","statisticsData","echartsData","exts","accumulator","total","displayBlocks","filenames","distributedLengths","round","endsWith","required","mounted","OperationDetail","unixTimestamp","isNaN","Date","indexOf","$attrs","getFileName","getFileSize","otaMetadata","trim","preBuild","isDataWipePackage","totalDynamicPartitionSize","totalCOWSize","getZipReader","trimZip","zip","filter","blobWriter","level","pathname","trimTargetFiles","startsWith","close","trimOTAPackage","getMetadataLength","downloadFile","downloadNode","createObjectURL","download","click","revokeObjectURL","ensureSuffix","str","suffix","includes","cowSizes","spl","dynamicPartitionNamess","Set","flatMap","g","acc","cur","PartitionDetail","BasicInfo","$refs","block","exportTargetFileMetadata","partitionInclude","labels","updatePartitions","piechartClick","updateChart","disabled","demo","selectBuild","revertAllSelection","selectAllText","selectAll","checked","modelValue","updateSelected","$event","newSelect","getEchartsOption","VChart","provide","PartialCheckbox","PieChart","BaseFile","listData","responseType","param","partitionSelected","PayloadDetail","PayloadComposition","created","script","routes","path","component","PackageAnalysis","meta","Demo","About","NotFound","router","history","beforeEach","next","nearestWithTitle","matched","reverse","find","previousNearestWithMeta","metaTags","document","querySelectorAll","el","parentNode","removeChild","state","mutations","actions","app","App","use","store","vuetify","mount"],"mappings":"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","file":"js/app.1544ce76.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/analyseOTA/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../node_modules/vue-loader-v16/dist/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--1-0!../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./App.vue?vue&type=style&index=0&id=ee415730&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./PieChart.vue?vue&type=style&index=0&id=5d1cb486&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./BaseFile.vue?vue&type=style&index=0&id=0630c5ec&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./BasicInfo.vue?vue&type=style&index=0&id=4b9027e2&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./NotFound.vue?vue&type=style&index=0&id=50c6f348&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./OperationDetail.vue?vue&type=style&index=0&id=44174082&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./PayloadComposition.vue?vue&type=style&index=0&id=b6f71732&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./PartialCheckbox.vue?vue&type=style&index=0&id=533f2336&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./PartitionDetail.vue?vue&type=style&index=0&id=21e569e9&scoped=true&lang=css\"","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport 'vuetify/lib/styles/main.sass'\nimport { createVuetify } from 'vuetify'\nimport * as components from 'vuetify/lib/components'\nimport * as directives from 'vuetify/lib/directives'\n\nexport default createVuetify({\n  components,\n  directives,\n  theme: {\n    defaultTheme: 'dark'\n  }\n})\n","<!--\n Copyright 2021 Google LLC\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n\n<template>\n  <v-app>\n    <v-app-bar\n      rounded\n      color=\"primary\"\n    >\n      <v-app-bar-title> OTA Analyzer </v-app-bar-title>\n      <v-spacer />\n      <v-btn\n        v-for=\"link in links\"\n        :key=\"`${link}-header-link`\"\n        :to=\"{ name: link }\"\n        class=\"ml-5\"\n        color=\"primary\"\n      >\n        {{ link }}\n      </v-btn>\n    </v-app-bar>\n    <v-main>\n      <v-container fluid>\n        <router-view />\n      </v-container>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      links: ['Analysis', 'Demo', 'About'],\n    }\n  },\n}\n</script>\n\n<style>\nh3 {\n  text-align: center;\n}\n</style>","import { render } from \"./App.vue?vue&type=template&id=ee415730\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=ee415730&lang=css\"\nscript.render = render\n\nexport default script","<!--\n Copyright 2021 Google LLC\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n\n<template>\n  <v-row>\n    <v-alert style=\"color: yellow;\">\n      Your files will not be uploaded anywhere. All analysis are done in the frontend using Javascript.\n    </v-alert>\n  </v-row>\n  <v-row>\n    <v-col cols=\"12\" md=\"6\">\n      <BaseFile\n        label=\"Please drag and drop an OTA package or Select one\"\n        @file-select=\"unpackOTA\"\n      />\n      <PayloadDetail\n        v-if=\"zipFile && payload\"\n        :zipFile=\"zipFile\"\n        :payload=\"payload\"\n      />\n    </v-col>\n    <v-divider vertical />\n    <v-col cols=\"12\" md=\"6\">\n      <PayloadComposition\n        v-if=\"zipFile && payload.manifest\"\n        :manifest=\"payload.manifest\"\n      />\n    </v-col>\n  </v-row>\n</template>\n\n<script lang=\"ts\">\nimport BaseFile from '../components/BaseFile.vue'\nimport PayloadDetail from '../components/PayloadDetail.vue'\nimport PayloadComposition from '../components/PayloadComposition.vue'\nimport { Payload } from '../services/payload'\nimport { defineComponent } from 'vue'\nimport { ZipFile } from '@/services/trim_zip'\n\nexport default defineComponent({\n  components: {\n    BaseFile,\n    PayloadDetail,\n    PayloadComposition\n  },\n  data() {\n    return ({\n      zipFile: null,\n      payload: null\n    } as unknown) as {\n      zipFile: ZipFile\n      payload: Payload\n    }\n  },\n  methods: {\n    async unpackOTA(file: File | URL) {\n      this.zipFile = new ZipFile(file)\n      try {\n        const payload = new Payload(this.zipFile as ZipFile);\n        await payload.init();\n        this.payload = payload;\n      } catch (err) {\n        alert(`Please check if this is a correct OTA package (.zip). ${err}`)\n        console.log(err)\n      }\n    }\n  }\n})\n</script>\n","<!--\n Copyright 2021 Google LLC\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n\n<template>\n  <label class=\"file-select ma-5\">\n    <div\n      class=\"select-button\"\n      @dragover=\"dragover\"\n      @dragleave=\"dragleave\"\n      @drop=\"drop\"\n    >\n      <span v-if=\"label\">{{ !fileName ? label : '' }}</span>\n      <span v-else>Select File</span>\n      <div v-if=\"fileName\">File selected: {{ fileName }}</div>\n    </div>\n    <input ref=\"file\" type=\"file\" accept=\".zip\" @change=\"handleFileChange\" />\n  </label>\n  <input\n    class=\"url-input\"\n    :class=\"{\n      'url-invalid': !parsedURL && url != '',\n      'url-valid': parsedURL || url == ''\n    }\"\n    ref=\"url_input\"\n    type=\"url\"\n    placeholder=\"type a URL\"\n    v-model=\"url\"\n    @keyup=\"urlKeyup\"\n  />\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  props: {\n    label: {\n      type: String,\n      default: ''\n    }\n  },\n  emits: {\n    'file-select': null\n  },\n  data() {\n    return {\n      fileName: '',\n      url: ''\n    }\n  },\n  computed: {\n    parsedURL(): URL | null {\n      try {\n        return new URL(this.url)\n      } catch {\n        return null\n      }\n    }\n  },\n\n  methods: {\n    handleFileChange(event: any) {\n      if (!event.currentTarget) {\n        return\n      }\n      let target = event.currentTarget! as HTMLInputElement\n      if (target.files == null || target.files.length < 1) {\n        return\n      }\n      const selectedFile = target.files![0]\n      this.$emit('file-select', selectedFile)\n      // If user selects a file, clear the URL component\n      this.url = ''\n      this.fileName = target.files![0].name\n    },\n    dragover(event: DragEvent) {\n      event.preventDefault()\n      if (!event.currentTarget) {\n        return\n      }\n      let target = event.currentTarget! as HTMLInputElement\n      if (!target.classList.contains('file-hover')) {\n        target.classList.add('file-hover')\n      }\n    },\n    dragleave(event: DragEvent) {\n      if (!event.currentTarget) {\n        return\n      }\n      let target = event.currentTarget! as HTMLInputElement\n      target.classList.remove('file-hover')\n    },\n    drop(event: DragEvent) {\n      event.preventDefault()\n      if (!event.currentTarget) {\n        return\n      }\n      let target = event.currentTarget! as HTMLInputElement\n      if (!event.dataTransfer || event.dataTransfer.files.length == 0) {\n        return\n      }\n      target.files = event.dataTransfer.files\n      this.handleFileChange(event)\n      target.classList.remove('file-hover')\n    },\n    urlKeyup(event: KeyboardEvent) {\n      console.log(this.url)\n      if (event.key == 'Enter') {\n        const target = event.target as HTMLInputElement\n        if (this.parsedURL == null) {\n          console.error(`${target.value} is an invalid URL`)\n          return\n        }\n        this.$emit('file-select', this.parsedURL)\n      }\n    }\n  }\n})\n</script>\n\n<style scoped>\n.file-select > .select-button {\n  padding: 3rem;\n  border-radius: 0.3rem;\n  border: 4px dashed #eaebec;\n  text-align: center;\n  font-weight: bold;\n  cursor: pointer;\n}\n\n.file-select > input[type='file'] {\n  display: none;\n}\n\n.file-hover {\n  background-color: #95e995;\n}\n\n.url-input {\n  border-radius: 0.3rem;\n  margin-top: 0.5rem;\n  width: 100%;\n}\n\n.url-invalid {\n  border: 3px solid red;\n}\n\n.url-valid {\n  border: 3px dashed #6a9dd0;\n}\n\n.url-valid:focus {\n  border: 3px solid #6a9dd0;\n}\n</style>\n","\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  props: {\n    label: {\n      type: String,\n      default: ''\n    }\n  },\n  emits: {\n    'file-select': null\n  },\n  data() {\n    return {\n      fileName: '',\n      url: ''\n    }\n  },\n  computed: {\n    parsedURL(): URL | null {\n      try {\n        return new URL(this.url)\n      } catch {\n        return null\n      }\n    }\n  },\n\n  methods: {\n    handleFileChange(event: any) {\n      if (!event.currentTarget) {\n        return\n      }\n      let target = event.currentTarget! as HTMLInputElement\n      if (target.files == null || target.files.length < 1) {\n        return\n      }\n      const selectedFile = target.files![0]\n      this.$emit('file-select', selectedFile)\n      // If user selects a file, clear the URL component\n      this.url = ''\n      this.fileName = target.files![0].name\n    },\n    dragover(event: DragEvent) {\n      event.preventDefault()\n      if (!event.currentTarget) {\n        return\n      }\n      let target = event.currentTarget! as HTMLInputElement\n      if (!target.classList.contains('file-hover')) {\n        target.classList.add('file-hover')\n      }\n    },\n    dragleave(event: DragEvent) {\n      if (!event.currentTarget) {\n        return\n      }\n      let target = event.currentTarget! as HTMLInputElement\n      target.classList.remove('file-hover')\n    },\n    drop(event: DragEvent) {\n      event.preventDefault()\n      if (!event.currentTarget) {\n        return\n      }\n      let target = event.currentTarget! as HTMLInputElement\n      if (!event.dataTransfer || event.dataTransfer.files.length == 0) {\n        return\n      }\n      target.files = event.dataTransfer.files\n      this.handleFileChange(event)\n      target.classList.remove('file-hover')\n    },\n    urlKeyup(event: KeyboardEvent) {\n      console.log(this.url)\n      if (event.key == 'Enter') {\n        const target = event.target as HTMLInputElement\n        if (this.parsedURL == null) {\n          console.error(`${target.value} is an invalid URL`)\n          return\n        }\n        this.$emit('file-select', this.parsedURL)\n      }\n    }\n  }\n})\n","import { render } from \"./BaseFile.vue?vue&type=template&id=0630c5ec&scoped=true\"\nimport script from \"./BaseFile.vue?vue&type=script&lang=ts\"\nexport * from \"./BaseFile.vue?vue&type=script&lang=ts\"\n\nimport \"./BaseFile.vue?vue&type=style&index=0&id=0630c5ec&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-0630c5ec\"\n\nexport default script","<!--\n Copyright 2021 Google LLC\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n\n<template>\n  <v-btn\n    class=\"download-btn\"\n    v-if=\"zipFile && payload\"\n    @click=\"exportOTAPackage\"\n    >Export Metadata</v-btn\n  >\n  <a ref=\"download\" />\n  <BasicInfo :zipFile=\"zipFile\" :payload=\"payload\" class=\"mb-5\" />\n  <v-divider />\n  <div v-if=\"payload\">\n    <h3>Partition List</h3>\n    <v-row v-if=\"payload.manifest\" class=\"mb-5\">\n      <v-col\n        v-for=\"partition in payload.manifest.partitions\"\n        :key=\"partition.partitionName\"\n        cols=\"12\"\n        md=\"4\"\n      >\n        <v-card elevation=\"5\" hover shaped class=\"partial-info\">\n          <PartitionDetail\n            :partition=\"partition\"\n            :dynamicPartitionList=\"dynamicPartitions\"\n          />\n        </v-card>\n      </v-col>\n    </v-row>\n    <v-divider />\n    <div\n      v-if=\"payload.metadata_signature && !payload.manifest.nonAB\"\n      class=\"signature\"\n    >\n      <h3>Metadata Signature</h3>\n      <span style=\"white-space: pre-wrap\">\n        {{ octToHex(payload.metadata_signature.signatures[0].data) }}\n      </span>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport PartitionDetail from './PartitionDetail.vue'\nimport BasicInfo from './BasicInfo.vue'\nimport { Payload, octToHex } from '../services/payload'\nimport {\n  downloadFile,\n  ensureSuffix,\n  trimOTAPackage,\n  ZipFile\n} from '@/services/trim_zip'\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  components: {\n    PartitionDetail,\n    BasicInfo\n  },\n  props: {\n    zipFile: {\n      type: ZipFile,\n      default: null\n    },\n    payload: {\n      type: Payload,\n      default: null\n    }\n  },\n  methods: {\n    octToHex: octToHex,\n    async exportOTAPackage() {\n      const blob = await trimOTAPackage(this.payload as Payload)\n      const downloadNode = this.$refs['download'] as HTMLAnchorElement\n      downloadFile(\n        blob,\n        downloadNode,\n        'trimmed_' + ensureSuffix(this.zipFile.getFileName(), '.zip')\n      )\n    }\n  },\n  computed: {\n    dynamicPartitions(): string[] {\n      return (\n        this.payload.manifest?.dynamicPartitionMetadata?.groups?.flatMap(\n          g => g.partitionNames || []\n        ) || []\n      )\n    }\n  }\n})\n</script>\n\n<style scoped>\n.signature {\n  overflow: scroll;\n  height: 200px;\n  width: 100%;\n  word-break: break-all;\n  text-align: center;\n}\n\n.partial-info {\n  padding: 5px;\n}\n\n.download-btn {\n  text-align: center;\n  justify-content: center;\n  display: flex;\n  align-content: center;\n  margin: 0 auto;\n}\n</style>\n","<!--\n Copyright 2021 Google LLC\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n\n<template>\n  <h4 :class=\"{ 'new-partition': !partition.oldPartitionInfo }\">\n    {{ partition.partitionName }}\n  </h4>\n  <p v-if=\"isDynamicPartition\">\n    <pre>Dynamic:  ✅</pre>\n  </p>\n  <p v-if=\"isFECEnabled\">\n    <pre>FEC:      ✅</pre>\n  </p>\n  <p v-if=\"isHashtreeEnabled\">\n    <pre>Hashtree: ✅</pre>\n  </p>\n  <p v-if=\"partition.estimateCowSize\">\n    <strong> Estimate COW Size: </strong> {{ partition.estimateCowSize }} Bytes\n  </p>\n  <p v-if=\"partition.postinstallPath\">\n    <strong> Postinstall Script: </strong> {{ partition.postinstallPath }}\n  </p>\n  <div class=\"toggle\">\n    <h4\n      @click=\"toggle('showInfo')\"\n      :class=\"{ active: showInfo, inactive: !showInfo }\"\n    >\n      Partition Infos\n    </h4>\n    <ul v-if=\"showInfo\">\n      <li v-if=\"partition.oldPartitionInfo\">\n        <strong>\n          Old Partition Size:\n        </strong>\n        {{ partition.oldPartitionInfo.size }} Bytes\n      </li>\n      <li v-if=\"partition.oldPartitionInfo\">\n        <strong>\n          Old Partition Hash:\n        </strong>\n        <div class=\"hex\">\n          {{ octToHex(partition.oldPartitionInfo.hash, false, 16) }}\n        </div>\n      </li>\n      <li>\n        <strong>\n          New Partition Size:\n        </strong>\n        {{ partition.newPartitionInfo.size }} Bytes\n      </li>\n      <li v-if=\"partition.newPartitionInfo.hash\">\n        <strong>\n          New Partition Hash:\n        </strong>\n        <div class=\"hex\">\n          {{ octToHex(partition.newPartitionInfo.hash, false, 16) }}\n        </div>\n      </li>\n      <li v-if=\"partition.version\">\n        <strong>\n          Version:\n        </strong>\n        {{ partition.version }}\n      </li>\n      <li v-if=\"readableTimestamp\">\n        <strong>\n          Version:\n        </strong>\n        {{ readableTimestamp }}\n      </li>\n    </ul>\n  </div>\n  <div class=\"toggle\">\n    <h4\n      @click=\"toggle('showOPs')\"\n      :class=\"{ active: showOPs, inactive: !showOPs }\"\n    >\n      Total Operations: {{ partition.operations.length }}\n    </h4>\n    <ul v-if=\"showOPs\">\n      <li\n        v-for=\"operation in partition.operations\"\n        :key=\"operation.dataSha256Hash\"\n      >\n        <OperationDetail :operation=\"operation\" :mapType=\"opType.mapType\" />\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { chromeos_update_engine } from '@/services/update_metadata_pb'\nimport { defineComponent } from 'vue'\nimport { OpType, octToHex } from '../services/payload'\nimport OperationDetail from './OperationDetail.vue'\n\nexport default defineComponent({\n  components: {\n    OperationDetail\n  },\n  props: {\n    partition: {\n      type: chromeos_update_engine.PartitionUpdate,\n      required: true\n    },\n    dynamicPartitionList: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      showOPs: false,\n      showInfo: false,\n      opType: new OpType()\n    }\n  },\n  methods: {\n    toggle(key: string) {\n      ;(this as any)[key] = !(this as any)[key]\n    },\n    octToHex: octToHex\n  },\n  computed: {\n    readableTimestamp() {\n      const unixTimestamp = parseInt(this.partition.version)\n      if (isNaN(unixTimestamp)) {\n        return ''\n      }\n      // Unix timestamp is in seconds, but js want milliseconds. So *1000\n      return new Date(unixTimestamp * 1000).toString()\n    },\n    isDynamicPartition(): boolean {\n      return (\n        this.dynamicPartitionList.indexOf(this.partition.partitionName) >= 0\n      )\n    },\n    isFECEnabled(): boolean {\n      return (\n        this.partition.fecExtent?.numBlocks > 0\n      )\n    },\n    isHashtreeEnabled(): boolean {\n      return (\n        this.partition.hashTreeExtent?.numBlocks > 0\n      )\n    }\n  }\n})\n</script>\n\n<style scoped>\n.toggle {\n  display: block;\n  cursor: pointer;\n}\n\nli {\n  list-style-type: none;\n}\n\n.hex {\n  word-break: break-all;\n}\n\n.inactive::after {\n  content: ' ▶️';\n}\n\n.active {\n  color: rgb(var(--v-theme-secondary-darken-1));\n}\n\n.active::after {\n  content: ' 🔽';\n}\n\n.new-partition {\n  color: rgb(var(--v-theme-success));\n}\n</style>\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\nimport * as $protobuf from \"protobufjs/minimal\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const chromeos_update_engine = $root.chromeos_update_engine = (() => {\n\n    /**\n     * Namespace chromeos_update_engine.\n     * @exports chromeos_update_engine\n     * @namespace\n     */\n    const chromeos_update_engine = {};\n\n    chromeos_update_engine.Extent = (function() {\n\n        /**\n         * Properties of an Extent.\n         * @memberof chromeos_update_engine\n         * @interface IExtent\n         * @property {number|Long|null} [startBlock] Extent startBlock\n         * @property {number|Long|null} [numBlocks] Extent numBlocks\n         */\n\n        /**\n         * Constructs a new Extent.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents an Extent.\n         * @implements IExtent\n         * @constructor\n         * @param {chromeos_update_engine.IExtent=} [properties] Properties to set\n         */\n        function Extent(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Extent startBlock.\n         * @member {number|Long} startBlock\n         * @memberof chromeos_update_engine.Extent\n         * @instance\n         */\n        Extent.prototype.startBlock = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Extent numBlocks.\n         * @member {number|Long} numBlocks\n         * @memberof chromeos_update_engine.Extent\n         * @instance\n         */\n        Extent.prototype.numBlocks = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new Extent instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {chromeos_update_engine.IExtent=} [properties] Properties to set\n         * @returns {chromeos_update_engine.Extent} Extent instance\n         */\n        Extent.create = function create(properties) {\n            return new Extent(properties);\n        };\n\n        /**\n         * Encodes the specified Extent message. Does not implicitly {@link chromeos_update_engine.Extent.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {chromeos_update_engine.IExtent} message Extent message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Extent.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.startBlock != null && Object.hasOwnProperty.call(message, \"startBlock\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.startBlock);\n            if (message.numBlocks != null && Object.hasOwnProperty.call(message, \"numBlocks\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.numBlocks);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Extent message, length delimited. Does not implicitly {@link chromeos_update_engine.Extent.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {chromeos_update_engine.IExtent} message Extent message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Extent.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Extent message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.Extent} Extent\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Extent.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.Extent();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.startBlock = reader.uint64();\n                    break;\n                case 2:\n                    message.numBlocks = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Extent message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.Extent} Extent\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Extent.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Extent message.\n         * @function verify\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Extent.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.startBlock != null && message.hasOwnProperty(\"startBlock\"))\n                if (!$util.isInteger(message.startBlock) && !(message.startBlock && $util.isInteger(message.startBlock.low) && $util.isInteger(message.startBlock.high)))\n                    return \"startBlock: integer|Long expected\";\n            if (message.numBlocks != null && message.hasOwnProperty(\"numBlocks\"))\n                if (!$util.isInteger(message.numBlocks) && !(message.numBlocks && $util.isInteger(message.numBlocks.low) && $util.isInteger(message.numBlocks.high)))\n                    return \"numBlocks: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an Extent message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.Extent} Extent\n         */\n        Extent.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.Extent)\n                return object;\n            let message = new $root.chromeos_update_engine.Extent();\n            if (object.startBlock != null)\n                if ($util.Long)\n                    (message.startBlock = $util.Long.fromValue(object.startBlock)).unsigned = true;\n                else if (typeof object.startBlock === \"string\")\n                    message.startBlock = parseInt(object.startBlock, 10);\n                else if (typeof object.startBlock === \"number\")\n                    message.startBlock = object.startBlock;\n                else if (typeof object.startBlock === \"object\")\n                    message.startBlock = new $util.LongBits(object.startBlock.low >>> 0, object.startBlock.high >>> 0).toNumber(true);\n            if (object.numBlocks != null)\n                if ($util.Long)\n                    (message.numBlocks = $util.Long.fromValue(object.numBlocks)).unsigned = true;\n                else if (typeof object.numBlocks === \"string\")\n                    message.numBlocks = parseInt(object.numBlocks, 10);\n                else if (typeof object.numBlocks === \"number\")\n                    message.numBlocks = object.numBlocks;\n                else if (typeof object.numBlocks === \"object\")\n                    message.numBlocks = new $util.LongBits(object.numBlocks.low >>> 0, object.numBlocks.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Extent message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {chromeos_update_engine.Extent} message Extent\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Extent.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.startBlock = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.startBlock = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.numBlocks = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.numBlocks = options.longs === String ? \"0\" : 0;\n            }\n            if (message.startBlock != null && message.hasOwnProperty(\"startBlock\"))\n                if (typeof message.startBlock === \"number\")\n                    object.startBlock = options.longs === String ? String(message.startBlock) : message.startBlock;\n                else\n                    object.startBlock = options.longs === String ? $util.Long.prototype.toString.call(message.startBlock) : options.longs === Number ? new $util.LongBits(message.startBlock.low >>> 0, message.startBlock.high >>> 0).toNumber(true) : message.startBlock;\n            if (message.numBlocks != null && message.hasOwnProperty(\"numBlocks\"))\n                if (typeof message.numBlocks === \"number\")\n                    object.numBlocks = options.longs === String ? String(message.numBlocks) : message.numBlocks;\n                else\n                    object.numBlocks = options.longs === String ? $util.Long.prototype.toString.call(message.numBlocks) : options.longs === Number ? new $util.LongBits(message.numBlocks.low >>> 0, message.numBlocks.high >>> 0).toNumber(true) : message.numBlocks;\n            return object;\n        };\n\n        /**\n         * Converts this Extent to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.Extent\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Extent.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Extent;\n    })();\n\n    chromeos_update_engine.Signatures = (function() {\n\n        /**\n         * Properties of a Signatures.\n         * @memberof chromeos_update_engine\n         * @interface ISignatures\n         * @property {Array.<chromeos_update_engine.Signatures.ISignature>|null} [signatures] Signatures signatures\n         */\n\n        /**\n         * Constructs a new Signatures.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a Signatures.\n         * @implements ISignatures\n         * @constructor\n         * @param {chromeos_update_engine.ISignatures=} [properties] Properties to set\n         */\n        function Signatures(properties) {\n            this.signatures = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Signatures signatures.\n         * @member {Array.<chromeos_update_engine.Signatures.ISignature>} signatures\n         * @memberof chromeos_update_engine.Signatures\n         * @instance\n         */\n        Signatures.prototype.signatures = $util.emptyArray;\n\n        /**\n         * Creates a new Signatures instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {chromeos_update_engine.ISignatures=} [properties] Properties to set\n         * @returns {chromeos_update_engine.Signatures} Signatures instance\n         */\n        Signatures.create = function create(properties) {\n            return new Signatures(properties);\n        };\n\n        /**\n         * Encodes the specified Signatures message. Does not implicitly {@link chromeos_update_engine.Signatures.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {chromeos_update_engine.ISignatures} message Signatures message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Signatures.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.signatures != null && message.signatures.length)\n                for (let i = 0; i < message.signatures.length; ++i)\n                    $root.chromeos_update_engine.Signatures.Signature.encode(message.signatures[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Signatures message, length delimited. Does not implicitly {@link chromeos_update_engine.Signatures.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {chromeos_update_engine.ISignatures} message Signatures message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Signatures.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Signatures message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.Signatures} Signatures\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Signatures.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.Signatures();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.signatures && message.signatures.length))\n                        message.signatures = [];\n                    message.signatures.push($root.chromeos_update_engine.Signatures.Signature.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Signatures message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.Signatures} Signatures\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Signatures.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Signatures message.\n         * @function verify\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Signatures.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.signatures != null && message.hasOwnProperty(\"signatures\")) {\n                if (!Array.isArray(message.signatures))\n                    return \"signatures: array expected\";\n                for (let i = 0; i < message.signatures.length; ++i) {\n                    let error = $root.chromeos_update_engine.Signatures.Signature.verify(message.signatures[i]);\n                    if (error)\n                        return \"signatures.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Signatures message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.Signatures} Signatures\n         */\n        Signatures.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.Signatures)\n                return object;\n            let message = new $root.chromeos_update_engine.Signatures();\n            if (object.signatures) {\n                if (!Array.isArray(object.signatures))\n                    throw TypeError(\".chromeos_update_engine.Signatures.signatures: array expected\");\n                message.signatures = [];\n                for (let i = 0; i < object.signatures.length; ++i) {\n                    if (typeof object.signatures[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.Signatures.signatures: object expected\");\n                    message.signatures[i] = $root.chromeos_update_engine.Signatures.Signature.fromObject(object.signatures[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Signatures message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {chromeos_update_engine.Signatures} message Signatures\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Signatures.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.signatures = [];\n            if (message.signatures && message.signatures.length) {\n                object.signatures = [];\n                for (let j = 0; j < message.signatures.length; ++j)\n                    object.signatures[j] = $root.chromeos_update_engine.Signatures.Signature.toObject(message.signatures[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Signatures to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.Signatures\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Signatures.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        Signatures.Signature = (function() {\n\n            /**\n             * Properties of a Signature.\n             * @memberof chromeos_update_engine.Signatures\n             * @interface ISignature\n             * @property {number|null} [version] Signature version\n             * @property {Uint8Array|null} [data] Signature data\n             * @property {number|null} [unpaddedSignatureSize] Signature unpaddedSignatureSize\n             */\n\n            /**\n             * Constructs a new Signature.\n             * @memberof chromeos_update_engine.Signatures\n             * @classdesc Represents a Signature.\n             * @implements ISignature\n             * @constructor\n             * @param {chromeos_update_engine.Signatures.ISignature=} [properties] Properties to set\n             */\n            function Signature(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Signature version.\n             * @member {number} version\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @instance\n             */\n            Signature.prototype.version = 0;\n\n            /**\n             * Signature data.\n             * @member {Uint8Array} data\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @instance\n             */\n            Signature.prototype.data = $util.newBuffer([]);\n\n            /**\n             * Signature unpaddedSignatureSize.\n             * @member {number} unpaddedSignatureSize\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @instance\n             */\n            Signature.prototype.unpaddedSignatureSize = 0;\n\n            /**\n             * Creates a new Signature instance using the specified properties.\n             * @function create\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {chromeos_update_engine.Signatures.ISignature=} [properties] Properties to set\n             * @returns {chromeos_update_engine.Signatures.Signature} Signature instance\n             */\n            Signature.create = function create(properties) {\n                return new Signature(properties);\n            };\n\n            /**\n             * Encodes the specified Signature message. Does not implicitly {@link chromeos_update_engine.Signatures.Signature.verify|verify} messages.\n             * @function encode\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {chromeos_update_engine.Signatures.ISignature} message Signature message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Signature.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.version);\n                if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);\n                if (message.unpaddedSignatureSize != null && Object.hasOwnProperty.call(message, \"unpaddedSignatureSize\"))\n                    writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.unpaddedSignatureSize);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Signature message, length delimited. Does not implicitly {@link chromeos_update_engine.Signatures.Signature.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {chromeos_update_engine.Signatures.ISignature} message Signature message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Signature.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Signature message from the specified reader or buffer.\n             * @function decode\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {chromeos_update_engine.Signatures.Signature} Signature\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Signature.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.Signatures.Signature();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.version = reader.uint32();\n                        break;\n                    case 2:\n                        message.data = reader.bytes();\n                        break;\n                    case 3:\n                        message.unpaddedSignatureSize = reader.fixed32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Signature message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {chromeos_update_engine.Signatures.Signature} Signature\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Signature.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Signature message.\n             * @function verify\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Signature.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.version != null && message.hasOwnProperty(\"version\"))\n                    if (!$util.isInteger(message.version))\n                        return \"version: integer expected\";\n                if (message.data != null && message.hasOwnProperty(\"data\"))\n                    if (!(message.data && typeof message.data.length === \"number\" || $util.isString(message.data)))\n                        return \"data: buffer expected\";\n                if (message.unpaddedSignatureSize != null && message.hasOwnProperty(\"unpaddedSignatureSize\"))\n                    if (!$util.isInteger(message.unpaddedSignatureSize))\n                        return \"unpaddedSignatureSize: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Signature message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {chromeos_update_engine.Signatures.Signature} Signature\n             */\n            Signature.fromObject = function fromObject(object) {\n                if (object instanceof $root.chromeos_update_engine.Signatures.Signature)\n                    return object;\n                let message = new $root.chromeos_update_engine.Signatures.Signature();\n                if (object.version != null)\n                    message.version = object.version >>> 0;\n                if (object.data != null)\n                    if (typeof object.data === \"string\")\n                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);\n                    else if (object.data.length)\n                        message.data = object.data;\n                if (object.unpaddedSignatureSize != null)\n                    message.unpaddedSignatureSize = object.unpaddedSignatureSize >>> 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Signature message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {chromeos_update_engine.Signatures.Signature} message Signature\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Signature.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.version = 0;\n                    if (options.bytes === String)\n                        object.data = \"\";\n                    else {\n                        object.data = [];\n                        if (options.bytes !== Array)\n                            object.data = $util.newBuffer(object.data);\n                    }\n                    object.unpaddedSignatureSize = 0;\n                }\n                if (message.version != null && message.hasOwnProperty(\"version\"))\n                    object.version = message.version;\n                if (message.data != null && message.hasOwnProperty(\"data\"))\n                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;\n                if (message.unpaddedSignatureSize != null && message.hasOwnProperty(\"unpaddedSignatureSize\"))\n                    object.unpaddedSignatureSize = message.unpaddedSignatureSize;\n                return object;\n            };\n\n            /**\n             * Converts this Signature to JSON.\n             * @function toJSON\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Signature.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Signature;\n        })();\n\n        return Signatures;\n    })();\n\n    chromeos_update_engine.PartitionInfo = (function() {\n\n        /**\n         * Properties of a PartitionInfo.\n         * @memberof chromeos_update_engine\n         * @interface IPartitionInfo\n         * @property {number|Long|null} [size] PartitionInfo size\n         * @property {Uint8Array|null} [hash] PartitionInfo hash\n         */\n\n        /**\n         * Constructs a new PartitionInfo.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a PartitionInfo.\n         * @implements IPartitionInfo\n         * @constructor\n         * @param {chromeos_update_engine.IPartitionInfo=} [properties] Properties to set\n         */\n        function PartitionInfo(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PartitionInfo size.\n         * @member {number|Long} size\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @instance\n         */\n        PartitionInfo.prototype.size = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * PartitionInfo hash.\n         * @member {Uint8Array} hash\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @instance\n         */\n        PartitionInfo.prototype.hash = $util.newBuffer([]);\n\n        /**\n         * Creates a new PartitionInfo instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {chromeos_update_engine.IPartitionInfo=} [properties] Properties to set\n         * @returns {chromeos_update_engine.PartitionInfo} PartitionInfo instance\n         */\n        PartitionInfo.create = function create(properties) {\n            return new PartitionInfo(properties);\n        };\n\n        /**\n         * Encodes the specified PartitionInfo message. Does not implicitly {@link chromeos_update_engine.PartitionInfo.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {chromeos_update_engine.IPartitionInfo} message PartitionInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PartitionInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.size != null && Object.hasOwnProperty.call(message, \"size\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.size);\n            if (message.hash != null && Object.hasOwnProperty.call(message, \"hash\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.hash);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified PartitionInfo message, length delimited. Does not implicitly {@link chromeos_update_engine.PartitionInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {chromeos_update_engine.IPartitionInfo} message PartitionInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PartitionInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PartitionInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.PartitionInfo} PartitionInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PartitionInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.PartitionInfo();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.size = reader.uint64();\n                    break;\n                case 2:\n                    message.hash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a PartitionInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.PartitionInfo} PartitionInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PartitionInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PartitionInfo message.\n         * @function verify\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PartitionInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))\n                    return \"size: integer|Long expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                if (!(message.hash && typeof message.hash.length === \"number\" || $util.isString(message.hash)))\n                    return \"hash: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a PartitionInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.PartitionInfo} PartitionInfo\n         */\n        PartitionInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.PartitionInfo)\n                return object;\n            let message = new $root.chromeos_update_engine.PartitionInfo();\n            if (object.size != null)\n                if ($util.Long)\n                    (message.size = $util.Long.fromValue(object.size)).unsigned = true;\n                else if (typeof object.size === \"string\")\n                    message.size = parseInt(object.size, 10);\n                else if (typeof object.size === \"number\")\n                    message.size = object.size;\n                else if (typeof object.size === \"object\")\n                    message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber(true);\n            if (object.hash != null)\n                if (typeof object.hash === \"string\")\n                    $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);\n                else if (object.hash.length)\n                    message.hash = object.hash;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a PartitionInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {chromeos_update_engine.PartitionInfo} message PartitionInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PartitionInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.size = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.hash = \"\";\n                else {\n                    object.hash = [];\n                    if (options.bytes !== Array)\n                        object.hash = $util.newBuffer(object.hash);\n                }\n            }\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (typeof message.size === \"number\")\n                    object.size = options.longs === String ? String(message.size) : message.size;\n                else\n                    object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber(true) : message.size;\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;\n            return object;\n        };\n\n        /**\n         * Converts this PartitionInfo to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PartitionInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return PartitionInfo;\n    })();\n\n    chromeos_update_engine.InstallOperation = (function() {\n\n        /**\n         * Properties of an InstallOperation.\n         * @memberof chromeos_update_engine\n         * @interface IInstallOperation\n         * @property {chromeos_update_engine.InstallOperation.Type} type InstallOperation type\n         * @property {number|Long|null} [dataOffset] InstallOperation dataOffset\n         * @property {number|Long|null} [dataLength] InstallOperation dataLength\n         * @property {Array.<chromeos_update_engine.IExtent>|null} [srcExtents] InstallOperation srcExtents\n         * @property {number|Long|null} [srcLength] InstallOperation srcLength\n         * @property {Array.<chromeos_update_engine.IExtent>|null} [dstExtents] InstallOperation dstExtents\n         * @property {number|Long|null} [dstLength] InstallOperation dstLength\n         * @property {Uint8Array|null} [dataSha256Hash] InstallOperation dataSha256Hash\n         * @property {Uint8Array|null} [srcSha256Hash] InstallOperation srcSha256Hash\n         */\n\n        /**\n         * Constructs a new InstallOperation.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents an InstallOperation.\n         * @implements IInstallOperation\n         * @constructor\n         * @param {chromeos_update_engine.IInstallOperation=} [properties] Properties to set\n         */\n        function InstallOperation(properties) {\n            this.srcExtents = [];\n            this.dstExtents = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * InstallOperation type.\n         * @member {chromeos_update_engine.InstallOperation.Type} type\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.type = 0;\n\n        /**\n         * InstallOperation dataOffset.\n         * @member {number|Long} dataOffset\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dataOffset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * InstallOperation dataLength.\n         * @member {number|Long} dataLength\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dataLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * InstallOperation srcExtents.\n         * @member {Array.<chromeos_update_engine.IExtent>} srcExtents\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.srcExtents = $util.emptyArray;\n\n        /**\n         * InstallOperation srcLength.\n         * @member {number|Long} srcLength\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.srcLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * InstallOperation dstExtents.\n         * @member {Array.<chromeos_update_engine.IExtent>} dstExtents\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dstExtents = $util.emptyArray;\n\n        /**\n         * InstallOperation dstLength.\n         * @member {number|Long} dstLength\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dstLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * InstallOperation dataSha256Hash.\n         * @member {Uint8Array} dataSha256Hash\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dataSha256Hash = $util.newBuffer([]);\n\n        /**\n         * InstallOperation srcSha256Hash.\n         * @member {Uint8Array} srcSha256Hash\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.srcSha256Hash = $util.newBuffer([]);\n\n        /**\n         * Creates a new InstallOperation instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {chromeos_update_engine.IInstallOperation=} [properties] Properties to set\n         * @returns {chromeos_update_engine.InstallOperation} InstallOperation instance\n         */\n        InstallOperation.create = function create(properties) {\n            return new InstallOperation(properties);\n        };\n\n        /**\n         * Encodes the specified InstallOperation message. Does not implicitly {@link chromeos_update_engine.InstallOperation.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {chromeos_update_engine.IInstallOperation} message InstallOperation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InstallOperation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);\n            if (message.dataOffset != null && Object.hasOwnProperty.call(message, \"dataOffset\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.dataOffset);\n            if (message.dataLength != null && Object.hasOwnProperty.call(message, \"dataLength\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.dataLength);\n            if (message.srcExtents != null && message.srcExtents.length)\n                for (let i = 0; i < message.srcExtents.length; ++i)\n                    $root.chromeos_update_engine.Extent.encode(message.srcExtents[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.srcLength != null && Object.hasOwnProperty.call(message, \"srcLength\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.srcLength);\n            if (message.dstExtents != null && message.dstExtents.length)\n                for (let i = 0; i < message.dstExtents.length; ++i)\n                    $root.chromeos_update_engine.Extent.encode(message.dstExtents[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.dstLength != null && Object.hasOwnProperty.call(message, \"dstLength\"))\n                writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.dstLength);\n            if (message.dataSha256Hash != null && Object.hasOwnProperty.call(message, \"dataSha256Hash\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.dataSha256Hash);\n            if (message.srcSha256Hash != null && Object.hasOwnProperty.call(message, \"srcSha256Hash\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.srcSha256Hash);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified InstallOperation message, length delimited. Does not implicitly {@link chromeos_update_engine.InstallOperation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {chromeos_update_engine.IInstallOperation} message InstallOperation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InstallOperation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an InstallOperation message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.InstallOperation} InstallOperation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InstallOperation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.InstallOperation();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.dataOffset = reader.uint64();\n                    break;\n                case 3:\n                    message.dataLength = reader.uint64();\n                    break;\n                case 4:\n                    if (!(message.srcExtents && message.srcExtents.length))\n                        message.srcExtents = [];\n                    message.srcExtents.push($root.chromeos_update_engine.Extent.decode(reader, reader.uint32()));\n                    break;\n                case 5:\n                    message.srcLength = reader.uint64();\n                    break;\n                case 6:\n                    if (!(message.dstExtents && message.dstExtents.length))\n                        message.dstExtents = [];\n                    message.dstExtents.push($root.chromeos_update_engine.Extent.decode(reader, reader.uint32()));\n                    break;\n                case 7:\n                    message.dstLength = reader.uint64();\n                    break;\n                case 8:\n                    message.dataSha256Hash = reader.bytes();\n                    break;\n                case 9:\n                    message.srcSha256Hash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            if (!message.hasOwnProperty(\"type\"))\n                throw $util.ProtocolError(\"missing required 'type'\", { instance: message });\n            return message;\n        };\n\n        /**\n         * Decodes an InstallOperation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.InstallOperation} InstallOperation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InstallOperation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an InstallOperation message.\n         * @function verify\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        InstallOperation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            switch (message.type) {\n            default:\n                return \"type: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 8:\n            case 6:\n            case 7:\n            case 10:\n            case 9:\n            case 11:\n            case 12:\n            case 13:\n                break;\n            }\n            if (message.dataOffset != null && message.hasOwnProperty(\"dataOffset\"))\n                if (!$util.isInteger(message.dataOffset) && !(message.dataOffset && $util.isInteger(message.dataOffset.low) && $util.isInteger(message.dataOffset.high)))\n                    return \"dataOffset: integer|Long expected\";\n            if (message.dataLength != null && message.hasOwnProperty(\"dataLength\"))\n                if (!$util.isInteger(message.dataLength) && !(message.dataLength && $util.isInteger(message.dataLength.low) && $util.isInteger(message.dataLength.high)))\n                    return \"dataLength: integer|Long expected\";\n            if (message.srcExtents != null && message.hasOwnProperty(\"srcExtents\")) {\n                if (!Array.isArray(message.srcExtents))\n                    return \"srcExtents: array expected\";\n                for (let i = 0; i < message.srcExtents.length; ++i) {\n                    let error = $root.chromeos_update_engine.Extent.verify(message.srcExtents[i]);\n                    if (error)\n                        return \"srcExtents.\" + error;\n                }\n            }\n            if (message.srcLength != null && message.hasOwnProperty(\"srcLength\"))\n                if (!$util.isInteger(message.srcLength) && !(message.srcLength && $util.isInteger(message.srcLength.low) && $util.isInteger(message.srcLength.high)))\n                    return \"srcLength: integer|Long expected\";\n            if (message.dstExtents != null && message.hasOwnProperty(\"dstExtents\")) {\n                if (!Array.isArray(message.dstExtents))\n                    return \"dstExtents: array expected\";\n                for (let i = 0; i < message.dstExtents.length; ++i) {\n                    let error = $root.chromeos_update_engine.Extent.verify(message.dstExtents[i]);\n                    if (error)\n                        return \"dstExtents.\" + error;\n                }\n            }\n            if (message.dstLength != null && message.hasOwnProperty(\"dstLength\"))\n                if (!$util.isInteger(message.dstLength) && !(message.dstLength && $util.isInteger(message.dstLength.low) && $util.isInteger(message.dstLength.high)))\n                    return \"dstLength: integer|Long expected\";\n            if (message.dataSha256Hash != null && message.hasOwnProperty(\"dataSha256Hash\"))\n                if (!(message.dataSha256Hash && typeof message.dataSha256Hash.length === \"number\" || $util.isString(message.dataSha256Hash)))\n                    return \"dataSha256Hash: buffer expected\";\n            if (message.srcSha256Hash != null && message.hasOwnProperty(\"srcSha256Hash\"))\n                if (!(message.srcSha256Hash && typeof message.srcSha256Hash.length === \"number\" || $util.isString(message.srcSha256Hash)))\n                    return \"srcSha256Hash: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates an InstallOperation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.InstallOperation} InstallOperation\n         */\n        InstallOperation.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.InstallOperation)\n                return object;\n            let message = new $root.chromeos_update_engine.InstallOperation();\n            switch (object.type) {\n            case \"REPLACE\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"REPLACE_BZ\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"MOVE\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"BSDIFF\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"SOURCE_COPY\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"SOURCE_BSDIFF\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"REPLACE_XZ\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"ZERO\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"DISCARD\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"BROTLI_BSDIFF\":\n            case 10:\n                message.type = 10;\n                break;\n            case \"PUFFDIFF\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"ZUCCHINI\":\n            case 11:\n                message.type = 11;\n                break;\n            case \"LZ4DIFF_BSDIFF\":\n            case 12:\n                message.type = 12;\n                break;\n            case \"LZ4DIFF_PUFFDIFF\":\n            case 13:\n                message.type = 13;\n                break;\n            }\n            if (object.dataOffset != null)\n                if ($util.Long)\n                    (message.dataOffset = $util.Long.fromValue(object.dataOffset)).unsigned = true;\n                else if (typeof object.dataOffset === \"string\")\n                    message.dataOffset = parseInt(object.dataOffset, 10);\n                else if (typeof object.dataOffset === \"number\")\n                    message.dataOffset = object.dataOffset;\n                else if (typeof object.dataOffset === \"object\")\n                    message.dataOffset = new $util.LongBits(object.dataOffset.low >>> 0, object.dataOffset.high >>> 0).toNumber(true);\n            if (object.dataLength != null)\n                if ($util.Long)\n                    (message.dataLength = $util.Long.fromValue(object.dataLength)).unsigned = true;\n                else if (typeof object.dataLength === \"string\")\n                    message.dataLength = parseInt(object.dataLength, 10);\n                else if (typeof object.dataLength === \"number\")\n                    message.dataLength = object.dataLength;\n                else if (typeof object.dataLength === \"object\")\n                    message.dataLength = new $util.LongBits(object.dataLength.low >>> 0, object.dataLength.high >>> 0).toNumber(true);\n            if (object.srcExtents) {\n                if (!Array.isArray(object.srcExtents))\n                    throw TypeError(\".chromeos_update_engine.InstallOperation.srcExtents: array expected\");\n                message.srcExtents = [];\n                for (let i = 0; i < object.srcExtents.length; ++i) {\n                    if (typeof object.srcExtents[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.InstallOperation.srcExtents: object expected\");\n                    message.srcExtents[i] = $root.chromeos_update_engine.Extent.fromObject(object.srcExtents[i]);\n                }\n            }\n            if (object.srcLength != null)\n                if ($util.Long)\n                    (message.srcLength = $util.Long.fromValue(object.srcLength)).unsigned = true;\n                else if (typeof object.srcLength === \"string\")\n                    message.srcLength = parseInt(object.srcLength, 10);\n                else if (typeof object.srcLength === \"number\")\n                    message.srcLength = object.srcLength;\n                else if (typeof object.srcLength === \"object\")\n                    message.srcLength = new $util.LongBits(object.srcLength.low >>> 0, object.srcLength.high >>> 0).toNumber(true);\n            if (object.dstExtents) {\n                if (!Array.isArray(object.dstExtents))\n                    throw TypeError(\".chromeos_update_engine.InstallOperation.dstExtents: array expected\");\n                message.dstExtents = [];\n                for (let i = 0; i < object.dstExtents.length; ++i) {\n                    if (typeof object.dstExtents[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.InstallOperation.dstExtents: object expected\");\n                    message.dstExtents[i] = $root.chromeos_update_engine.Extent.fromObject(object.dstExtents[i]);\n                }\n            }\n            if (object.dstLength != null)\n                if ($util.Long)\n                    (message.dstLength = $util.Long.fromValue(object.dstLength)).unsigned = true;\n                else if (typeof object.dstLength === \"string\")\n                    message.dstLength = parseInt(object.dstLength, 10);\n                else if (typeof object.dstLength === \"number\")\n                    message.dstLength = object.dstLength;\n                else if (typeof object.dstLength === \"object\")\n                    message.dstLength = new $util.LongBits(object.dstLength.low >>> 0, object.dstLength.high >>> 0).toNumber(true);\n            if (object.dataSha256Hash != null)\n                if (typeof object.dataSha256Hash === \"string\")\n                    $util.base64.decode(object.dataSha256Hash, message.dataSha256Hash = $util.newBuffer($util.base64.length(object.dataSha256Hash)), 0);\n                else if (object.dataSha256Hash.length)\n                    message.dataSha256Hash = object.dataSha256Hash;\n            if (object.srcSha256Hash != null)\n                if (typeof object.srcSha256Hash === \"string\")\n                    $util.base64.decode(object.srcSha256Hash, message.srcSha256Hash = $util.newBuffer($util.base64.length(object.srcSha256Hash)), 0);\n                else if (object.srcSha256Hash.length)\n                    message.srcSha256Hash = object.srcSha256Hash;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an InstallOperation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {chromeos_update_engine.InstallOperation} message InstallOperation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        InstallOperation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.srcExtents = [];\n                object.dstExtents = [];\n            }\n            if (options.defaults) {\n                object.type = options.enums === String ? \"REPLACE\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.dataOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.dataOffset = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.dataLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.dataLength = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.srcLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.srcLength = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.dstLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.dstLength = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.dataSha256Hash = \"\";\n                else {\n                    object.dataSha256Hash = [];\n                    if (options.bytes !== Array)\n                        object.dataSha256Hash = $util.newBuffer(object.dataSha256Hash);\n                }\n                if (options.bytes === String)\n                    object.srcSha256Hash = \"\";\n                else {\n                    object.srcSha256Hash = [];\n                    if (options.bytes !== Array)\n                        object.srcSha256Hash = $util.newBuffer(object.srcSha256Hash);\n                }\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.chromeos_update_engine.InstallOperation.Type[message.type] : message.type;\n            if (message.dataOffset != null && message.hasOwnProperty(\"dataOffset\"))\n                if (typeof message.dataOffset === \"number\")\n                    object.dataOffset = options.longs === String ? String(message.dataOffset) : message.dataOffset;\n                else\n                    object.dataOffset = options.longs === String ? $util.Long.prototype.toString.call(message.dataOffset) : options.longs === Number ? new $util.LongBits(message.dataOffset.low >>> 0, message.dataOffset.high >>> 0).toNumber(true) : message.dataOffset;\n            if (message.dataLength != null && message.hasOwnProperty(\"dataLength\"))\n                if (typeof message.dataLength === \"number\")\n                    object.dataLength = options.longs === String ? String(message.dataLength) : message.dataLength;\n                else\n                    object.dataLength = options.longs === String ? $util.Long.prototype.toString.call(message.dataLength) : options.longs === Number ? new $util.LongBits(message.dataLength.low >>> 0, message.dataLength.high >>> 0).toNumber(true) : message.dataLength;\n            if (message.srcExtents && message.srcExtents.length) {\n                object.srcExtents = [];\n                for (let j = 0; j < message.srcExtents.length; ++j)\n                    object.srcExtents[j] = $root.chromeos_update_engine.Extent.toObject(message.srcExtents[j], options);\n            }\n            if (message.srcLength != null && message.hasOwnProperty(\"srcLength\"))\n                if (typeof message.srcLength === \"number\")\n                    object.srcLength = options.longs === String ? String(message.srcLength) : message.srcLength;\n                else\n                    object.srcLength = options.longs === String ? $util.Long.prototype.toString.call(message.srcLength) : options.longs === Number ? new $util.LongBits(message.srcLength.low >>> 0, message.srcLength.high >>> 0).toNumber(true) : message.srcLength;\n            if (message.dstExtents && message.dstExtents.length) {\n                object.dstExtents = [];\n                for (let j = 0; j < message.dstExtents.length; ++j)\n                    object.dstExtents[j] = $root.chromeos_update_engine.Extent.toObject(message.dstExtents[j], options);\n            }\n            if (message.dstLength != null && message.hasOwnProperty(\"dstLength\"))\n                if (typeof message.dstLength === \"number\")\n                    object.dstLength = options.longs === String ? String(message.dstLength) : message.dstLength;\n                else\n                    object.dstLength = options.longs === String ? $util.Long.prototype.toString.call(message.dstLength) : options.longs === Number ? new $util.LongBits(message.dstLength.low >>> 0, message.dstLength.high >>> 0).toNumber(true) : message.dstLength;\n            if (message.dataSha256Hash != null && message.hasOwnProperty(\"dataSha256Hash\"))\n                object.dataSha256Hash = options.bytes === String ? $util.base64.encode(message.dataSha256Hash, 0, message.dataSha256Hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.dataSha256Hash) : message.dataSha256Hash;\n            if (message.srcSha256Hash != null && message.hasOwnProperty(\"srcSha256Hash\"))\n                object.srcSha256Hash = options.bytes === String ? $util.base64.encode(message.srcSha256Hash, 0, message.srcSha256Hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.srcSha256Hash) : message.srcSha256Hash;\n            return object;\n        };\n\n        /**\n         * Converts this InstallOperation to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        InstallOperation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Type enum.\n         * @name chromeos_update_engine.InstallOperation.Type\n         * @enum {number}\n         * @property {number} REPLACE=0 REPLACE value\n         * @property {number} REPLACE_BZ=1 REPLACE_BZ value\n         * @property {number} MOVE=2 MOVE value\n         * @property {number} BSDIFF=3 BSDIFF value\n         * @property {number} SOURCE_COPY=4 SOURCE_COPY value\n         * @property {number} SOURCE_BSDIFF=5 SOURCE_BSDIFF value\n         * @property {number} REPLACE_XZ=8 REPLACE_XZ value\n         * @property {number} ZERO=6 ZERO value\n         * @property {number} DISCARD=7 DISCARD value\n         * @property {number} BROTLI_BSDIFF=10 BROTLI_BSDIFF value\n         * @property {number} PUFFDIFF=9 PUFFDIFF value\n         * @property {number} ZUCCHINI=11 ZUCCHINI value\n         * @property {number} LZ4DIFF_BSDIFF=12 LZ4DIFF_BSDIFF value\n         * @property {number} LZ4DIFF_PUFFDIFF=13 LZ4DIFF_PUFFDIFF value\n         */\n        InstallOperation.Type = (function() {\n            const valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"REPLACE\"] = 0;\n            values[valuesById[1] = \"REPLACE_BZ\"] = 1;\n            values[valuesById[2] = \"MOVE\"] = 2;\n            values[valuesById[3] = \"BSDIFF\"] = 3;\n            values[valuesById[4] = \"SOURCE_COPY\"] = 4;\n            values[valuesById[5] = \"SOURCE_BSDIFF\"] = 5;\n            values[valuesById[8] = \"REPLACE_XZ\"] = 8;\n            values[valuesById[6] = \"ZERO\"] = 6;\n            values[valuesById[7] = \"DISCARD\"] = 7;\n            values[valuesById[10] = \"BROTLI_BSDIFF\"] = 10;\n            values[valuesById[9] = \"PUFFDIFF\"] = 9;\n            values[valuesById[11] = \"ZUCCHINI\"] = 11;\n            values[valuesById[12] = \"LZ4DIFF_BSDIFF\"] = 12;\n            values[valuesById[13] = \"LZ4DIFF_PUFFDIFF\"] = 13;\n            return values;\n        })();\n\n        return InstallOperation;\n    })();\n\n    chromeos_update_engine.CowMergeOperation = (function() {\n\n        /**\n         * Properties of a CowMergeOperation.\n         * @memberof chromeos_update_engine\n         * @interface ICowMergeOperation\n         * @property {chromeos_update_engine.CowMergeOperation.Type|null} [type] CowMergeOperation type\n         * @property {chromeos_update_engine.IExtent|null} [srcExtent] CowMergeOperation srcExtent\n         * @property {chromeos_update_engine.IExtent|null} [dstExtent] CowMergeOperation dstExtent\n         * @property {number|null} [srcOffset] CowMergeOperation srcOffset\n         */\n\n        /**\n         * Constructs a new CowMergeOperation.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a CowMergeOperation.\n         * @implements ICowMergeOperation\n         * @constructor\n         * @param {chromeos_update_engine.ICowMergeOperation=} [properties] Properties to set\n         */\n        function CowMergeOperation(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CowMergeOperation type.\n         * @member {chromeos_update_engine.CowMergeOperation.Type} type\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         */\n        CowMergeOperation.prototype.type = 0;\n\n        /**\n         * CowMergeOperation srcExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} srcExtent\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         */\n        CowMergeOperation.prototype.srcExtent = null;\n\n        /**\n         * CowMergeOperation dstExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} dstExtent\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         */\n        CowMergeOperation.prototype.dstExtent = null;\n\n        /**\n         * CowMergeOperation srcOffset.\n         * @member {number} srcOffset\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         */\n        CowMergeOperation.prototype.srcOffset = 0;\n\n        /**\n         * Creates a new CowMergeOperation instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {chromeos_update_engine.ICowMergeOperation=} [properties] Properties to set\n         * @returns {chromeos_update_engine.CowMergeOperation} CowMergeOperation instance\n         */\n        CowMergeOperation.create = function create(properties) {\n            return new CowMergeOperation(properties);\n        };\n\n        /**\n         * Encodes the specified CowMergeOperation message. Does not implicitly {@link chromeos_update_engine.CowMergeOperation.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {chromeos_update_engine.ICowMergeOperation} message CowMergeOperation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CowMergeOperation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);\n            if (message.srcExtent != null && Object.hasOwnProperty.call(message, \"srcExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.srcExtent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.dstExtent != null && Object.hasOwnProperty.call(message, \"dstExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.dstExtent, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.srcOffset != null && Object.hasOwnProperty.call(message, \"srcOffset\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.srcOffset);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CowMergeOperation message, length delimited. Does not implicitly {@link chromeos_update_engine.CowMergeOperation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {chromeos_update_engine.ICowMergeOperation} message CowMergeOperation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CowMergeOperation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CowMergeOperation message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.CowMergeOperation} CowMergeOperation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CowMergeOperation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.CowMergeOperation();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.srcExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.dstExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.srcOffset = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CowMergeOperation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.CowMergeOperation} CowMergeOperation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CowMergeOperation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CowMergeOperation message.\n         * @function verify\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CowMergeOperation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n                }\n            if (message.srcExtent != null && message.hasOwnProperty(\"srcExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.srcExtent);\n                if (error)\n                    return \"srcExtent.\" + error;\n            }\n            if (message.dstExtent != null && message.hasOwnProperty(\"dstExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.dstExtent);\n                if (error)\n                    return \"dstExtent.\" + error;\n            }\n            if (message.srcOffset != null && message.hasOwnProperty(\"srcOffset\"))\n                if (!$util.isInteger(message.srcOffset))\n                    return \"srcOffset: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a CowMergeOperation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.CowMergeOperation} CowMergeOperation\n         */\n        CowMergeOperation.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.CowMergeOperation)\n                return object;\n            let message = new $root.chromeos_update_engine.CowMergeOperation();\n            switch (object.type) {\n            case \"COW_COPY\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"COW_XOR\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"COW_REPLACE\":\n            case 2:\n                message.type = 2;\n                break;\n            }\n            if (object.srcExtent != null) {\n                if (typeof object.srcExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.CowMergeOperation.srcExtent: object expected\");\n                message.srcExtent = $root.chromeos_update_engine.Extent.fromObject(object.srcExtent);\n            }\n            if (object.dstExtent != null) {\n                if (typeof object.dstExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.CowMergeOperation.dstExtent: object expected\");\n                message.dstExtent = $root.chromeos_update_engine.Extent.fromObject(object.dstExtent);\n            }\n            if (object.srcOffset != null)\n                message.srcOffset = object.srcOffset >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CowMergeOperation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {chromeos_update_engine.CowMergeOperation} message CowMergeOperation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CowMergeOperation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.type = options.enums === String ? \"COW_COPY\" : 0;\n                object.srcExtent = null;\n                object.dstExtent = null;\n                object.srcOffset = 0;\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.chromeos_update_engine.CowMergeOperation.Type[message.type] : message.type;\n            if (message.srcExtent != null && message.hasOwnProperty(\"srcExtent\"))\n                object.srcExtent = $root.chromeos_update_engine.Extent.toObject(message.srcExtent, options);\n            if (message.dstExtent != null && message.hasOwnProperty(\"dstExtent\"))\n                object.dstExtent = $root.chromeos_update_engine.Extent.toObject(message.dstExtent, options);\n            if (message.srcOffset != null && message.hasOwnProperty(\"srcOffset\"))\n                object.srcOffset = message.srcOffset;\n            return object;\n        };\n\n        /**\n         * Converts this CowMergeOperation to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CowMergeOperation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Type enum.\n         * @name chromeos_update_engine.CowMergeOperation.Type\n         * @enum {number}\n         * @property {number} COW_COPY=0 COW_COPY value\n         * @property {number} COW_XOR=1 COW_XOR value\n         * @property {number} COW_REPLACE=2 COW_REPLACE value\n         */\n        CowMergeOperation.Type = (function() {\n            const valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"COW_COPY\"] = 0;\n            values[valuesById[1] = \"COW_XOR\"] = 1;\n            values[valuesById[2] = \"COW_REPLACE\"] = 2;\n            return values;\n        })();\n\n        return CowMergeOperation;\n    })();\n\n    chromeos_update_engine.PartitionUpdate = (function() {\n\n        /**\n         * Properties of a PartitionUpdate.\n         * @memberof chromeos_update_engine\n         * @interface IPartitionUpdate\n         * @property {string} partitionName PartitionUpdate partitionName\n         * @property {boolean|null} [runPostinstall] PartitionUpdate runPostinstall\n         * @property {string|null} [postinstallPath] PartitionUpdate postinstallPath\n         * @property {string|null} [filesystemType] PartitionUpdate filesystemType\n         * @property {Array.<chromeos_update_engine.Signatures.ISignature>|null} [newPartitionSignature] PartitionUpdate newPartitionSignature\n         * @property {chromeos_update_engine.IPartitionInfo|null} [oldPartitionInfo] PartitionUpdate oldPartitionInfo\n         * @property {chromeos_update_engine.IPartitionInfo|null} [newPartitionInfo] PartitionUpdate newPartitionInfo\n         * @property {Array.<chromeos_update_engine.IInstallOperation>|null} [operations] PartitionUpdate operations\n         * @property {boolean|null} [postinstallOptional] PartitionUpdate postinstallOptional\n         * @property {chromeos_update_engine.IExtent|null} [hashTreeDataExtent] PartitionUpdate hashTreeDataExtent\n         * @property {chromeos_update_engine.IExtent|null} [hashTreeExtent] PartitionUpdate hashTreeExtent\n         * @property {string|null} [hashTreeAlgorithm] PartitionUpdate hashTreeAlgorithm\n         * @property {Uint8Array|null} [hashTreeSalt] PartitionUpdate hashTreeSalt\n         * @property {chromeos_update_engine.IExtent|null} [fecDataExtent] PartitionUpdate fecDataExtent\n         * @property {chromeos_update_engine.IExtent|null} [fecExtent] PartitionUpdate fecExtent\n         * @property {number|null} [fecRoots] PartitionUpdate fecRoots\n         * @property {string|null} [version] PartitionUpdate version\n         * @property {Array.<chromeos_update_engine.ICowMergeOperation>|null} [mergeOperations] PartitionUpdate mergeOperations\n         * @property {number|Long|null} [estimateCowSize] PartitionUpdate estimateCowSize\n         */\n\n        /**\n         * Constructs a new PartitionUpdate.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a PartitionUpdate.\n         * @implements IPartitionUpdate\n         * @constructor\n         * @param {chromeos_update_engine.IPartitionUpdate=} [properties] Properties to set\n         */\n        function PartitionUpdate(properties) {\n            this.newPartitionSignature = [];\n            this.operations = [];\n            this.mergeOperations = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PartitionUpdate partitionName.\n         * @member {string} partitionName\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.partitionName = \"\";\n\n        /**\n         * PartitionUpdate runPostinstall.\n         * @member {boolean} runPostinstall\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.runPostinstall = false;\n\n        /**\n         * PartitionUpdate postinstallPath.\n         * @member {string} postinstallPath\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.postinstallPath = \"\";\n\n        /**\n         * PartitionUpdate filesystemType.\n         * @member {string} filesystemType\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.filesystemType = \"\";\n\n        /**\n         * PartitionUpdate newPartitionSignature.\n         * @member {Array.<chromeos_update_engine.Signatures.ISignature>} newPartitionSignature\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.newPartitionSignature = $util.emptyArray;\n\n        /**\n         * PartitionUpdate oldPartitionInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} oldPartitionInfo\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.oldPartitionInfo = null;\n\n        /**\n         * PartitionUpdate newPartitionInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} newPartitionInfo\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.newPartitionInfo = null;\n\n        /**\n         * PartitionUpdate operations.\n         * @member {Array.<chromeos_update_engine.IInstallOperation>} operations\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.operations = $util.emptyArray;\n\n        /**\n         * PartitionUpdate postinstallOptional.\n         * @member {boolean} postinstallOptional\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.postinstallOptional = false;\n\n        /**\n         * PartitionUpdate hashTreeDataExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} hashTreeDataExtent\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.hashTreeDataExtent = null;\n\n        /**\n         * PartitionUpdate hashTreeExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} hashTreeExtent\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.hashTreeExtent = null;\n\n        /**\n         * PartitionUpdate hashTreeAlgorithm.\n         * @member {string} hashTreeAlgorithm\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.hashTreeAlgorithm = \"\";\n\n        /**\n         * PartitionUpdate hashTreeSalt.\n         * @member {Uint8Array} hashTreeSalt\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.hashTreeSalt = $util.newBuffer([]);\n\n        /**\n         * PartitionUpdate fecDataExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} fecDataExtent\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.fecDataExtent = null;\n\n        /**\n         * PartitionUpdate fecExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} fecExtent\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.fecExtent = null;\n\n        /**\n         * PartitionUpdate fecRoots.\n         * @member {number} fecRoots\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.fecRoots = 2;\n\n        /**\n         * PartitionUpdate version.\n         * @member {string} version\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.version = \"\";\n\n        /**\n         * PartitionUpdate mergeOperations.\n         * @member {Array.<chromeos_update_engine.ICowMergeOperation>} mergeOperations\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.mergeOperations = $util.emptyArray;\n\n        /**\n         * PartitionUpdate estimateCowSize.\n         * @member {number|Long} estimateCowSize\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.estimateCowSize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new PartitionUpdate instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {chromeos_update_engine.IPartitionUpdate=} [properties] Properties to set\n         * @returns {chromeos_update_engine.PartitionUpdate} PartitionUpdate instance\n         */\n        PartitionUpdate.create = function create(properties) {\n            return new PartitionUpdate(properties);\n        };\n\n        /**\n         * Encodes the specified PartitionUpdate message. Does not implicitly {@link chromeos_update_engine.PartitionUpdate.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {chromeos_update_engine.IPartitionUpdate} message PartitionUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PartitionUpdate.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.partitionName);\n            if (message.runPostinstall != null && Object.hasOwnProperty.call(message, \"runPostinstall\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.runPostinstall);\n            if (message.postinstallPath != null && Object.hasOwnProperty.call(message, \"postinstallPath\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.postinstallPath);\n            if (message.filesystemType != null && Object.hasOwnProperty.call(message, \"filesystemType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.filesystemType);\n            if (message.newPartitionSignature != null && message.newPartitionSignature.length)\n                for (let i = 0; i < message.newPartitionSignature.length; ++i)\n                    $root.chromeos_update_engine.Signatures.Signature.encode(message.newPartitionSignature[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.oldPartitionInfo != null && Object.hasOwnProperty.call(message, \"oldPartitionInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.oldPartitionInfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.newPartitionInfo != null && Object.hasOwnProperty.call(message, \"newPartitionInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.newPartitionInfo, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.operations != null && message.operations.length)\n                for (let i = 0; i < message.operations.length; ++i)\n                    $root.chromeos_update_engine.InstallOperation.encode(message.operations[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.postinstallOptional != null && Object.hasOwnProperty.call(message, \"postinstallOptional\"))\n                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.postinstallOptional);\n            if (message.hashTreeDataExtent != null && Object.hasOwnProperty.call(message, \"hashTreeDataExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.hashTreeDataExtent, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.hashTreeExtent != null && Object.hasOwnProperty.call(message, \"hashTreeExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.hashTreeExtent, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.hashTreeAlgorithm != null && Object.hasOwnProperty.call(message, \"hashTreeAlgorithm\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.hashTreeAlgorithm);\n            if (message.hashTreeSalt != null && Object.hasOwnProperty.call(message, \"hashTreeSalt\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).bytes(message.hashTreeSalt);\n            if (message.fecDataExtent != null && Object.hasOwnProperty.call(message, \"fecDataExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.fecDataExtent, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.fecExtent != null && Object.hasOwnProperty.call(message, \"fecExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.fecExtent, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.fecRoots != null && Object.hasOwnProperty.call(message, \"fecRoots\"))\n                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.fecRoots);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 17, wireType 2 =*/138).string(message.version);\n            if (message.mergeOperations != null && message.mergeOperations.length)\n                for (let i = 0; i < message.mergeOperations.length; ++i)\n                    $root.chromeos_update_engine.CowMergeOperation.encode(message.mergeOperations[i], writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n            if (message.estimateCowSize != null && Object.hasOwnProperty.call(message, \"estimateCowSize\"))\n                writer.uint32(/* id 19, wireType 0 =*/152).uint64(message.estimateCowSize);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified PartitionUpdate message, length delimited. Does not implicitly {@link chromeos_update_engine.PartitionUpdate.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {chromeos_update_engine.IPartitionUpdate} message PartitionUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PartitionUpdate.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PartitionUpdate message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.PartitionUpdate} PartitionUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PartitionUpdate.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.PartitionUpdate();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.partitionName = reader.string();\n                    break;\n                case 2:\n                    message.runPostinstall = reader.bool();\n                    break;\n                case 3:\n                    message.postinstallPath = reader.string();\n                    break;\n                case 4:\n                    message.filesystemType = reader.string();\n                    break;\n                case 5:\n                    if (!(message.newPartitionSignature && message.newPartitionSignature.length))\n                        message.newPartitionSignature = [];\n                    message.newPartitionSignature.push($root.chromeos_update_engine.Signatures.Signature.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.oldPartitionInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.newPartitionInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    if (!(message.operations && message.operations.length))\n                        message.operations = [];\n                    message.operations.push($root.chromeos_update_engine.InstallOperation.decode(reader, reader.uint32()));\n                    break;\n                case 9:\n                    message.postinstallOptional = reader.bool();\n                    break;\n                case 10:\n                    message.hashTreeDataExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.hashTreeExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.hashTreeAlgorithm = reader.string();\n                    break;\n                case 13:\n                    message.hashTreeSalt = reader.bytes();\n                    break;\n                case 14:\n                    message.fecDataExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 15:\n                    message.fecExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 16:\n                    message.fecRoots = reader.uint32();\n                    break;\n                case 17:\n                    message.version = reader.string();\n                    break;\n                case 18:\n                    if (!(message.mergeOperations && message.mergeOperations.length))\n                        message.mergeOperations = [];\n                    message.mergeOperations.push($root.chromeos_update_engine.CowMergeOperation.decode(reader, reader.uint32()));\n                    break;\n                case 19:\n                    message.estimateCowSize = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            if (!message.hasOwnProperty(\"partitionName\"))\n                throw $util.ProtocolError(\"missing required 'partitionName'\", { instance: message });\n            return message;\n        };\n\n        /**\n         * Decodes a PartitionUpdate message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.PartitionUpdate} PartitionUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PartitionUpdate.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PartitionUpdate message.\n         * @function verify\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PartitionUpdate.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (!$util.isString(message.partitionName))\n                return \"partitionName: string expected\";\n            if (message.runPostinstall != null && message.hasOwnProperty(\"runPostinstall\"))\n                if (typeof message.runPostinstall !== \"boolean\")\n                    return \"runPostinstall: boolean expected\";\n            if (message.postinstallPath != null && message.hasOwnProperty(\"postinstallPath\"))\n                if (!$util.isString(message.postinstallPath))\n                    return \"postinstallPath: string expected\";\n            if (message.filesystemType != null && message.hasOwnProperty(\"filesystemType\"))\n                if (!$util.isString(message.filesystemType))\n                    return \"filesystemType: string expected\";\n            if (message.newPartitionSignature != null && message.hasOwnProperty(\"newPartitionSignature\")) {\n                if (!Array.isArray(message.newPartitionSignature))\n                    return \"newPartitionSignature: array expected\";\n                for (let i = 0; i < message.newPartitionSignature.length; ++i) {\n                    let error = $root.chromeos_update_engine.Signatures.Signature.verify(message.newPartitionSignature[i]);\n                    if (error)\n                        return \"newPartitionSignature.\" + error;\n                }\n            }\n            if (message.oldPartitionInfo != null && message.hasOwnProperty(\"oldPartitionInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.oldPartitionInfo);\n                if (error)\n                    return \"oldPartitionInfo.\" + error;\n            }\n            if (message.newPartitionInfo != null && message.hasOwnProperty(\"newPartitionInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.newPartitionInfo);\n                if (error)\n                    return \"newPartitionInfo.\" + error;\n            }\n            if (message.operations != null && message.hasOwnProperty(\"operations\")) {\n                if (!Array.isArray(message.operations))\n                    return \"operations: array expected\";\n                for (let i = 0; i < message.operations.length; ++i) {\n                    let error = $root.chromeos_update_engine.InstallOperation.verify(message.operations[i]);\n                    if (error)\n                        return \"operations.\" + error;\n                }\n            }\n            if (message.postinstallOptional != null && message.hasOwnProperty(\"postinstallOptional\"))\n                if (typeof message.postinstallOptional !== \"boolean\")\n                    return \"postinstallOptional: boolean expected\";\n            if (message.hashTreeDataExtent != null && message.hasOwnProperty(\"hashTreeDataExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.hashTreeDataExtent);\n                if (error)\n                    return \"hashTreeDataExtent.\" + error;\n            }\n            if (message.hashTreeExtent != null && message.hasOwnProperty(\"hashTreeExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.hashTreeExtent);\n                if (error)\n                    return \"hashTreeExtent.\" + error;\n            }\n            if (message.hashTreeAlgorithm != null && message.hasOwnProperty(\"hashTreeAlgorithm\"))\n                if (!$util.isString(message.hashTreeAlgorithm))\n                    return \"hashTreeAlgorithm: string expected\";\n            if (message.hashTreeSalt != null && message.hasOwnProperty(\"hashTreeSalt\"))\n                if (!(message.hashTreeSalt && typeof message.hashTreeSalt.length === \"number\" || $util.isString(message.hashTreeSalt)))\n                    return \"hashTreeSalt: buffer expected\";\n            if (message.fecDataExtent != null && message.hasOwnProperty(\"fecDataExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.fecDataExtent);\n                if (error)\n                    return \"fecDataExtent.\" + error;\n            }\n            if (message.fecExtent != null && message.hasOwnProperty(\"fecExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.fecExtent);\n                if (error)\n                    return \"fecExtent.\" + error;\n            }\n            if (message.fecRoots != null && message.hasOwnProperty(\"fecRoots\"))\n                if (!$util.isInteger(message.fecRoots))\n                    return \"fecRoots: integer expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isString(message.version))\n                    return \"version: string expected\";\n            if (message.mergeOperations != null && message.hasOwnProperty(\"mergeOperations\")) {\n                if (!Array.isArray(message.mergeOperations))\n                    return \"mergeOperations: array expected\";\n                for (let i = 0; i < message.mergeOperations.length; ++i) {\n                    let error = $root.chromeos_update_engine.CowMergeOperation.verify(message.mergeOperations[i]);\n                    if (error)\n                        return \"mergeOperations.\" + error;\n                }\n            }\n            if (message.estimateCowSize != null && message.hasOwnProperty(\"estimateCowSize\"))\n                if (!$util.isInteger(message.estimateCowSize) && !(message.estimateCowSize && $util.isInteger(message.estimateCowSize.low) && $util.isInteger(message.estimateCowSize.high)))\n                    return \"estimateCowSize: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a PartitionUpdate message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.PartitionUpdate} PartitionUpdate\n         */\n        PartitionUpdate.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.PartitionUpdate)\n                return object;\n            let message = new $root.chromeos_update_engine.PartitionUpdate();\n            if (object.partitionName != null)\n                message.partitionName = String(object.partitionName);\n            if (object.runPostinstall != null)\n                message.runPostinstall = Boolean(object.runPostinstall);\n            if (object.postinstallPath != null)\n                message.postinstallPath = String(object.postinstallPath);\n            if (object.filesystemType != null)\n                message.filesystemType = String(object.filesystemType);\n            if (object.newPartitionSignature) {\n                if (!Array.isArray(object.newPartitionSignature))\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.newPartitionSignature: array expected\");\n                message.newPartitionSignature = [];\n                for (let i = 0; i < object.newPartitionSignature.length; ++i) {\n                    if (typeof object.newPartitionSignature[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.PartitionUpdate.newPartitionSignature: object expected\");\n                    message.newPartitionSignature[i] = $root.chromeos_update_engine.Signatures.Signature.fromObject(object.newPartitionSignature[i]);\n                }\n            }\n            if (object.oldPartitionInfo != null) {\n                if (typeof object.oldPartitionInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.oldPartitionInfo: object expected\");\n                message.oldPartitionInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.oldPartitionInfo);\n            }\n            if (object.newPartitionInfo != null) {\n                if (typeof object.newPartitionInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.newPartitionInfo: object expected\");\n                message.newPartitionInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.newPartitionInfo);\n            }\n            if (object.operations) {\n                if (!Array.isArray(object.operations))\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.operations: array expected\");\n                message.operations = [];\n                for (let i = 0; i < object.operations.length; ++i) {\n                    if (typeof object.operations[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.PartitionUpdate.operations: object expected\");\n                    message.operations[i] = $root.chromeos_update_engine.InstallOperation.fromObject(object.operations[i]);\n                }\n            }\n            if (object.postinstallOptional != null)\n                message.postinstallOptional = Boolean(object.postinstallOptional);\n            if (object.hashTreeDataExtent != null) {\n                if (typeof object.hashTreeDataExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.hashTreeDataExtent: object expected\");\n                message.hashTreeDataExtent = $root.chromeos_update_engine.Extent.fromObject(object.hashTreeDataExtent);\n            }\n            if (object.hashTreeExtent != null) {\n                if (typeof object.hashTreeExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.hashTreeExtent: object expected\");\n                message.hashTreeExtent = $root.chromeos_update_engine.Extent.fromObject(object.hashTreeExtent);\n            }\n            if (object.hashTreeAlgorithm != null)\n                message.hashTreeAlgorithm = String(object.hashTreeAlgorithm);\n            if (object.hashTreeSalt != null)\n                if (typeof object.hashTreeSalt === \"string\")\n                    $util.base64.decode(object.hashTreeSalt, message.hashTreeSalt = $util.newBuffer($util.base64.length(object.hashTreeSalt)), 0);\n                else if (object.hashTreeSalt.length)\n                    message.hashTreeSalt = object.hashTreeSalt;\n            if (object.fecDataExtent != null) {\n                if (typeof object.fecDataExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.fecDataExtent: object expected\");\n                message.fecDataExtent = $root.chromeos_update_engine.Extent.fromObject(object.fecDataExtent);\n            }\n            if (object.fecExtent != null) {\n                if (typeof object.fecExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.fecExtent: object expected\");\n                message.fecExtent = $root.chromeos_update_engine.Extent.fromObject(object.fecExtent);\n            }\n            if (object.fecRoots != null)\n                message.fecRoots = object.fecRoots >>> 0;\n            if (object.version != null)\n                message.version = String(object.version);\n            if (object.mergeOperations) {\n                if (!Array.isArray(object.mergeOperations))\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.mergeOperations: array expected\");\n                message.mergeOperations = [];\n                for (let i = 0; i < object.mergeOperations.length; ++i) {\n                    if (typeof object.mergeOperations[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.PartitionUpdate.mergeOperations: object expected\");\n                    message.mergeOperations[i] = $root.chromeos_update_engine.CowMergeOperation.fromObject(object.mergeOperations[i]);\n                }\n            }\n            if (object.estimateCowSize != null)\n                if ($util.Long)\n                    (message.estimateCowSize = $util.Long.fromValue(object.estimateCowSize)).unsigned = true;\n                else if (typeof object.estimateCowSize === \"string\")\n                    message.estimateCowSize = parseInt(object.estimateCowSize, 10);\n                else if (typeof object.estimateCowSize === \"number\")\n                    message.estimateCowSize = object.estimateCowSize;\n                else if (typeof object.estimateCowSize === \"object\")\n                    message.estimateCowSize = new $util.LongBits(object.estimateCowSize.low >>> 0, object.estimateCowSize.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a PartitionUpdate message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {chromeos_update_engine.PartitionUpdate} message PartitionUpdate\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PartitionUpdate.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.newPartitionSignature = [];\n                object.operations = [];\n                object.mergeOperations = [];\n            }\n            if (options.defaults) {\n                object.partitionName = \"\";\n                object.runPostinstall = false;\n                object.postinstallPath = \"\";\n                object.filesystemType = \"\";\n                object.oldPartitionInfo = null;\n                object.newPartitionInfo = null;\n                object.postinstallOptional = false;\n                object.hashTreeDataExtent = null;\n                object.hashTreeExtent = null;\n                object.hashTreeAlgorithm = \"\";\n                if (options.bytes === String)\n                    object.hashTreeSalt = \"\";\n                else {\n                    object.hashTreeSalt = [];\n                    if (options.bytes !== Array)\n                        object.hashTreeSalt = $util.newBuffer(object.hashTreeSalt);\n                }\n                object.fecDataExtent = null;\n                object.fecExtent = null;\n                object.fecRoots = 2;\n                object.version = \"\";\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.estimateCowSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.estimateCowSize = options.longs === String ? \"0\" : 0;\n            }\n            if (message.partitionName != null && message.hasOwnProperty(\"partitionName\"))\n                object.partitionName = message.partitionName;\n            if (message.runPostinstall != null && message.hasOwnProperty(\"runPostinstall\"))\n                object.runPostinstall = message.runPostinstall;\n            if (message.postinstallPath != null && message.hasOwnProperty(\"postinstallPath\"))\n                object.postinstallPath = message.postinstallPath;\n            if (message.filesystemType != null && message.hasOwnProperty(\"filesystemType\"))\n                object.filesystemType = message.filesystemType;\n            if (message.newPartitionSignature && message.newPartitionSignature.length) {\n                object.newPartitionSignature = [];\n                for (let j = 0; j < message.newPartitionSignature.length; ++j)\n                    object.newPartitionSignature[j] = $root.chromeos_update_engine.Signatures.Signature.toObject(message.newPartitionSignature[j], options);\n            }\n            if (message.oldPartitionInfo != null && message.hasOwnProperty(\"oldPartitionInfo\"))\n                object.oldPartitionInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.oldPartitionInfo, options);\n            if (message.newPartitionInfo != null && message.hasOwnProperty(\"newPartitionInfo\"))\n                object.newPartitionInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.newPartitionInfo, options);\n            if (message.operations && message.operations.length) {\n                object.operations = [];\n                for (let j = 0; j < message.operations.length; ++j)\n                    object.operations[j] = $root.chromeos_update_engine.InstallOperation.toObject(message.operations[j], options);\n            }\n            if (message.postinstallOptional != null && message.hasOwnProperty(\"postinstallOptional\"))\n                object.postinstallOptional = message.postinstallOptional;\n            if (message.hashTreeDataExtent != null && message.hasOwnProperty(\"hashTreeDataExtent\"))\n                object.hashTreeDataExtent = $root.chromeos_update_engine.Extent.toObject(message.hashTreeDataExtent, options);\n            if (message.hashTreeExtent != null && message.hasOwnProperty(\"hashTreeExtent\"))\n                object.hashTreeExtent = $root.chromeos_update_engine.Extent.toObject(message.hashTreeExtent, options);\n            if (message.hashTreeAlgorithm != null && message.hasOwnProperty(\"hashTreeAlgorithm\"))\n                object.hashTreeAlgorithm = message.hashTreeAlgorithm;\n            if (message.hashTreeSalt != null && message.hasOwnProperty(\"hashTreeSalt\"))\n                object.hashTreeSalt = options.bytes === String ? $util.base64.encode(message.hashTreeSalt, 0, message.hashTreeSalt.length) : options.bytes === Array ? Array.prototype.slice.call(message.hashTreeSalt) : message.hashTreeSalt;\n            if (message.fecDataExtent != null && message.hasOwnProperty(\"fecDataExtent\"))\n                object.fecDataExtent = $root.chromeos_update_engine.Extent.toObject(message.fecDataExtent, options);\n            if (message.fecExtent != null && message.hasOwnProperty(\"fecExtent\"))\n                object.fecExtent = $root.chromeos_update_engine.Extent.toObject(message.fecExtent, options);\n            if (message.fecRoots != null && message.hasOwnProperty(\"fecRoots\"))\n                object.fecRoots = message.fecRoots;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                object.version = message.version;\n            if (message.mergeOperations && message.mergeOperations.length) {\n                object.mergeOperations = [];\n                for (let j = 0; j < message.mergeOperations.length; ++j)\n                    object.mergeOperations[j] = $root.chromeos_update_engine.CowMergeOperation.toObject(message.mergeOperations[j], options);\n            }\n            if (message.estimateCowSize != null && message.hasOwnProperty(\"estimateCowSize\"))\n                if (typeof message.estimateCowSize === \"number\")\n                    object.estimateCowSize = options.longs === String ? String(message.estimateCowSize) : message.estimateCowSize;\n                else\n                    object.estimateCowSize = options.longs === String ? $util.Long.prototype.toString.call(message.estimateCowSize) : options.longs === Number ? new $util.LongBits(message.estimateCowSize.low >>> 0, message.estimateCowSize.high >>> 0).toNumber(true) : message.estimateCowSize;\n            return object;\n        };\n\n        /**\n         * Converts this PartitionUpdate to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PartitionUpdate.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return PartitionUpdate;\n    })();\n\n    chromeos_update_engine.DynamicPartitionGroup = (function() {\n\n        /**\n         * Properties of a DynamicPartitionGroup.\n         * @memberof chromeos_update_engine\n         * @interface IDynamicPartitionGroup\n         * @property {string} name DynamicPartitionGroup name\n         * @property {number|Long|null} [size] DynamicPartitionGroup size\n         * @property {Array.<string>|null} [partitionNames] DynamicPartitionGroup partitionNames\n         */\n\n        /**\n         * Constructs a new DynamicPartitionGroup.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a DynamicPartitionGroup.\n         * @implements IDynamicPartitionGroup\n         * @constructor\n         * @param {chromeos_update_engine.IDynamicPartitionGroup=} [properties] Properties to set\n         */\n        function DynamicPartitionGroup(properties) {\n            this.partitionNames = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DynamicPartitionGroup name.\n         * @member {string} name\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @instance\n         */\n        DynamicPartitionGroup.prototype.name = \"\";\n\n        /**\n         * DynamicPartitionGroup size.\n         * @member {number|Long} size\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @instance\n         */\n        DynamicPartitionGroup.prototype.size = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * DynamicPartitionGroup partitionNames.\n         * @member {Array.<string>} partitionNames\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @instance\n         */\n        DynamicPartitionGroup.prototype.partitionNames = $util.emptyArray;\n\n        /**\n         * Creates a new DynamicPartitionGroup instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionGroup=} [properties] Properties to set\n         * @returns {chromeos_update_engine.DynamicPartitionGroup} DynamicPartitionGroup instance\n         */\n        DynamicPartitionGroup.create = function create(properties) {\n            return new DynamicPartitionGroup(properties);\n        };\n\n        /**\n         * Encodes the specified DynamicPartitionGroup message. Does not implicitly {@link chromeos_update_engine.DynamicPartitionGroup.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionGroup} message DynamicPartitionGroup message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DynamicPartitionGroup.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.size != null && Object.hasOwnProperty.call(message, \"size\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.size);\n            if (message.partitionNames != null && message.partitionNames.length)\n                for (let i = 0; i < message.partitionNames.length; ++i)\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.partitionNames[i]);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified DynamicPartitionGroup message, length delimited. Does not implicitly {@link chromeos_update_engine.DynamicPartitionGroup.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionGroup} message DynamicPartitionGroup message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DynamicPartitionGroup.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DynamicPartitionGroup message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.DynamicPartitionGroup} DynamicPartitionGroup\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DynamicPartitionGroup.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.DynamicPartitionGroup();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.size = reader.uint64();\n                    break;\n                case 3:\n                    if (!(message.partitionNames && message.partitionNames.length))\n                        message.partitionNames = [];\n                    message.partitionNames.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            if (!message.hasOwnProperty(\"name\"))\n                throw $util.ProtocolError(\"missing required 'name'\", { instance: message });\n            return message;\n        };\n\n        /**\n         * Decodes a DynamicPartitionGroup message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.DynamicPartitionGroup} DynamicPartitionGroup\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DynamicPartitionGroup.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DynamicPartitionGroup message.\n         * @function verify\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DynamicPartitionGroup.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))\n                    return \"size: integer|Long expected\";\n            if (message.partitionNames != null && message.hasOwnProperty(\"partitionNames\")) {\n                if (!Array.isArray(message.partitionNames))\n                    return \"partitionNames: array expected\";\n                for (let i = 0; i < message.partitionNames.length; ++i)\n                    if (!$util.isString(message.partitionNames[i]))\n                        return \"partitionNames: string[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a DynamicPartitionGroup message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.DynamicPartitionGroup} DynamicPartitionGroup\n         */\n        DynamicPartitionGroup.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.DynamicPartitionGroup)\n                return object;\n            let message = new $root.chromeos_update_engine.DynamicPartitionGroup();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.size != null)\n                if ($util.Long)\n                    (message.size = $util.Long.fromValue(object.size)).unsigned = true;\n                else if (typeof object.size === \"string\")\n                    message.size = parseInt(object.size, 10);\n                else if (typeof object.size === \"number\")\n                    message.size = object.size;\n                else if (typeof object.size === \"object\")\n                    message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber(true);\n            if (object.partitionNames) {\n                if (!Array.isArray(object.partitionNames))\n                    throw TypeError(\".chromeos_update_engine.DynamicPartitionGroup.partitionNames: array expected\");\n                message.partitionNames = [];\n                for (let i = 0; i < object.partitionNames.length; ++i)\n                    message.partitionNames[i] = String(object.partitionNames[i]);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a DynamicPartitionGroup message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {chromeos_update_engine.DynamicPartitionGroup} message DynamicPartitionGroup\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DynamicPartitionGroup.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.partitionNames = [];\n            if (options.defaults) {\n                object.name = \"\";\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.size = options.longs === String ? \"0\" : 0;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (typeof message.size === \"number\")\n                    object.size = options.longs === String ? String(message.size) : message.size;\n                else\n                    object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber(true) : message.size;\n            if (message.partitionNames && message.partitionNames.length) {\n                object.partitionNames = [];\n                for (let j = 0; j < message.partitionNames.length; ++j)\n                    object.partitionNames[j] = message.partitionNames[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this DynamicPartitionGroup to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DynamicPartitionGroup.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DynamicPartitionGroup;\n    })();\n\n    chromeos_update_engine.DynamicPartitionMetadata = (function() {\n\n        /**\n         * Properties of a DynamicPartitionMetadata.\n         * @memberof chromeos_update_engine\n         * @interface IDynamicPartitionMetadata\n         * @property {Array.<chromeos_update_engine.IDynamicPartitionGroup>|null} [groups] DynamicPartitionMetadata groups\n         * @property {boolean|null} [snapshotEnabled] DynamicPartitionMetadata snapshotEnabled\n         * @property {boolean|null} [vabcEnabled] DynamicPartitionMetadata vabcEnabled\n         * @property {string|null} [vabcCompressionParam] DynamicPartitionMetadata vabcCompressionParam\n         * @property {number|null} [cowVersion] DynamicPartitionMetadata cowVersion\n         */\n\n        /**\n         * Constructs a new DynamicPartitionMetadata.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a DynamicPartitionMetadata.\n         * @implements IDynamicPartitionMetadata\n         * @constructor\n         * @param {chromeos_update_engine.IDynamicPartitionMetadata=} [properties] Properties to set\n         */\n        function DynamicPartitionMetadata(properties) {\n            this.groups = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DynamicPartitionMetadata groups.\n         * @member {Array.<chromeos_update_engine.IDynamicPartitionGroup>} groups\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.groups = $util.emptyArray;\n\n        /**\n         * DynamicPartitionMetadata snapshotEnabled.\n         * @member {boolean} snapshotEnabled\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.snapshotEnabled = false;\n\n        /**\n         * DynamicPartitionMetadata vabcEnabled.\n         * @member {boolean} vabcEnabled\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.vabcEnabled = false;\n\n        /**\n         * DynamicPartitionMetadata vabcCompressionParam.\n         * @member {string} vabcCompressionParam\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.vabcCompressionParam = \"\";\n\n        /**\n         * DynamicPartitionMetadata cowVersion.\n         * @member {number} cowVersion\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.cowVersion = 0;\n\n        /**\n         * Creates a new DynamicPartitionMetadata instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionMetadata=} [properties] Properties to set\n         * @returns {chromeos_update_engine.DynamicPartitionMetadata} DynamicPartitionMetadata instance\n         */\n        DynamicPartitionMetadata.create = function create(properties) {\n            return new DynamicPartitionMetadata(properties);\n        };\n\n        /**\n         * Encodes the specified DynamicPartitionMetadata message. Does not implicitly {@link chromeos_update_engine.DynamicPartitionMetadata.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionMetadata} message DynamicPartitionMetadata message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DynamicPartitionMetadata.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.groups != null && message.groups.length)\n                for (let i = 0; i < message.groups.length; ++i)\n                    $root.chromeos_update_engine.DynamicPartitionGroup.encode(message.groups[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.snapshotEnabled != null && Object.hasOwnProperty.call(message, \"snapshotEnabled\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.snapshotEnabled);\n            if (message.vabcEnabled != null && Object.hasOwnProperty.call(message, \"vabcEnabled\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.vabcEnabled);\n            if (message.vabcCompressionParam != null && Object.hasOwnProperty.call(message, \"vabcCompressionParam\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.vabcCompressionParam);\n            if (message.cowVersion != null && Object.hasOwnProperty.call(message, \"cowVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.cowVersion);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified DynamicPartitionMetadata message, length delimited. Does not implicitly {@link chromeos_update_engine.DynamicPartitionMetadata.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionMetadata} message DynamicPartitionMetadata message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DynamicPartitionMetadata.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DynamicPartitionMetadata message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.DynamicPartitionMetadata} DynamicPartitionMetadata\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DynamicPartitionMetadata.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.DynamicPartitionMetadata();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.groups && message.groups.length))\n                        message.groups = [];\n                    message.groups.push($root.chromeos_update_engine.DynamicPartitionGroup.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.snapshotEnabled = reader.bool();\n                    break;\n                case 3:\n                    message.vabcEnabled = reader.bool();\n                    break;\n                case 4:\n                    message.vabcCompressionParam = reader.string();\n                    break;\n                case 5:\n                    message.cowVersion = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a DynamicPartitionMetadata message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.DynamicPartitionMetadata} DynamicPartitionMetadata\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DynamicPartitionMetadata.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DynamicPartitionMetadata message.\n         * @function verify\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DynamicPartitionMetadata.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.groups != null && message.hasOwnProperty(\"groups\")) {\n                if (!Array.isArray(message.groups))\n                    return \"groups: array expected\";\n                for (let i = 0; i < message.groups.length; ++i) {\n                    let error = $root.chromeos_update_engine.DynamicPartitionGroup.verify(message.groups[i]);\n                    if (error)\n                        return \"groups.\" + error;\n                }\n            }\n            if (message.snapshotEnabled != null && message.hasOwnProperty(\"snapshotEnabled\"))\n                if (typeof message.snapshotEnabled !== \"boolean\")\n                    return \"snapshotEnabled: boolean expected\";\n            if (message.vabcEnabled != null && message.hasOwnProperty(\"vabcEnabled\"))\n                if (typeof message.vabcEnabled !== \"boolean\")\n                    return \"vabcEnabled: boolean expected\";\n            if (message.vabcCompressionParam != null && message.hasOwnProperty(\"vabcCompressionParam\"))\n                if (!$util.isString(message.vabcCompressionParam))\n                    return \"vabcCompressionParam: string expected\";\n            if (message.cowVersion != null && message.hasOwnProperty(\"cowVersion\"))\n                if (!$util.isInteger(message.cowVersion))\n                    return \"cowVersion: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a DynamicPartitionMetadata message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.DynamicPartitionMetadata} DynamicPartitionMetadata\n         */\n        DynamicPartitionMetadata.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.DynamicPartitionMetadata)\n                return object;\n            let message = new $root.chromeos_update_engine.DynamicPartitionMetadata();\n            if (object.groups) {\n                if (!Array.isArray(object.groups))\n                    throw TypeError(\".chromeos_update_engine.DynamicPartitionMetadata.groups: array expected\");\n                message.groups = [];\n                for (let i = 0; i < object.groups.length; ++i) {\n                    if (typeof object.groups[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.DynamicPartitionMetadata.groups: object expected\");\n                    message.groups[i] = $root.chromeos_update_engine.DynamicPartitionGroup.fromObject(object.groups[i]);\n                }\n            }\n            if (object.snapshotEnabled != null)\n                message.snapshotEnabled = Boolean(object.snapshotEnabled);\n            if (object.vabcEnabled != null)\n                message.vabcEnabled = Boolean(object.vabcEnabled);\n            if (object.vabcCompressionParam != null)\n                message.vabcCompressionParam = String(object.vabcCompressionParam);\n            if (object.cowVersion != null)\n                message.cowVersion = object.cowVersion >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a DynamicPartitionMetadata message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {chromeos_update_engine.DynamicPartitionMetadata} message DynamicPartitionMetadata\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DynamicPartitionMetadata.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.groups = [];\n            if (options.defaults) {\n                object.snapshotEnabled = false;\n                object.vabcEnabled = false;\n                object.vabcCompressionParam = \"\";\n                object.cowVersion = 0;\n            }\n            if (message.groups && message.groups.length) {\n                object.groups = [];\n                for (let j = 0; j < message.groups.length; ++j)\n                    object.groups[j] = $root.chromeos_update_engine.DynamicPartitionGroup.toObject(message.groups[j], options);\n            }\n            if (message.snapshotEnabled != null && message.hasOwnProperty(\"snapshotEnabled\"))\n                object.snapshotEnabled = message.snapshotEnabled;\n            if (message.vabcEnabled != null && message.hasOwnProperty(\"vabcEnabled\"))\n                object.vabcEnabled = message.vabcEnabled;\n            if (message.vabcCompressionParam != null && message.hasOwnProperty(\"vabcCompressionParam\"))\n                object.vabcCompressionParam = message.vabcCompressionParam;\n            if (message.cowVersion != null && message.hasOwnProperty(\"cowVersion\"))\n                object.cowVersion = message.cowVersion;\n            return object;\n        };\n\n        /**\n         * Converts this DynamicPartitionMetadata to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DynamicPartitionMetadata.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DynamicPartitionMetadata;\n    })();\n\n    chromeos_update_engine.ApexInfo = (function() {\n\n        /**\n         * Properties of an ApexInfo.\n         * @memberof chromeos_update_engine\n         * @interface IApexInfo\n         * @property {string|null} [packageName] ApexInfo packageName\n         * @property {number|Long|null} [version] ApexInfo version\n         * @property {boolean|null} [isCompressed] ApexInfo isCompressed\n         * @property {number|Long|null} [decompressedSize] ApexInfo decompressedSize\n         */\n\n        /**\n         * Constructs a new ApexInfo.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents an ApexInfo.\n         * @implements IApexInfo\n         * @constructor\n         * @param {chromeos_update_engine.IApexInfo=} [properties] Properties to set\n         */\n        function ApexInfo(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ApexInfo packageName.\n         * @member {string} packageName\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         */\n        ApexInfo.prototype.packageName = \"\";\n\n        /**\n         * ApexInfo version.\n         * @member {number|Long} version\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         */\n        ApexInfo.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ApexInfo isCompressed.\n         * @member {boolean} isCompressed\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         */\n        ApexInfo.prototype.isCompressed = false;\n\n        /**\n         * ApexInfo decompressedSize.\n         * @member {number|Long} decompressedSize\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         */\n        ApexInfo.prototype.decompressedSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new ApexInfo instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {chromeos_update_engine.IApexInfo=} [properties] Properties to set\n         * @returns {chromeos_update_engine.ApexInfo} ApexInfo instance\n         */\n        ApexInfo.create = function create(properties) {\n            return new ApexInfo(properties);\n        };\n\n        /**\n         * Encodes the specified ApexInfo message. Does not implicitly {@link chromeos_update_engine.ApexInfo.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {chromeos_update_engine.IApexInfo} message ApexInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApexInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.packageName != null && Object.hasOwnProperty.call(message, \"packageName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.packageName);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            if (message.isCompressed != null && Object.hasOwnProperty.call(message, \"isCompressed\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isCompressed);\n            if (message.decompressedSize != null && Object.hasOwnProperty.call(message, \"decompressedSize\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.decompressedSize);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ApexInfo message, length delimited. Does not implicitly {@link chromeos_update_engine.ApexInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {chromeos_update_engine.IApexInfo} message ApexInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApexInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ApexInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.ApexInfo} ApexInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApexInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.ApexInfo();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.packageName = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                case 3:\n                    message.isCompressed = reader.bool();\n                    break;\n                case 4:\n                    message.decompressedSize = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an ApexInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.ApexInfo} ApexInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApexInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ApexInfo message.\n         * @function verify\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ApexInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.packageName != null && message.hasOwnProperty(\"packageName\"))\n                if (!$util.isString(message.packageName))\n                    return \"packageName: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            if (message.isCompressed != null && message.hasOwnProperty(\"isCompressed\"))\n                if (typeof message.isCompressed !== \"boolean\")\n                    return \"isCompressed: boolean expected\";\n            if (message.decompressedSize != null && message.hasOwnProperty(\"decompressedSize\"))\n                if (!$util.isInteger(message.decompressedSize) && !(message.decompressedSize && $util.isInteger(message.decompressedSize.low) && $util.isInteger(message.decompressedSize.high)))\n                    return \"decompressedSize: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an ApexInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.ApexInfo} ApexInfo\n         */\n        ApexInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.ApexInfo)\n                return object;\n            let message = new $root.chromeos_update_engine.ApexInfo();\n            if (object.packageName != null)\n                message.packageName = String(object.packageName);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            if (object.isCompressed != null)\n                message.isCompressed = Boolean(object.isCompressed);\n            if (object.decompressedSize != null)\n                if ($util.Long)\n                    (message.decompressedSize = $util.Long.fromValue(object.decompressedSize)).unsigned = false;\n                else if (typeof object.decompressedSize === \"string\")\n                    message.decompressedSize = parseInt(object.decompressedSize, 10);\n                else if (typeof object.decompressedSize === \"number\")\n                    message.decompressedSize = object.decompressedSize;\n                else if (typeof object.decompressedSize === \"object\")\n                    message.decompressedSize = new $util.LongBits(object.decompressedSize.low >>> 0, object.decompressedSize.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ApexInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {chromeos_update_engine.ApexInfo} message ApexInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ApexInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.packageName = \"\";\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n                object.isCompressed = false;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.decompressedSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.decompressedSize = options.longs === String ? \"0\" : 0;\n            }\n            if (message.packageName != null && message.hasOwnProperty(\"packageName\"))\n                object.packageName = message.packageName;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            if (message.isCompressed != null && message.hasOwnProperty(\"isCompressed\"))\n                object.isCompressed = message.isCompressed;\n            if (message.decompressedSize != null && message.hasOwnProperty(\"decompressedSize\"))\n                if (typeof message.decompressedSize === \"number\")\n                    object.decompressedSize = options.longs === String ? String(message.decompressedSize) : message.decompressedSize;\n                else\n                    object.decompressedSize = options.longs === String ? $util.Long.prototype.toString.call(message.decompressedSize) : options.longs === Number ? new $util.LongBits(message.decompressedSize.low >>> 0, message.decompressedSize.high >>> 0).toNumber() : message.decompressedSize;\n            return object;\n        };\n\n        /**\n         * Converts this ApexInfo to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ApexInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ApexInfo;\n    })();\n\n    chromeos_update_engine.ApexMetadata = (function() {\n\n        /**\n         * Properties of an ApexMetadata.\n         * @memberof chromeos_update_engine\n         * @interface IApexMetadata\n         * @property {Array.<chromeos_update_engine.IApexInfo>|null} [apexInfo] ApexMetadata apexInfo\n         */\n\n        /**\n         * Constructs a new ApexMetadata.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents an ApexMetadata.\n         * @implements IApexMetadata\n         * @constructor\n         * @param {chromeos_update_engine.IApexMetadata=} [properties] Properties to set\n         */\n        function ApexMetadata(properties) {\n            this.apexInfo = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ApexMetadata apexInfo.\n         * @member {Array.<chromeos_update_engine.IApexInfo>} apexInfo\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @instance\n         */\n        ApexMetadata.prototype.apexInfo = $util.emptyArray;\n\n        /**\n         * Creates a new ApexMetadata instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {chromeos_update_engine.IApexMetadata=} [properties] Properties to set\n         * @returns {chromeos_update_engine.ApexMetadata} ApexMetadata instance\n         */\n        ApexMetadata.create = function create(properties) {\n            return new ApexMetadata(properties);\n        };\n\n        /**\n         * Encodes the specified ApexMetadata message. Does not implicitly {@link chromeos_update_engine.ApexMetadata.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {chromeos_update_engine.IApexMetadata} message ApexMetadata message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApexMetadata.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.apexInfo != null && message.apexInfo.length)\n                for (let i = 0; i < message.apexInfo.length; ++i)\n                    $root.chromeos_update_engine.ApexInfo.encode(message.apexInfo[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ApexMetadata message, length delimited. Does not implicitly {@link chromeos_update_engine.ApexMetadata.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {chromeos_update_engine.IApexMetadata} message ApexMetadata message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApexMetadata.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ApexMetadata message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.ApexMetadata} ApexMetadata\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApexMetadata.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.ApexMetadata();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.apexInfo && message.apexInfo.length))\n                        message.apexInfo = [];\n                    message.apexInfo.push($root.chromeos_update_engine.ApexInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an ApexMetadata message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.ApexMetadata} ApexMetadata\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApexMetadata.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ApexMetadata message.\n         * @function verify\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ApexMetadata.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.apexInfo != null && message.hasOwnProperty(\"apexInfo\")) {\n                if (!Array.isArray(message.apexInfo))\n                    return \"apexInfo: array expected\";\n                for (let i = 0; i < message.apexInfo.length; ++i) {\n                    let error = $root.chromeos_update_engine.ApexInfo.verify(message.apexInfo[i]);\n                    if (error)\n                        return \"apexInfo.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an ApexMetadata message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.ApexMetadata} ApexMetadata\n         */\n        ApexMetadata.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.ApexMetadata)\n                return object;\n            let message = new $root.chromeos_update_engine.ApexMetadata();\n            if (object.apexInfo) {\n                if (!Array.isArray(object.apexInfo))\n                    throw TypeError(\".chromeos_update_engine.ApexMetadata.apexInfo: array expected\");\n                message.apexInfo = [];\n                for (let i = 0; i < object.apexInfo.length; ++i) {\n                    if (typeof object.apexInfo[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.ApexMetadata.apexInfo: object expected\");\n                    message.apexInfo[i] = $root.chromeos_update_engine.ApexInfo.fromObject(object.apexInfo[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ApexMetadata message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {chromeos_update_engine.ApexMetadata} message ApexMetadata\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ApexMetadata.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.apexInfo = [];\n            if (message.apexInfo && message.apexInfo.length) {\n                object.apexInfo = [];\n                for (let j = 0; j < message.apexInfo.length; ++j)\n                    object.apexInfo[j] = $root.chromeos_update_engine.ApexInfo.toObject(message.apexInfo[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ApexMetadata to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ApexMetadata.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ApexMetadata;\n    })();\n\n    chromeos_update_engine.DeltaArchiveManifest = (function() {\n\n        /**\n         * Properties of a DeltaArchiveManifest.\n         * @memberof chromeos_update_engine\n         * @interface IDeltaArchiveManifest\n         * @property {number|null} [blockSize] DeltaArchiveManifest blockSize\n         * @property {number|Long|null} [signaturesOffset] DeltaArchiveManifest signaturesOffset\n         * @property {number|Long|null} [signaturesSize] DeltaArchiveManifest signaturesSize\n         * @property {number|null} [minorVersion] DeltaArchiveManifest minorVersion\n         * @property {Array.<chromeos_update_engine.IPartitionUpdate>|null} [partitions] DeltaArchiveManifest partitions\n         * @property {number|Long|null} [maxTimestamp] DeltaArchiveManifest maxTimestamp\n         * @property {chromeos_update_engine.IDynamicPartitionMetadata|null} [dynamicPartitionMetadata] DeltaArchiveManifest dynamicPartitionMetadata\n         * @property {boolean|null} [partialUpdate] DeltaArchiveManifest partialUpdate\n         * @property {Array.<chromeos_update_engine.IApexInfo>|null} [apexInfo] DeltaArchiveManifest apexInfo\n         * @property {string|null} [securityPatchLevel] DeltaArchiveManifest securityPatchLevel\n         */\n\n        /**\n         * Constructs a new DeltaArchiveManifest.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a DeltaArchiveManifest.\n         * @implements IDeltaArchiveManifest\n         * @constructor\n         * @param {chromeos_update_engine.IDeltaArchiveManifest=} [properties] Properties to set\n         */\n        function DeltaArchiveManifest(properties) {\n            this.partitions = [];\n            this.apexInfo = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DeltaArchiveManifest blockSize.\n         * @member {number} blockSize\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.blockSize = 4096;\n\n        /**\n         * DeltaArchiveManifest signaturesOffset.\n         * @member {number|Long} signaturesOffset\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.signaturesOffset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * DeltaArchiveManifest signaturesSize.\n         * @member {number|Long} signaturesSize\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.signaturesSize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * DeltaArchiveManifest minorVersion.\n         * @member {number} minorVersion\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.minorVersion = 0;\n\n        /**\n         * DeltaArchiveManifest partitions.\n         * @member {Array.<chromeos_update_engine.IPartitionUpdate>} partitions\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.partitions = $util.emptyArray;\n\n        /**\n         * DeltaArchiveManifest maxTimestamp.\n         * @member {number|Long} maxTimestamp\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.maxTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * DeltaArchiveManifest dynamicPartitionMetadata.\n         * @member {chromeos_update_engine.IDynamicPartitionMetadata|null|undefined} dynamicPartitionMetadata\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.dynamicPartitionMetadata = null;\n\n        /**\n         * DeltaArchiveManifest partialUpdate.\n         * @member {boolean} partialUpdate\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.partialUpdate = false;\n\n        /**\n         * DeltaArchiveManifest apexInfo.\n         * @member {Array.<chromeos_update_engine.IApexInfo>} apexInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.apexInfo = $util.emptyArray;\n\n        /**\n         * DeltaArchiveManifest securityPatchLevel.\n         * @member {string} securityPatchLevel\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.securityPatchLevel = \"\";\n\n        /**\n         * Creates a new DeltaArchiveManifest instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {chromeos_update_engine.IDeltaArchiveManifest=} [properties] Properties to set\n         * @returns {chromeos_update_engine.DeltaArchiveManifest} DeltaArchiveManifest instance\n         */\n        DeltaArchiveManifest.create = function create(properties) {\n            return new DeltaArchiveManifest(properties);\n        };\n\n        /**\n         * Encodes the specified DeltaArchiveManifest message. Does not implicitly {@link chromeos_update_engine.DeltaArchiveManifest.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {chromeos_update_engine.IDeltaArchiveManifest} message DeltaArchiveManifest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DeltaArchiveManifest.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.blockSize != null && Object.hasOwnProperty.call(message, \"blockSize\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.blockSize);\n            if (message.signaturesOffset != null && Object.hasOwnProperty.call(message, \"signaturesOffset\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.signaturesOffset);\n            if (message.signaturesSize != null && Object.hasOwnProperty.call(message, \"signaturesSize\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.signaturesSize);\n            if (message.minorVersion != null && Object.hasOwnProperty.call(message, \"minorVersion\"))\n                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.minorVersion);\n            if (message.partitions != null && message.partitions.length)\n                for (let i = 0; i < message.partitions.length; ++i)\n                    $root.chromeos_update_engine.PartitionUpdate.encode(message.partitions[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.maxTimestamp != null && Object.hasOwnProperty.call(message, \"maxTimestamp\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int64(message.maxTimestamp);\n            if (message.dynamicPartitionMetadata != null && Object.hasOwnProperty.call(message, \"dynamicPartitionMetadata\"))\n                $root.chromeos_update_engine.DynamicPartitionMetadata.encode(message.dynamicPartitionMetadata, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.partialUpdate != null && Object.hasOwnProperty.call(message, \"partialUpdate\"))\n                writer.uint32(/* id 16, wireType 0 =*/128).bool(message.partialUpdate);\n            if (message.apexInfo != null && message.apexInfo.length)\n                for (let i = 0; i < message.apexInfo.length; ++i)\n                    $root.chromeos_update_engine.ApexInfo.encode(message.apexInfo[i], writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();\n            if (message.securityPatchLevel != null && Object.hasOwnProperty.call(message, \"securityPatchLevel\"))\n                writer.uint32(/* id 18, wireType 2 =*/146).string(message.securityPatchLevel);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified DeltaArchiveManifest message, length delimited. Does not implicitly {@link chromeos_update_engine.DeltaArchiveManifest.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {chromeos_update_engine.IDeltaArchiveManifest} message DeltaArchiveManifest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DeltaArchiveManifest.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DeltaArchiveManifest message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.DeltaArchiveManifest} DeltaArchiveManifest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DeltaArchiveManifest.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.DeltaArchiveManifest();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 3:\n                    message.blockSize = reader.uint32();\n                    break;\n                case 4:\n                    message.signaturesOffset = reader.uint64();\n                    break;\n                case 5:\n                    message.signaturesSize = reader.uint64();\n                    break;\n                case 12:\n                    message.minorVersion = reader.uint32();\n                    break;\n                case 13:\n                    if (!(message.partitions && message.partitions.length))\n                        message.partitions = [];\n                    message.partitions.push($root.chromeos_update_engine.PartitionUpdate.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.maxTimestamp = reader.int64();\n                    break;\n                case 15:\n                    message.dynamicPartitionMetadata = $root.chromeos_update_engine.DynamicPartitionMetadata.decode(reader, reader.uint32());\n                    break;\n                case 16:\n                    message.partialUpdate = reader.bool();\n                    break;\n                case 17:\n                    if (!(message.apexInfo && message.apexInfo.length))\n                        message.apexInfo = [];\n                    message.apexInfo.push($root.chromeos_update_engine.ApexInfo.decode(reader, reader.uint32()));\n                    break;\n                case 18:\n                    message.securityPatchLevel = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a DeltaArchiveManifest message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.DeltaArchiveManifest} DeltaArchiveManifest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DeltaArchiveManifest.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DeltaArchiveManifest message.\n         * @function verify\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DeltaArchiveManifest.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.blockSize != null && message.hasOwnProperty(\"blockSize\"))\n                if (!$util.isInteger(message.blockSize))\n                    return \"blockSize: integer expected\";\n            if (message.signaturesOffset != null && message.hasOwnProperty(\"signaturesOffset\"))\n                if (!$util.isInteger(message.signaturesOffset) && !(message.signaturesOffset && $util.isInteger(message.signaturesOffset.low) && $util.isInteger(message.signaturesOffset.high)))\n                    return \"signaturesOffset: integer|Long expected\";\n            if (message.signaturesSize != null && message.hasOwnProperty(\"signaturesSize\"))\n                if (!$util.isInteger(message.signaturesSize) && !(message.signaturesSize && $util.isInteger(message.signaturesSize.low) && $util.isInteger(message.signaturesSize.high)))\n                    return \"signaturesSize: integer|Long expected\";\n            if (message.minorVersion != null && message.hasOwnProperty(\"minorVersion\"))\n                if (!$util.isInteger(message.minorVersion))\n                    return \"minorVersion: integer expected\";\n            if (message.partitions != null && message.hasOwnProperty(\"partitions\")) {\n                if (!Array.isArray(message.partitions))\n                    return \"partitions: array expected\";\n                for (let i = 0; i < message.partitions.length; ++i) {\n                    let error = $root.chromeos_update_engine.PartitionUpdate.verify(message.partitions[i]);\n                    if (error)\n                        return \"partitions.\" + error;\n                }\n            }\n            if (message.maxTimestamp != null && message.hasOwnProperty(\"maxTimestamp\"))\n                if (!$util.isInteger(message.maxTimestamp) && !(message.maxTimestamp && $util.isInteger(message.maxTimestamp.low) && $util.isInteger(message.maxTimestamp.high)))\n                    return \"maxTimestamp: integer|Long expected\";\n            if (message.dynamicPartitionMetadata != null && message.hasOwnProperty(\"dynamicPartitionMetadata\")) {\n                let error = $root.chromeos_update_engine.DynamicPartitionMetadata.verify(message.dynamicPartitionMetadata);\n                if (error)\n                    return \"dynamicPartitionMetadata.\" + error;\n            }\n            if (message.partialUpdate != null && message.hasOwnProperty(\"partialUpdate\"))\n                if (typeof message.partialUpdate !== \"boolean\")\n                    return \"partialUpdate: boolean expected\";\n            if (message.apexInfo != null && message.hasOwnProperty(\"apexInfo\")) {\n                if (!Array.isArray(message.apexInfo))\n                    return \"apexInfo: array expected\";\n                for (let i = 0; i < message.apexInfo.length; ++i) {\n                    let error = $root.chromeos_update_engine.ApexInfo.verify(message.apexInfo[i]);\n                    if (error)\n                        return \"apexInfo.\" + error;\n                }\n            }\n            if (message.securityPatchLevel != null && message.hasOwnProperty(\"securityPatchLevel\"))\n                if (!$util.isString(message.securityPatchLevel))\n                    return \"securityPatchLevel: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a DeltaArchiveManifest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.DeltaArchiveManifest} DeltaArchiveManifest\n         */\n        DeltaArchiveManifest.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.DeltaArchiveManifest)\n                return object;\n            let message = new $root.chromeos_update_engine.DeltaArchiveManifest();\n            if (object.blockSize != null)\n                message.blockSize = object.blockSize >>> 0;\n            if (object.signaturesOffset != null)\n                if ($util.Long)\n                    (message.signaturesOffset = $util.Long.fromValue(object.signaturesOffset)).unsigned = true;\n                else if (typeof object.signaturesOffset === \"string\")\n                    message.signaturesOffset = parseInt(object.signaturesOffset, 10);\n                else if (typeof object.signaturesOffset === \"number\")\n                    message.signaturesOffset = object.signaturesOffset;\n                else if (typeof object.signaturesOffset === \"object\")\n                    message.signaturesOffset = new $util.LongBits(object.signaturesOffset.low >>> 0, object.signaturesOffset.high >>> 0).toNumber(true);\n            if (object.signaturesSize != null)\n                if ($util.Long)\n                    (message.signaturesSize = $util.Long.fromValue(object.signaturesSize)).unsigned = true;\n                else if (typeof object.signaturesSize === \"string\")\n                    message.signaturesSize = parseInt(object.signaturesSize, 10);\n                else if (typeof object.signaturesSize === \"number\")\n                    message.signaturesSize = object.signaturesSize;\n                else if (typeof object.signaturesSize === \"object\")\n                    message.signaturesSize = new $util.LongBits(object.signaturesSize.low >>> 0, object.signaturesSize.high >>> 0).toNumber(true);\n            if (object.minorVersion != null)\n                message.minorVersion = object.minorVersion >>> 0;\n            if (object.partitions) {\n                if (!Array.isArray(object.partitions))\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.partitions: array expected\");\n                message.partitions = [];\n                for (let i = 0; i < object.partitions.length; ++i) {\n                    if (typeof object.partitions[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.partitions: object expected\");\n                    message.partitions[i] = $root.chromeos_update_engine.PartitionUpdate.fromObject(object.partitions[i]);\n                }\n            }\n            if (object.maxTimestamp != null)\n                if ($util.Long)\n                    (message.maxTimestamp = $util.Long.fromValue(object.maxTimestamp)).unsigned = false;\n                else if (typeof object.maxTimestamp === \"string\")\n                    message.maxTimestamp = parseInt(object.maxTimestamp, 10);\n                else if (typeof object.maxTimestamp === \"number\")\n                    message.maxTimestamp = object.maxTimestamp;\n                else if (typeof object.maxTimestamp === \"object\")\n                    message.maxTimestamp = new $util.LongBits(object.maxTimestamp.low >>> 0, object.maxTimestamp.high >>> 0).toNumber();\n            if (object.dynamicPartitionMetadata != null) {\n                if (typeof object.dynamicPartitionMetadata !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.dynamicPartitionMetadata: object expected\");\n                message.dynamicPartitionMetadata = $root.chromeos_update_engine.DynamicPartitionMetadata.fromObject(object.dynamicPartitionMetadata);\n            }\n            if (object.partialUpdate != null)\n                message.partialUpdate = Boolean(object.partialUpdate);\n            if (object.apexInfo) {\n                if (!Array.isArray(object.apexInfo))\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.apexInfo: array expected\");\n                message.apexInfo = [];\n                for (let i = 0; i < object.apexInfo.length; ++i) {\n                    if (typeof object.apexInfo[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.apexInfo: object expected\");\n                    message.apexInfo[i] = $root.chromeos_update_engine.ApexInfo.fromObject(object.apexInfo[i]);\n                }\n            }\n            if (object.securityPatchLevel != null)\n                message.securityPatchLevel = String(object.securityPatchLevel);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a DeltaArchiveManifest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {chromeos_update_engine.DeltaArchiveManifest} message DeltaArchiveManifest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DeltaArchiveManifest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.partitions = [];\n                object.apexInfo = [];\n            }\n            if (options.defaults) {\n                object.blockSize = 4096;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.signaturesOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.signaturesOffset = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.signaturesSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.signaturesSize = options.longs === String ? \"0\" : 0;\n                object.minorVersion = 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.maxTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.maxTimestamp = options.longs === String ? \"0\" : 0;\n                object.dynamicPartitionMetadata = null;\n                object.partialUpdate = false;\n                object.securityPatchLevel = \"\";\n            }\n            if (message.blockSize != null && message.hasOwnProperty(\"blockSize\"))\n                object.blockSize = message.blockSize;\n            if (message.signaturesOffset != null && message.hasOwnProperty(\"signaturesOffset\"))\n                if (typeof message.signaturesOffset === \"number\")\n                    object.signaturesOffset = options.longs === String ? String(message.signaturesOffset) : message.signaturesOffset;\n                else\n                    object.signaturesOffset = options.longs === String ? $util.Long.prototype.toString.call(message.signaturesOffset) : options.longs === Number ? new $util.LongBits(message.signaturesOffset.low >>> 0, message.signaturesOffset.high >>> 0).toNumber(true) : message.signaturesOffset;\n            if (message.signaturesSize != null && message.hasOwnProperty(\"signaturesSize\"))\n                if (typeof message.signaturesSize === \"number\")\n                    object.signaturesSize = options.longs === String ? String(message.signaturesSize) : message.signaturesSize;\n                else\n                    object.signaturesSize = options.longs === String ? $util.Long.prototype.toString.call(message.signaturesSize) : options.longs === Number ? new $util.LongBits(message.signaturesSize.low >>> 0, message.signaturesSize.high >>> 0).toNumber(true) : message.signaturesSize;\n            if (message.minorVersion != null && message.hasOwnProperty(\"minorVersion\"))\n                object.minorVersion = message.minorVersion;\n            if (message.partitions && message.partitions.length) {\n                object.partitions = [];\n                for (let j = 0; j < message.partitions.length; ++j)\n                    object.partitions[j] = $root.chromeos_update_engine.PartitionUpdate.toObject(message.partitions[j], options);\n            }\n            if (message.maxTimestamp != null && message.hasOwnProperty(\"maxTimestamp\"))\n                if (typeof message.maxTimestamp === \"number\")\n                    object.maxTimestamp = options.longs === String ? String(message.maxTimestamp) : message.maxTimestamp;\n                else\n                    object.maxTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.maxTimestamp) : options.longs === Number ? new $util.LongBits(message.maxTimestamp.low >>> 0, message.maxTimestamp.high >>> 0).toNumber() : message.maxTimestamp;\n            if (message.dynamicPartitionMetadata != null && message.hasOwnProperty(\"dynamicPartitionMetadata\"))\n                object.dynamicPartitionMetadata = $root.chromeos_update_engine.DynamicPartitionMetadata.toObject(message.dynamicPartitionMetadata, options);\n            if (message.partialUpdate != null && message.hasOwnProperty(\"partialUpdate\"))\n                object.partialUpdate = message.partialUpdate;\n            if (message.apexInfo && message.apexInfo.length) {\n                object.apexInfo = [];\n                for (let j = 0; j < message.apexInfo.length; ++j)\n                    object.apexInfo[j] = $root.chromeos_update_engine.ApexInfo.toObject(message.apexInfo[j], options);\n            }\n            if (message.securityPatchLevel != null && message.hasOwnProperty(\"securityPatchLevel\"))\n                object.securityPatchLevel = message.securityPatchLevel;\n            return object;\n        };\n\n        /**\n         * Converts this DeltaArchiveManifest to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DeltaArchiveManifest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DeltaArchiveManifest;\n    })();\n\n    return chromeos_update_engine;\n})();\n\nexport { $root as default };\n","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TextWriter, ZipReader } from '@zip.js/zip.js/dist/zip.js'\nimport { chromeos_update_engine } from './update_metadata_pb.js'\n\n/**\n * Parse the non-A/B OTA package and return it as a DeltaArchiveManifest\n * @param {ZipReader} packedFile\n */\nexport class PayloadNonAB extends chromeos_update_engine.DeltaArchiveManifest {\n  nonAB: boolean = true\n  Blocksize: number = 4096\n  packedFile: ZipReader\n  constructor(packedFile: ZipReader) {\n    super()\n    this.packedFile = packedFile\n  }\n\n  async init() {\n    this.Blocksize = 4096\n    this.partialUpdate = false\n    this.dynamicPartitionMetadata = new chromeos_update_engine.DynamicPartitionMetadata(\n      { snapshotEnabled: false, vabcEnabled: false }\n    )\n    this.partitions = []\n\n    const /** RegExp*/ regexName = /[\\w_]+(?=\\.transfer.list)/g\n    const /** Array<Entry> */ entries = await this.packedFile.getEntries()\n    for (const entry of entries) {\n      if (entry.filename.match(regexName)) {\n        const match = entry.filename.match(regexName)![0]\n        let newPartition: any = new chromeos_update_engine.PartitionUpdate({\n          partitionName: match\n        })\n        newPartition.rawText = await entry.getData!(new TextWriter())\n        await this.parseTransferList(newPartition)\n        this.partitions.push(newPartition)\n      }\n    }\n  }\n\n  async parseTransferList(partition: chromeos_update_engine.PartitionUpdate | any) {\n    let lines = (partition as any).rawText.split('\\n')\n    // First four line in header: version, total blocks,\n    // number of stashed entries, maximum used memory for stash\n    if (lines.length < 4) {\n      throw 'At least 4 lines in header should be provided.'\n    }\n    partition.version = lines[0]\n    partition.totalBlocks = parseInt(lines[1])\n    partition.entryStashed = parseInt(lines[2])\n    partition.maxStashed = parseInt(lines[3])\n    partition.newPartitionInfo = new chromeos_update_engine.PartitionInfo()\n    partition.newPartitionInfo.hash = new Uint8Array()\n    partition.newPartitionInfo.size = 'unknown'\n    /**\n     * The main body have 8 different ops:\n     * zero [rangeset] : fill zeros\n     * new [rangeset] : fill with new data from <partitionName.new.data>\n     * erase [rangeset] : mark given blocks as empty\n     * move <src_hash> <...>\n     * bsdiff <patchstart> <patchlen> <src_hash> <tgt_hash> <...>\n     * imgdiff <patchstart> <patchlen> <src_hash> <tgt_hash> <...> :\n     * Read the source blocks and apply (not for move op) to the target blocks\n     * stash <stash_id> <src_range> : load the given source range to memory\n     * free <stash_id> : free the given <stash_id>\n     * format:\n     * [rangeset]: <# of pairs>, <pair A start>, <pair A end>, ...\n     * <stash_id>: a hex number with length of 40\n     * <...>: We expect to parse the remainder of the parameter tokens as one of:\n     *   <tgt_range> <src_block_count> <src_range> (loads data from source image only)\n     *   <tgt_range> <src_block_count> - <[stash_id:stash_range] ...> (loads data from stashes only)\n     *   <tgt_range> <src_block_count> <src_range> <src_loc> <[stash_id:stash_range] ...>\n     *   (loads data from both source image and stashes)\n     */\n    partition.operations = new Array()\n    let newDataSize = await this.sizeNewData(partition.partitionName)\n    for (const line of lines.slice(4)) {\n      let op = new chromeos_update_engine.InstallOperation()\n      let elements = line.split(' ')\n      op.type = elements[0]\n      switch ((op.type as unknown) as string) {\n        case 'zero':\n          op.dstExtents = elements.slice(1).reduce(parseRange, [])\n          break\n        case 'new':\n          // unlike an A/B OTA, the payload only exists in the payload.bin,\n          // in an non-A/B OTA, the payload exists in both .new.data and .patch.data.\n          // The new ops do not have any information about data length.\n          // what we do here is: read in the size of .new.data, assume the first new\n          // op have the data length of the size of .new.data.\n          op.dataLength = newDataSize\n          newDataSize = 0\n          op.dstExtents = elements.slice(1).reduce(parseRange, [])\n          break\n        case 'erase':\n          op.dstExtents = elements.slice(1).reduce(parseRange, [])\n          break\n        case 'move':\n          op.dstExtents = parseRange([], elements[2])\n          break\n        case 'bsdiff':\n          op.dataOffset = parseInt(elements[1])\n          op.dataLength = parseInt(elements[2])\n          op.dstExtents = parseRange([], elements[5])\n          break\n        case 'imgdiff':\n          op.dataOffset = parseInt(elements[1])\n          op.dataLength = parseInt(elements[2])\n          op.dstExtents = parseRange([], elements[5])\n          break\n        case 'stash':\n          break\n        case 'free':\n          break\n      }\n      partition.operations.push(op)\n    }\n  }\n\n  /**\n   * Return the size of <partitionName>.new.data.*\n   * @param {String} partitionName\n   * @return {Number}\n   */\n  async sizeNewData(partitionName: string) {\n    const /** Array<Entry> */ entries = await this.packedFile.getEntries()\n    const /** RegExp */ regexName = new RegExp(partitionName + '.new.dat.*')\n    for (const entry of entries) {\n      if (entry.filename.match(regexName)) {\n        return entry.uncompressedSize\n      }\n    }\n  }\n}\n\n/**\n * Parse the range string and return it as an array of extents\n * @param {extents} Array<extents>\n * @param {String} rangeset\n * @return Array<extents>\n */\nfunction parseRange(extents: Object[], rangeset: string) {\n  const regexRange = new RegExp('[d,]+')\n  if (rangeset.match(regexRange)) {\n    let elements = rangeset.split(',')\n    for (let i = 1; i < elements.length; i = i + 2) {\n      let extent = new Object({\n        startBlock: parseInt(elements[i]),\n        numBlocks: parseInt(elements[i + 1]) - parseInt(elements[i])\n      })\n      extents.push(extent)\n    }\n  }\n  return extents\n}\n","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Class paypload is used to read in and\n * parse the payload.bin file from a OTA.zip file.\n * Class OpType creates a Map that can resolve the\n * operation type.\n * @package zip.js\n * @package protobufjs\n */\n\nimport {\n  BlobReader,\n  TextWriter,\n  Writer,\n  ZipReader,\n  HttpReader\n} from '@zip.js/zip.js/dist/zip.js'\n\n// import '@zip.js/zip.js'\nimport { chromeos_update_engine as update_metadata_pb } from './update_metadata_pb'\nimport { PayloadNonAB } from './payload_nonab'\nimport { ZipFile } from './trim_zip'\n// import { Zip_js } from 'zip.js'\n\nconst /** String */ _MAGIC = 'CrAU'\nconst /** Number */ _VERSION_SIZE = 8\nconst /** Number */ _MANIFEST_LEN_SIZE = 8\nconst /** Number */ _METADATA_SIGNATURE_LEN_SIZE = 4\n\nconst /** Number */ _PAYLOAD_HEADER_SIZE =\n    _MAGIC.length +\n    _VERSION_SIZE +\n    _MANIFEST_LEN_SIZE +\n    _METADATA_SIGNATURE_LEN_SIZE\n\nconst /** Number */ _BRILLO_MAJOR_PAYLOAD_VERSION = 2\nexport const /** Array<Object> */ MetadataFormat = [\n    {\n      prefix: 'pre-build',\n      key: 'preBuild',\n      name: 'Pre-build'\n    },\n    {\n      prefix: 'pre-build-incremental',\n      key: 'preBuildVersion',\n      name: 'Pre-build version'\n    },\n    {\n      prefix: 'post-build',\n      key: 'postBuild',\n      name: 'Post-build'\n    },\n    {\n      prefix: 'post-build-incremental',\n      key: 'postBuildVersion',\n      name: 'Post-build version'\n    },\n    {\n      prefix: 'post-security-patch-level',\n      key: 'postSecurityPatchLevel',\n      name: 'Post-build SPL'\n    },\n    {\n      prefix: 'post-timestamp',\n      key: 'postTimestamp',\n      name: 'Post-build timestamp'\n    },\n  ]\n\nclass StopIteration extends Error {}\n\nclass AbPayloadHeader {\n  constructor(\n    public magic: string,\n    public version: number,\n    public manifest_len: number,\n    public metadata_signature_len: number\n  ) {}\n}\n\n/**\n * Read in an integer from binary bufferArray.\n * @param {Int} size the size of a integer being read in\n * @return {Int} an integer.\n */\nasync function readIntAt(buffer: Blob, position: number, size: number) {\n  let /** DataView */ view = new DataView(\n      await buffer!.slice(position, position + size).arrayBuffer()\n    )\n  if (typeof view.getBigUint64 !== 'function') {\n    view.getBigUint64 = function(offset) {\n      const a = BigInt(view.getUint32(offset))\n      const b = BigInt(view.getUint32(offset + 4))\n      const bigNumber = a * 4294967296n + b\n      return bigNumber\n    }\n  }\n  switch (size) {\n    case 2:\n      return view.getUint16(0)\n    case 4:\n      return view.getUint32(0)\n    case 8:\n      return Number(view.getBigUint64(0))\n    default:\n      throw 'Cannot read this integer with size ' + size\n  }\n}\n\nclass OTAPayloadBlobWriter extends Writer {\n  offset: number\n  contentType: string\n  blob: Blob\n  prefixLength: number\n\n  header?: AbPayloadHeader\n\n  async readHeader(blob: Blob) {\n    let cursor = 0\n    const readInt = (size: number) => {\n      const ret = readIntAt(blob, cursor, size)\n      cursor += size\n      return ret\n    }\n    let buffer = await blob.slice(0, _PAYLOAD_HEADER_SIZE).arrayBuffer()\n    let /** TextDecoder */ decoder = new TextDecoder()\n    let magicBytes = buffer.slice(0, _MAGIC.length)\n    const magic = decoder.decode(magicBytes)\n    if (magic != _MAGIC) {\n      throw new Error(\n        `MAGIC is not correct, expected: ${_MAGIC} actual: ${magic}`\n      )\n    }\n    cursor += _MAGIC.length\n    const header_version = await readInt(_VERSION_SIZE)\n    const manifest_len = await readInt(_MANIFEST_LEN_SIZE)\n    if (header_version != _BRILLO_MAJOR_PAYLOAD_VERSION) {\n      throw new Error(`Unexpected major version number: ${header_version}`)\n    }\n    const metadata_signature_len = await readInt(_METADATA_SIGNATURE_LEN_SIZE)\n    this.header = new AbPayloadHeader(\n      magic,\n      header_version,\n      manifest_len,\n      metadata_signature_len\n    )\n  }\n  /**\n   * A zip.Writer that is tailored for OTA payload.bin read-in.\n   * Instead of reading in all the contents in payload.bin, this writer will\n   * throw an 'StopIteration' error when the header is read in.\n   * The header will be stored into the <payload>.\n   * @param {Payload} payload\n   * @param {String} contentType\n   */\n  constructor(contentType = '') {\n    super()\n    this.offset = 0\n    this.contentType = contentType\n    this.blob = new Blob([], { type: contentType })\n    this.prefixLength = 0\n  }\n\n  async writeUint8Array(array: Uint8Array) {\n    super.writeUint8Array(array)\n    this.blob = new Blob([this.blob, array.buffer], { type: this.contentType })\n    this.offset = this.blob.size\n    // Once the prefixLength is non-zero, the address of manifest and signature\n    // become known and can be read in. Otherwise the header needs to be read\n    // in first to determine the prefixLength.\n    if (this.offset >= _PAYLOAD_HEADER_SIZE && this.prefixLength == 0) {\n      console.log('Parsing header!')\n      await this.readHeader(this.blob)\n      this.prefixLength =\n        _PAYLOAD_HEADER_SIZE +\n        this.header!.manifest_len +\n        this.header!.metadata_signature_len\n      console.log(`Computed metadata length: ${this.prefixLength}`)\n    }\n    if (this.prefixLength > 0) {\n      console.log(`${this.offset}/${this.prefixLength}`)\n      if (this.offset >= this.prefixLength) {\n        // The prefix has everything we need (header, manifest, signature). Once\n        // the offset is beyond the prefix, no need to move on.\n        this.blob = this.blob.slice(0, this.prefixLength)\n        throw new StopIteration()\n      }\n    }\n  }\n\n  getData() {\n    return this.blob\n  }\n}\n\nexport class Payload {\n  zipreader: ZipReader\n  buffer: Blob | undefined\n  private metadata: any\n  payload_properties!: string\n  manifest: update_metadata_pb.DeltaArchiveManifest | undefined\n  metadata_signature!: update_metadata_pb.Signatures\n\n  header?: AbPayloadHeader\n\n  /**\n   * This class parses the metadata of a OTA package.\n   * @param {File} file A OTA.zip file read from user's machine.\n   */\n  constructor(file: File | URL | ZipFile) {\n    if (file instanceof File) {\n      this.zipreader = new ZipReader(new BlobReader(file))\n    } else if (file instanceof URL) {\n      this.zipreader = new ZipReader(new HttpReader(file.href))\n    } else {\n      this.zipreader = file.reader\n    }\n  }\n\n  getMetadataLength(): number {\n    return (\n      _PAYLOAD_HEADER_SIZE +\n      this.header!.manifest_len +\n      this.header!.metadata_signature_len\n    )\n  }\n\n  /**\n   * Unzip the OTA package, get payload.bin and metadata\n   */\n  async unzip() {\n    let entries = await this.zipreader.getEntries()\n    for (let entry of entries) {\n      if (entry.filename == 'payload.bin') {\n        let writer = new OTAPayloadBlobWriter('')\n        try {\n          await entry.getData!(writer)\n        } catch (e) {\n          if (e instanceof StopIteration) {\n            // Exception used as a hack to stop reading from zip. NO need to do anything\n            // Ideally zip.js would provide an API to partialll read a zip\n            // entry, but they don't. So this is what we get\n          } else {\n            console.log(e)\n            throw e\n          }\n        }\n        this.buffer = writer.getData()\n        await this.readManifest(this.buffer, writer.header!)\n        console.log('AB OTA manifest parsed')\n      } else if (entry.filename == 'META-INF/com/android/metadata') {\n        this.metadata = await entry.getData!(new TextWriter())\n        console.log('OTA Package metadata parsed')\n      } else if (entry.filename == \"payload_properties.txt\") {\n        this.payload_properties = await entry.getData!(new TextWriter());\n        console.log('OTA payload_properties.txt parsed');\n      }\n    }\n    if (!this.manifest) {\n      console.log('Failed to parse AB OTA package, falling back to non-AB')\n      try {\n        // The temporary variable manifest has to be used here, to prevent the html page\n        // being rendered before everything is read in properly\n        let manifest = new PayloadNonAB(this.zipreader)\n        await manifest.init()\n        manifest.nonAB = true\n        this.manifest = manifest\n      } catch (error) {\n        alert('Please select a legit OTA package')\n        return\n      }\n    }\n  }\n\n  /**\n   * Read the header of payload.bin, including the magic, header_version,\n   * manifest_len, metadata_signature_len.\n   */\n  /**\n   * Read in the manifest in an OTA.zip file.\n   * The structure of the manifest can be found in:\n   * aosp/system/update_engine/update_metadata.proto\n   */\n  async readManifest(buffer: Blob, header: AbPayloadHeader) {\n    this.header = header\n    let cursor = _PAYLOAD_HEADER_SIZE\n    let manifestBlob = await buffer\n      .slice(cursor, cursor + header.manifest_len)\n      .arrayBuffer()\n    cursor += header.manifest_len\n    this.manifest = update_metadata_pb.DeltaArchiveManifest.decode(\n      new Uint8Array(manifestBlob)\n    )\n    let signatureBlob = await buffer\n      .slice(cursor, cursor + header.metadata_signature_len)\n      .arrayBuffer()\n    cursor += header.metadata_signature_len\n    this.metadata_signature = update_metadata_pb.Signatures.decode(\n      new Uint8Array(signatureBlob)\n    );\n    (this.manifest! as any).nonAB = false\n  }\n\n  parseMetadata() {\n    for (let formatter of MetadataFormat) {\n      let regex = new RegExp(formatter.prefix + '.+')\n      if (this.metadata.match(regex)) {\n        ;(this as any)[formatter.key] = trimEntry(\n          this.metadata.match(regex)[0],\n          formatter.prefix\n        )\n      } else {\n        ;(this as any)[formatter.key] = ''\n      }\n    }\n  }\n\n  async init() {\n    await this.unzip()\n    this.parseMetadata()\n  }\n}\n\nexport class DefaultMap extends Map {\n  /** Reload the original get method. Return the original key value if\n   * the key does not exist.\n   * @param {Any} key\n   */\n  getWithDefault(key: any) {\n    if (!this.has(key)) return key\n    return this.get(key)\n  }\n}\n\nexport class OpType {\n  mapType: DefaultMap\n  /**\n   * OpType.mapType create a map that could resolve the operation\n   * types. The operation types are encoded as numbers in\n   * update_metadata.proto and must be decoded before any usage.\n   */\n  constructor() {\n    let types = update_metadata_pb.InstallOperation.Type\n    this.mapType = new DefaultMap()\n    for (let key of Object.keys(types)) {\n      this.mapType.set(types[key as any], key)\n    }\n  }\n}\n\nexport class MergeOpType {\n  mapType: DefaultMap\n  /**\n   * MergeOpType create a map that could resolve the COW merge operation\n   * types. This is very similar to OpType class except that one is for\n   * installation operations.\n   */\n  constructor() {\n    let /** Array<{String: Number}>*/ types =\n        update_metadata_pb.CowMergeOperation.Type\n    this.mapType = new DefaultMap()\n    for (let key of Object.keys(types)) {\n      this.mapType.set(types[key as any], key)\n    }\n  }\n}\n\nexport function octToHex(bufferArray: Uint8Array, space = true, maxLine = 16) {\n  let hex_table = ''\n  for (let i = 0; i < bufferArray.length; i++) {\n    const hex /** String **/ = bufferArray[i].toString(16).toUpperCase()\n    if (hex.length === 2) {\n      hex_table += hex + (space ? ' ' : '')\n    } else {\n      hex_table += '0' + hex + (space ? ' ' : '')\n    }\n    if ((i + 1) % maxLine == 0 && space) {\n      hex_table += '\\n'\n    }\n  }\n  return hex_table\n}\n\n/**\n * Trim the prefix in an entry. This is required because the lookbehind\n * regular expression is not supported in safari yet.\n * @param {String} entry\n * @param {String} prefix\n * @return String\n */\nfunction trimEntry(entry: string, prefix: string) {\n  return entry.slice(prefix.length + 1, entry.length)\n}\n","<!--\n Copyright 2021 Google LLC\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n\n<template>\n  <ul>\n    <h5>{{ mapType.getWithDefault(operation.type) }}</h5>\n    <li v-if=\"operation.hasOwnProperty('dataOffset')\">\n      <strong> Data offset: </strong> {{ operation.dataOffset }}\n    </li>\n    <li v-if=\"operation.hasOwnProperty('dataLength')\">\n      <strong> Data length: </strong> {{ operation.dataLength }}\n    </li>\n    <li v-if=\"operation.hasOwnProperty('srcExtents')\">\n      <strong> Source: </strong> {{ operation.srcExtents.length }} extents ({{\n        srcTotalBlocks\n      }}\n      blocks)\n      <br />\n      {{ srcBlocks }}\n    </li>\n    <li v-if=\"operation.hasOwnProperty('dstExtents')\">\n      <strong> Destination: </strong> {{ operation.dstExtents.length }} extents\n      ({{ dstTotalBlocks }}\n      blocks)\n      <br />\n      {{ dstBlocks }}\n    </li>\n  </ul>\n  <v-divider />\n</template>\n\n<script lang=\"ts\">\nimport { numBlocks, displayBlocks } from '../services/payload_composition'\nimport { DefaultMap } from '../services/payload'\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  props: {\n    operation: {\n      type: Object,\n      required: true\n    },\n    mapType: {\n      type: DefaultMap,\n      required: true\n    }\n  },\n  data() {\n    return {\n      srcTotalBlocks: 0,\n      srcBlocks: '',\n      dstTotalBlocks: 0,\n      dstBlocks: ''\n    }\n  },\n  mounted() {\n    if (this.operation.srcExtents) {\n      this.srcTotalBlocks = numBlocks(this.operation.srcExtents)\n      this.srcBlocks = displayBlocks(this.operation.srcExtents)\n    }\n    if (this.operation.dstExtents) {\n      this.dstTotalBlocks = numBlocks(this.operation.dstExtents)\n      this.dstBlocks = displayBlocks(this.operation.dstExtents)\n    }\n  }\n})\n</script>\n\n<style scoped>\nul {\n  padding: 5px;\n}\n\nli {\n  list-style-type: none;\n}\n</style>\n","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EChartsOption } from 'echarts'\n\nexport class EchartsData {\n  statisticData: Map<string, number>\n  trimmedData: Map<string, string>\n  title: string\n  unit: string\n  maximumEntries: number\n  /**\n   * Given a set of [key, value] pairs and title, create an object for further\n   * usage in Vue-Echarts.\n   * @param {Map} statisticData\n   * @param {String} title\n   * @param {String} unit\n   * @param {Number} maximumEntries\n   */\n  constructor(\n    statisticData: Map<string, number>,\n    title: string,\n    unit: string,\n    maximumEntries = 15\n  ) {\n    this.statisticData = statisticData\n    this.trimmedData = trimMap(statisticData, maximumEntries)\n    this.title = title\n    this.unit = unit\n    this.maximumEntries = maximumEntries\n  }\n\n  /**\n   * Convert the raw data into a string.\n   * @return {String} A list of [key, value].\n   */\n  listData() {\n    let /** String */ table = ''\n    for (let [key, value] of this.statisticData) {\n      table += key + ' : ' + value.toString() + ' Blocks' + '\\n'\n    }\n    return table\n  }\n\n  /**\n   * Generate necessary parameters (option) for vue-echarts.\n   * Format of the parameters can be found here:\n   * https://echarts.apache.org/en/option.html\n   * @param {String} unit\n   * @return {Object} an ECharts option object.\n   */\n  getEchartsOption(): EChartsOption {\n    let /** Object */ option: EChartsOption = {}\n    option.title = {\n      text: this.title,\n      left: 'center'\n    }\n    option.tooltip = {\n      trigger: 'item',\n      formatter: '{a} <br/>{b} : {c} ' + this.unit + ' ({d}%)'\n    }\n    option.legend = {\n      orient: 'horizontal',\n      left: 'top',\n      top: '10%',\n      data: Array.from(this.trimmedData.keys())\n    }\n    option.series = [\n      {\n        name: this.title,\n        type: 'pie',\n        radius: '55%',\n        center: ['50%', '60%'],\n        data: Array.from(this.trimmedData).map((pair: any) => {\n          return { value: pair[1], name: pair[0] }\n        }),\n        emphasis: {\n          itemStyle: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: 'rgba(0, 0, 0, 0.5)'\n          }\n        }\n      }\n    ]\n    return option\n  }\n}\n\n/**\n * When there are too many entries in the map, the pie chart can be very\n * crowded. This function will return the entries that have high values.\n * Specifically, the top <maximumEntries> will be stored and the others\n * will be added into an entry called 'other'.\n * @param {Map} map\n * @param {Number} maximumEntries\n * @return {Map}\n */\nfunction trimMap(map: Map<string, any>, maximumEntries: number) {\n  if (map.size <= maximumEntries) return map\n  let /** Map */ new_map = new Map()\n  for (let i = 0; i < maximumEntries; i++) {\n    let /** Number */ curr = 0\n    let /** String */ currKey = ''\n    for (let [key, value] of map) {\n      if (!new_map.get(key)) {\n        if (value > curr) {\n          curr = value\n          currKey = key\n        }\n      }\n    }\n    new_map.set(currKey, curr)\n  }\n  let /** Number */ restTotal = 0\n  for (let [key, value] of map) {\n    if (!new_map.get(key)) {\n      restTotal += value\n    }\n  }\n  new_map.set('other', restTotal)\n  return new_map\n}\n","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Class MapParser will take in a Android build and construct\n * several file name maps (physical address: file name) according to it.\n * The map of each partitions is added by calling MapParser.add(partitionName).\n * You can query the file name being operated by calling\n * MapParser.query(address, datalength).\n */\n\nimport {\n  ZipReader,\n  BlobReader,\n  TextWriter,\n  HttpReader\n} from '@zip.js/zip.js/dist/zip.js'\n\nimport { chromeos_update_engine } from './update_metadata_pb'\n\nexport class MapParser {\n  build: ZipReader\n  mapFiles: Map<any, any>\n  maps: Map<any, any>\n  /**\n   * This class will take in a .zip Android build and construct a file type map\n   * @param {File} targetFile\n   */\n  constructor(targetFile: File | URL) {\n    if (targetFile instanceof File) {\n      this.build = new ZipReader(new BlobReader(targetFile))\n    } else {\n      this.build = new ZipReader(new HttpReader(targetFile.href))\n    }\n    this.mapFiles = new Map()\n    this.maps = new Map()\n  }\n\n  /**\n   * Find the .map entries in the .zip build file. Store them as a map with\n   * pairs of (partition name: zip.js entry).\n   */\n  async init() {\n    let /** Array<Entry> */ entries = await this.build.getEntries()\n    const /** RegExp*/ regexPath = /IMAGES\\/[a-z_]*\\.map/g\n    const /** RegExp*/ regexName = /[\\w_]+(?=\\.map)/g\n    entries.forEach(entry => {\n      if (entry.filename.match(regexPath)) {\n        this.mapFiles.set(entry.filename.match(regexName)![0], entry)\n      }\n    })\n  }\n\n  /**\n   * According to the .map in the build, build a map for later query.\n   * @param {String} partitionName\n   * @param {Number} totalLength\n   */\n  async add(partitionName: string, totalLength: number) {\n    let /** Array<String> */ map = []\n    const /** RegExp */ regexNumber = /\\d+/g\n    const /** Reg */ regexRange = /\\d+\\-\\d+/g\n    for (let i = 0; i < totalLength; i++) map[i] = `<${partitionName}>`\n    if (this.mapFiles.get(partitionName)) {\n      let /** String */ mapText = await this.mapFiles\n          .get(partitionName)\n          .getData(new TextWriter())\n      let /** Array<String> */ fileEntries = mapText.split('\\n')\n      // Each line of the .map file in Android build starts with the filename\n      // Followed by the block address, either a number or a range, for example:\n      // //system/apex/com.android.adbd.apex 54-66 66 66-2663\n      for (let entry of fileEntries) {\n        let /** Array<String> */ elements = entry.split(' ')\n        for (let j = 1; j < elements.length; j++) {\n          let /** Number */ left = 0\n          let /** Number */ right = 0\n          if (elements[j].match(regexRange)) {\n            left = parseInt(elements[j].match(/\\d+/g)[0])\n            right = parseInt(elements[j].match(/\\d+/g)[1])\n          } else {\n            left = parseInt(elements[j].match(regexNumber))\n            right = parseInt(elements[j].match(regexNumber))\n          }\n          InsertMap(map, elements[0], left, right)\n        }\n      }\n      this.maps.set(partitionName, map)\n    } else {\n      this.maps.set(partitionName, map)\n    }\n  }\n\n  /**\n   * Return the filename of given address.\n   * @param {String} partitionName\n   * @param {Array<PartitionUpdate>} extents\n   * @return {Array<String>}\n   */\n  query(partitionName: string, extents: Array<chromeos_update_engine.IExtent>) {\n    let /** Array<String> */ names = []\n    let /** Array<String> */ map = this.maps.get(partitionName)\n    for (let ext of extents) {\n      names.push(queryMap(map, ext.startBlock, ext.startBlock + ext.numBlocks))\n    }\n    return names\n  }\n}\n\n/**\n * Fill in the hashtable from <left> to <right> using <name>.\n * @param {Array<String>} map\n * @param {String} name\n * @param {Number} left\n * @param {Number} right\n */\nfunction InsertMap(\n  map: Array<string>,\n  name: string,\n  left: number,\n  right: number\n) {\n  for (let i = left; i <= right; i++) {\n    map[i] = name\n  }\n}\n\n/**\n * Query the hashtable <map> using index <address>.\n * @param {Array<String>} map\n * @param {Number} left\n * @param {Number} right\n */\nfunction queryMap(map: Array<string>, left: number, right: number) {\n  // Assuming the consecutive blocks belong to the same file\n  // Only the start block is queried here.\n  if (!map[left]) {\n    return 'unknown'\n  }\n  return map[left]\n}\n","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Offer functions that can be used to parse the partitionUpdate\n * and then do statistics over it. One can use analysePartitions to specify the\n * partitions been analysed and metrics.\n */\n\nimport { OpType, MergeOpType } from './payload'\nimport { EchartsData } from './echarts_data'\nimport { MapParser } from './map_parser'\nimport { chromeos_update_engine } from './update_metadata_pb'\n\n/**\n * Add a <value> to a element associated to <key>. If the element dose not\n * exists than its value will be initialized to zero.\n * @param {Map} map\n * @param {String} key\n * @param {Number} value\n */\nfunction addNumberToMap(map: Map<String, number>, key: String, value: number) {\n  if (!map.get(key)) {\n    map.set(key, 0)\n  }\n  map.set(key, map.get(key)! + value)\n}\n\n/**\n * Return a statistics over the numbers of blocks (in destination) that are\n * being operated by different installation operation (e.g. REPLACE, BSDIFF).\n * Only partitions that are being passed in will be included.\n * @param {Array<PartitionUpdate>} partitions\n * @return {Map}\n */\nexport function operatedBlockStatistics(\n  partitions: Array<chromeos_update_engine.IPartitionUpdate>\n) {\n  let /** Map */ operatedBlocks = new Map()\n  let /** OpType */ opType = new OpType()\n  for (let partition of partitions) {\n    for (let operation of partition.operations!) {\n      let operationType = opType.mapType.getWithDefault(operation.type)\n      addNumberToMap(\n        operatedBlocks,\n        operationType,\n        numBlocks(operation.dstExtents)\n      )\n    }\n  }\n  return operatedBlocks\n}\n\nfunction partitionPayloadSize(\n  partition: chromeos_update_engine.IPartitionUpdate\n) {\n  if (!partition.operations) {\n    return 0\n  }\n  let size = 0\n  for (let op of partition.operations!) {\n    size += op.dataLength\n  }\n  return size\n}\n\nexport function partitionPayloadSizeStatistics(\n  partitions: Array<chromeos_update_engine.IPartitionUpdate>\n) {\n  let partitionStats = new Map()\n  for (let partition of partitions) {\n    addNumberToMap(\n      partitionStats,\n      partition.partitionName,\n      partitionPayloadSize(partition)\n    )\n  }\n  return partitionStats\n}\n\nexport function mergeOperationStatistics(\n  partitions: Array<chromeos_update_engine.IPartitionUpdate>,\n  blockSize: number\n) {\n  let /** Map */ mergeOperations = new Map()\n  let /** MergeOpType */ opType = new MergeOpType()\n  let /** Number */ totalBlocks = 0\n  for (let partition of partitions) {\n    for (let operation of partition.mergeOperations!) {\n      let operationType = opType.mapType.getWithDefault(operation.type)\n      addNumberToMap(\n        mergeOperations,\n        operationType,\n        operation.dstExtent!.numBlocks\n      )\n    }\n    // The total blocks number should be rounded up\n    if (partition.newPartitionInfo == null) {\n      throw new Error(\n        `Partition ${partition.partitionName} doesn't have new_partition_info field.`\n      )\n    }\n    totalBlocks += Math.ceil(partition.newPartitionInfo.size / blockSize)\n  }\n  // The COW merge operation is default to be COW_replace and not shown in\n  // the manifest info. We have to mannually add that part of operations,\n  // by subtracting the total blocks with other blocks.\n  mergeOperations.forEach((value, key) => (totalBlocks -= value))\n  mergeOperations.set('COW_REPLACE', totalBlocks)\n  return mergeOperations\n}\n\n/**\n * Return a statistics over the disk usage of payload.bin, based on the type of\n * installation operations. Only partitions that are being passed in will be\n * included.\n * @param {Array<PartitionUpdate>} partitions\n * @return {Map}\n */\nexport function operatedPayloadStatistics(\n  partitions: Array<chromeos_update_engine.IPartitionUpdate>\n) {\n  let /** Map */ operatedBlocks = new Map()\n  let /** OpType */ opType = new OpType()\n  for (let partition of partitions) {\n    for (let operation of partition.operations!) {\n      let operationType = opType.mapType.getWithDefault(operation.type)\n      addNumberToMap(operatedBlocks, operationType, operation.dataLength)\n    }\n  }\n  return operatedBlocks\n}\n/**\n * Return a statistics over the disk usage of each file types in a OTA package.\n * A target file has to be provided and address-filename maps will be built.\n * Only partitions that are being passed in will be included.\n * @param {Array<PartitionUpdate>} partitions\n * @param {Number} blockSize\n * @param {File} targetFile\n * @return {Map}\n */\nexport async function operatedFileExtensionsStatistics(\n  partitions: Array<chromeos_update_engine.IPartitionUpdate>,\n  blockSize: number,\n  targetFile: File | URL\n): Promise<Map<string, number>> {\n  let filenameStats = await operatedFilenamesStatistics(\n    partitions,\n    blockSize,\n    targetFile\n  )\n  const fileExtenstionStats = new Map<string, number>()\n  filenameStats.forEach((size, filename) => {\n    addNumberToMap(fileExtenstionStats, name2Extension(filename), size)\n  })\n  return fileExtenstionStats\n}\n\n/**\n * Return a statistics over the disk usage of each file name in a OTA package.\n * A target file has to be provided and address-filename maps will be built.\n * Only partitions that are being passed in will be included.\n * @param {Array<PartitionUpdate>} partitions\n * @param {Number} blockSize\n * @param {File} targetFile\n * @return {Map}\n */\nexport async function operatedFilenamesStatistics(\n  partitions: Array<chromeos_update_engine.IPartitionUpdate>,\n  blockSize: number,\n  targetFile: File | URL\n): Promise<Map<string, number>> {\n  let /** Map */ operatedFilenames = new Map()\n  if (!targetFile) {\n    return operatedFilenames\n  }\n  let buildMap = new MapParser(targetFile)\n  await buildMap.init()\n  for (let partition of partitions) {\n    await buildMap.add(\n      partition.partitionName,\n      Math.ceil(partition.newPartitionInfo!.size / blockSize)\n    )\n    for (let operation of partition.operations!) {\n      if (!operation.hasOwnProperty('dataLength')) continue\n      let operatedFileNames = buildMap.query(\n        partition.partitionName,\n        operation.dstExtents!\n      )\n      let extentDataLength = distributeFilenames(\n        operatedFileNames,\n        operation.dstExtents!,\n        operation.dataLength\n      )\n      extentDataLength!.forEach((value, key) => {\n        addNumberToMap(operatedFilenames, key, value)\n      })\n    }\n  }\n  return operatedFilenames\n}\n\n/**\n * Analyse the given partitions using the given metrics.\n * @param {String} metrics\n * @param {Array<PartitionUpdate>} partitions\n * @return {EchartsData}\n */\nexport async function analysePartitions(\n  metrics: String,\n  partitions: Array<chromeos_update_engine.IPartitionUpdate>,\n  blockSize = 4096,\n  targetFile: File | null | URL = null\n) {\n  let /** Map */ statisticsData\n  let /** Echartsdata */ echartsData\n  switch (metrics) {\n    case 'blocks':\n      statisticsData = operatedBlockStatistics(partitions)\n      echartsData = new EchartsData(\n        statisticsData,\n        'Operated blocks in target build',\n        'blocks'\n      )\n      break\n    case 'payload':\n      statisticsData = operatedPayloadStatistics(partitions)\n      echartsData = new EchartsData(\n        statisticsData,\n        'Payload disk usage',\n        'bytes'\n      )\n      break\n    case 'COWmerge':\n      statisticsData = mergeOperationStatistics(partitions, blockSize)\n      echartsData = new EchartsData(\n        statisticsData,\n        'COW merge operations',\n        'blocks'\n      )\n      break\n    case 'filenames':\n      if (targetFile == null) {\n        throw new Error('Target file is required for filenames analysis')\n      }\n      statisticsData = await operatedFilenamesStatistics(\n        partitions,\n        blockSize,\n        targetFile\n      )\n      echartsData = new EchartsData(\n        statisticsData,\n        'Size of operated filenames',\n        'bytes'\n      )\n      break\n    case 'extensions':\n      if (targetFile == null) {\n        throw new Error('Target file is required for filenames analysis')\n      }\n      statisticsData = await operatedFileExtensionsStatistics(\n        partitions,\n        blockSize,\n        targetFile\n      )\n      echartsData = new EchartsData(\n        statisticsData,\n        'Size of operated extensions',\n        'bytes'\n      )\n      break\n    case 'partitions':\n      statisticsData = partitionPayloadSizeStatistics(partitions)\n      echartsData = new EchartsData(\n        statisticsData,\n        'Partition payload size',\n        'bytes'\n      )\n      break\n  }\n  if (echartsData) {\n    return echartsData\n  } else {\n    throw 'Please double check if this is a proper AB OTA package.'\n  }\n}\n\n/**\n * Calculate the number of blocks being operated\n * @param {Array<InstallOperations>} exts\n * @return {number}\n */\nexport function numBlocks(\n  exts: Array<chromeos_update_engine.IExtent> | null | undefined\n) {\n  if (!exts) {\n    return 0\n  }\n  const accumulator = (total: number, ext: chromeos_update_engine.IExtent) =>\n    total + ext.numBlocks\n  return exts.reduce(accumulator, 0)\n}\n\n/**\n * Return a string that indicates the blocks being operated\n * in the manner of (start_block, block_length)\n * @param {Array<InstallOperations>} exts\n * @return {string}\n */\nexport function displayBlocks(exts: Array<chromeos_update_engine.Extent>) {\n  const accumulator = (total: string, ext: chromeos_update_engine.Extent) =>\n    total + '(' + ext.startBlock + ',' + ext.numBlocks + ')'\n  return exts.reduce(accumulator, '')\n}\n\n/**\n * Return a map with pairs of (file extension, data length used by this\n * extension). The total data length will be distributed by the blocks ratio\n * of each extent.\n * @param {Array<String>} filenames\n * @param {Array<InstallOperations>} exts\n * @param {Number} length\n * @return {Map}\n */\nexport function distributeFilenames(\n  filenames: Array<string>,\n  exts: Array<chromeos_update_engine.IExtent>,\n  length: number\n): Map<string, number> {\n  let totalBlocks = numBlocks(exts)\n  let distributedLengths = new Map()\n  for (let i = 0; i < filenames.length; i++) {\n    addNumberToMap(\n      distributedLengths,\n      filenames[i],\n      Math.round((length * exts[i].numBlocks) / totalBlocks)\n    )\n  }\n  return distributedLengths\n}\n\n/**\n * convert a filename into extension, for example:\n * '//system/apex/com.android.adbd.apex' => 'apex'\n * @param {String} filename\n * @return {String}\n */\nexport function name2Extension(filename: string) {\n  let elements = filename.split('.')\n  if (elements.length > 1) {\n    return elements[elements.length - 1]\n  } else if (elements[0] === 'unknown') {\n    return 'unknown'\n  } else if (filename[0] == '<' && filename.endsWith('>')) {\n    return filename\n  } else {\n    return 'no-extension'\n  }\n}\n","\nimport { numBlocks, displayBlocks } from '../services/payload_composition'\nimport { DefaultMap } from '../services/payload'\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  props: {\n    operation: {\n      type: Object,\n      required: true\n    },\n    mapType: {\n      type: DefaultMap,\n      required: true\n    }\n  },\n  data() {\n    return {\n      srcTotalBlocks: 0,\n      srcBlocks: '',\n      dstTotalBlocks: 0,\n      dstBlocks: ''\n    }\n  },\n  mounted() {\n    if (this.operation.srcExtents) {\n      this.srcTotalBlocks = numBlocks(this.operation.srcExtents)\n      this.srcBlocks = displayBlocks(this.operation.srcExtents)\n    }\n    if (this.operation.dstExtents) {\n      this.dstTotalBlocks = numBlocks(this.operation.dstExtents)\n      this.dstBlocks = displayBlocks(this.operation.dstExtents)\n    }\n  }\n})\n","import { render } from \"./OperationDetail.vue?vue&type=template&id=44174082&scoped=true\"\nimport script from \"./OperationDetail.vue?vue&type=script&lang=ts\"\nexport * from \"./OperationDetail.vue?vue&type=script&lang=ts\"\n\nimport \"./OperationDetail.vue?vue&type=style&index=0&id=44174082&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-44174082\"\n\nexport default script","\nimport { chromeos_update_engine } from '@/services/update_metadata_pb'\nimport { defineComponent } from 'vue'\nimport { OpType, octToHex } from '../services/payload'\nimport OperationDetail from './OperationDetail.vue'\n\nexport default defineComponent({\n  components: {\n    OperationDetail\n  },\n  props: {\n    partition: {\n      type: chromeos_update_engine.PartitionUpdate,\n      required: true\n    },\n    dynamicPartitionList: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      showOPs: false,\n      showInfo: false,\n      opType: new OpType()\n    }\n  },\n  methods: {\n    toggle(key: string) {\n      ;(this as any)[key] = !(this as any)[key]\n    },\n    octToHex: octToHex\n  },\n  computed: {\n    readableTimestamp() {\n      const unixTimestamp = parseInt(this.partition.version)\n      if (isNaN(unixTimestamp)) {\n        return ''\n      }\n      // Unix timestamp is in seconds, but js want milliseconds. So *1000\n      return new Date(unixTimestamp * 1000).toString()\n    },\n    isDynamicPartition(): boolean {\n      return (\n        this.dynamicPartitionList.indexOf(this.partition.partitionName) >= 0\n      )\n    },\n    isFECEnabled(): boolean {\n      return (\n        this.partition.fecExtent?.numBlocks > 0\n      )\n    },\n    isHashtreeEnabled(): boolean {\n      return (\n        this.partition.hashTreeExtent?.numBlocks > 0\n      )\n    }\n  }\n})\n","import { render } from \"./PartitionDetail.vue?vue&type=template&id=21e569e9&scoped=true\"\nimport script from \"./PartitionDetail.vue?vue&type=script&lang=ts\"\nexport * from \"./PartitionDetail.vue?vue&type=script&lang=ts\"\n\nimport \"./PartitionDetail.vue?vue&type=style&index=0&id=21e569e9&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-21e569e9\"\n\nexport default script","<!--\n Copyright 2021 Google LLC\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n\n<template>\n  <h3>Basic infos</h3>\n  <div v-if=\"zipFile\" v-bind=\"$attrs\">\n    <ul class=\"align\">\n      <li><strong> File name </strong> {{ zipFile.getFileName() }}</li>\n      <li><strong> File size </strong> {{ zipFile.getFileSize() }} Bytes</li>\n    </ul>\n  </div>\n  <div v-if=\"payload && payload.metadata\" v-bind=\"$attrs\">\n    <ul class=\"align\">\n      <li v-for=\"formatter in otaMetadata\" :key=\"formatter.name\">\n        <strong> {{ formatter.name.trim() + ' ' }} </strong>\n        <p class=\"wrap\">\n          {{ String(payload[formatter.key]).trim() }}\n        </p>\n      </li>\n    </ul>\n  </div>\n  <div v-if=\"payload && payload.manifest\">\n    <ul class=\"align\">\n      <li>\n        <strong> Incremental </strong>\n        <!-- Check if the first partition is incremental or not -->\n        <span v-if=\"payload.preBuild\">\n          &#9989;\n        </span>\n        <span v-else> &#10060; </span>\n      </li>\n      <li>\n        <strong> Partial </strong>\n        <span v-if=\"payload.manifest.partialUpdate\"> &#9989; </span>\n        <span v-else> &#10060; </span>\n      </li>\n      <li>\n        <strong> A/B update </strong>\n        <span v-if=\"!payload.manifest.nonAB\">\n          &#9989;\n        </span>\n        <span v-else> &#10060; </span>\n      </li>\n      <li>\n        <strong> VAB </strong>\n        <span v-if=\"payload.manifest.dynamicPartitionMetadata.snapshotEnabled\">\n          &#9989;\n        </span>\n        <span v-else> &#10060; </span>\n      </li>\n      <li>\n        <strong> VABC </strong>\n        <span v-if=\"payload.manifest.dynamicPartitionMetadata.vabcEnabled\">\n          &#9989;\n        </span>\n        <span v-else> &#10060; </span>\n      </li>\n      <li>\n        <strong> Wipes Data </strong>\n        <span v-if=\"isDataWipePackage\">\n          &#9989;\n        </span>\n        <span v-else> &#10060; </span>\n      </li>\n      <li v-if=\"totalDynamicPartitionSize\">\n        <strong> Total Dynamic Partition Size </strong>\n        {{ totalDynamicPartitionSize }}\n      </li>\n      <li v-if=\"totalCOWSize\">\n        <strong> Total VABC COW Size </strong>\n        {{ totalCOWSize }}\n      </li>\n      <li v-if=\"vabcCompressionParam\">\n        <strong> VABC Compression Param </strong>\n        {{ vabcCompressionParam }}\n      </li>\n      <li v-if=\"securityPatchLevel\">\n        <strong> Security Patch Level </strong>\n        {{ securityPatchLevel }}\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Payload, MetadataFormat } from '../services/payload'\nimport { ZipFile } from '@/services/trim_zip'\n\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  props: {\n    zipFile: {\n      type: ZipFile,\n      required: true\n    },\n    payload: {\n      type: Payload,\n      required: true\n    }\n  },\n  data() {\n    return {\n      MetadataFormat\n    }\n  },\n  computed: {\n    isDataWipePackage(): boolean {\n      return this.payload.payload_properties.includes(\"POWERWASH=1\");\n    },\n    otaMetadata(): {\n      prefix: string\n      key: string\n      name: string\n    }[] {\n      return MetadataFormat.filter(formatter =>\n        String((this.payload as any)[formatter.key]).length > 0\n      );\n    },\n    totalCOWSize(): number {\n      const cowSizes = this.payload?.manifest?.partitions.map(p => p.estimateCowSize || 0);\n      if (!cowSizes) {\n        return 0;\n      }\n      return cowSizes.reduce((a, b) => a + b);\n    },\n    vabcCompressionParam(): string {\n      return this.payload?.manifest?.dynamicPartitionMetadata?.vabcCompressionParam || \"\";\n    },\n    securityPatchLevel(): string {\n      const spl = this.payload?.manifest?.securityPatchLevel;\n      if (!spl) {\n        return \"\";\n      }\n      return spl;\n    },\n    totalDynamicPartitionSize(): number {\n      const groups = this.payload?.manifest?.dynamicPartitionMetadata?.groups\n      if (!groups) {\n        return 0\n      }\n      const dynamicPartitionNamess = new Set(\n        groups.flatMap(g => g.partitionNames)\n      )\n      const dynamicPartitions =\n        this.payload.manifest?.partitions.filter(p =>\n          dynamicPartitionNamess.has(p.partitionName)\n        ) || []\n      if (dynamicPartitions.length <= 0) {\n        return 0\n      }\n      return dynamicPartitions\n        .map(p => p.newPartitionInfo?.size || 0)\n        .reduce((acc, cur) => acc + cur)\n    }\n  }\n})\n</script>\n\n<style scoped>\n.align strong {\n  display: inline-block;\n  width: 50%;\n  position: relative;\n  padding-right: 10px; /* Ensures colon does not overlay the text */\n  text-align: right;\n}\n\n.align strong::after {\n  content: ':';\n}\n\nli {\n  list-style-type: none;\n}\n\n.wrap {\n  width: 50%;\n  display: inline-block;\n  white-space: pre-wrap;\n  word-break: break-all;\n  font-family: inherit;\n}\n</style>\n","import * as zip from '@zip.js/zip.js/dist/zip.js'\nimport { ZipReader } from '@zip.js/zip.js/dist/zip.js'\nimport { Payload } from './payload'\n\nexport class ZipFile {\n  public reader: ZipReader\n\n  constructor(private file: File | URL) {\n    this.reader = getZipReader(file)\n  }\n  getFileName() {\n    return getFileName(this.file)\n  }\n  getFileSize() {\n    if (this.file instanceof File) {\n      return this.file.size\n    } else {\n      // TODO(zhangkelvin) Support getting file size from URL\n      return 0\n    }\n  }\n}\n\nexport async function trimZip(\n  file: ZipReader,\n  p: (entry: zip.Entry) => boolean\n): Promise<zip.ZipWriter> {\n  const reader = file\n  const writer = new zip.ZipWriter(new zip.BlobWriter('application/zip'))\n  const entries = await reader.getEntries()\n  for (const entry of entries.filter(entry => !!entry && p(entry))) {\n    const blobWriter = new zip.BlobWriter()\n    const data = (await entry.getData!(blobWriter)) as Blob\n    console.log(`Adding ${entry.filename}, ${data.size}`)\n    writer.add(entry.filename, new zip.BlobReader(blobWriter.getData()), {\n      level: 0 // no compression\n    })\n  }\n  return writer\n}\n\nfunction getZipReader(file: File | URL) {\n  if (file instanceof File) {\n    return new zip.ZipReader(new zip.BlobReader(file))\n  } else {\n    return new zip.ZipReader(new zip.HttpReader(file.href))\n  }\n}\n\nexport function getFileName(file: File | URL) {\n  if (file instanceof File) {\n    return file.name\n  } else {\n    return file.pathname\n  }\n}\n\nexport async function trimTargetFiles(file: File | URL): Promise<Blob> {\n  const writer = await trimZip(getZipReader(file), entry => {\n    return entry.filename.startsWith('META/') || entry.filename.endsWith('.map') || entry.filename.endsWith(\".prop\") || entry.filename == \"prop.default\"\n  })\n  return await writer.close()\n}\n\nexport async function trimOTAPackage(payload: Payload): Promise<Blob> {\n  const writer = await trimZip(payload.zipreader, entry => {\n    return entry.filename != 'payload.bin'\n  })\n  await writer.add(\n    'payload.bin',\n    new zip.BlobReader(payload.buffer!.slice(0, payload.getMetadataLength())),\n    // Most toolings assume that payload.bin and other entries are not\n    // compressed, so use level 0\n    {\n      level: 0\n    }\n  )\n  const blob: Blob = await writer.close()\n  return blob\n}\n\nexport function downloadFile(\n  blob: Blob,\n  downloadNode: HTMLAnchorElement,\n  filename: string\n) {\n  const url = window.URL.createObjectURL(blob)\n  downloadNode.href = url\n  downloadNode.download = filename\n  downloadNode.click()\n  window.URL.revokeObjectURL(url)\n}\n\nexport function ensureSuffix(str: string, suffix: string) {\n  if (str.endsWith(suffix)) {\n    return str\n  } else {\n    return str + suffix\n  }\n}\n","\nimport { Payload, MetadataFormat } from '../services/payload'\nimport { ZipFile } from '@/services/trim_zip'\n\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  props: {\n    zipFile: {\n      type: ZipFile,\n      required: true\n    },\n    payload: {\n      type: Payload,\n      required: true\n    }\n  },\n  data() {\n    return {\n      MetadataFormat\n    }\n  },\n  computed: {\n    isDataWipePackage(): boolean {\n      return this.payload.payload_properties.includes(\"POWERWASH=1\");\n    },\n    otaMetadata(): {\n      prefix: string\n      key: string\n      name: string\n    }[] {\n      return MetadataFormat.filter(formatter =>\n        String((this.payload as any)[formatter.key]).length > 0\n      );\n    },\n    totalCOWSize(): number {\n      const cowSizes = this.payload?.manifest?.partitions.map(p => p.estimateCowSize || 0);\n      if (!cowSizes) {\n        return 0;\n      }\n      return cowSizes.reduce((a, b) => a + b);\n    },\n    vabcCompressionParam(): string {\n      return this.payload?.manifest?.dynamicPartitionMetadata?.vabcCompressionParam || \"\";\n    },\n    securityPatchLevel(): string {\n      const spl = this.payload?.manifest?.securityPatchLevel;\n      if (!spl) {\n        return \"\";\n      }\n      return spl;\n    },\n    totalDynamicPartitionSize(): number {\n      const groups = this.payload?.manifest?.dynamicPartitionMetadata?.groups\n      if (!groups) {\n        return 0\n      }\n      const dynamicPartitionNamess = new Set(\n        groups.flatMap(g => g.partitionNames)\n      )\n      const dynamicPartitions =\n        this.payload.manifest?.partitions.filter(p =>\n          dynamicPartitionNamess.has(p.partitionName)\n        ) || []\n      if (dynamicPartitions.length <= 0) {\n        return 0\n      }\n      return dynamicPartitions\n        .map(p => p.newPartitionInfo?.size || 0)\n        .reduce((acc, cur) => acc + cur)\n    }\n  }\n})\n","import { render } from \"./BasicInfo.vue?vue&type=template&id=4b9027e2&scoped=true\"\nimport script from \"./BasicInfo.vue?vue&type=script&lang=ts\"\nexport * from \"./BasicInfo.vue?vue&type=script&lang=ts\"\n\nimport \"./BasicInfo.vue?vue&type=style&index=0&id=4b9027e2&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-4b9027e2\"\n\nexport default script","\nimport PartitionDetail from './PartitionDetail.vue'\nimport BasicInfo from './BasicInfo.vue'\nimport { Payload, octToHex } from '../services/payload'\nimport {\n  downloadFile,\n  ensureSuffix,\n  trimOTAPackage,\n  ZipFile\n} from '@/services/trim_zip'\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  components: {\n    PartitionDetail,\n    BasicInfo\n  },\n  props: {\n    zipFile: {\n      type: ZipFile,\n      default: null\n    },\n    payload: {\n      type: Payload,\n      default: null\n    }\n  },\n  methods: {\n    octToHex: octToHex,\n    async exportOTAPackage() {\n      const blob = await trimOTAPackage(this.payload as Payload)\n      const downloadNode = this.$refs['download'] as HTMLAnchorElement\n      downloadFile(\n        blob,\n        downloadNode,\n        'trimmed_' + ensureSuffix(this.zipFile.getFileName(), '.zip')\n      )\n    }\n  },\n  computed: {\n    dynamicPartitions(): string[] {\n      return (\n        this.payload.manifest?.dynamicPartitionMetadata?.groups?.flatMap(\n          g => g.partitionNames || []\n        ) || []\n      )\n    }\n  }\n})\n","import { render } from \"./PayloadDetail.vue?vue&type=template&id=05db67f2&scoped=true\"\nimport script from \"./PayloadDetail.vue?vue&type=script&lang=ts\"\nexport * from \"./PayloadDetail.vue?vue&type=script&lang=ts\"\n\nimport \"./PayloadDetail.vue?vue&type=style&index=0&id=05db67f2&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-05db67f2\"\n\nexport default script","<!--\n Copyright 2021 Google LLC\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n\n<template>\n  <v-btn v-if=\"targetFile\" block class=\"md-6\" @click=\"exportTargetFileMetadata\"\n    >Export Target File Metadata</v-btn\n  >\n  <a ref=\"download\" />\n  <PartialCheckbox v-model=\"partitionInclude\" :labels=\"updatePartitions\" />\n  <div v-if=\"echartsData\">\n    <PieChart :echartsData=\"echartsData\" @click=\"piechartClick\" />\n  </div>\n  <v-divider />\n  <v-row>\n    <v-col cols=\"12\" md=\"4\">\n      <v-btn block @click=\"updateChart('blocks')\">\n        Analyse Installed Blocks (in target build)\n      </v-btn>\n    </v-col>\n    <v-col cols=\"12\" md=\"4\">\n      <v-btn block @click=\"updateChart('payload')\">\n        Analyse Payload Composition\n      </v-btn>\n    </v-col>\n    <v-col cols=\"12\" md=\"4\">\n      <v-btn block @click=\"updateChart('partitions')\">\n        Analyse Partition Payload Composition\n      </v-btn>\n    </v-col>\n  </v-row>\n  <v-row>\n    <v-col cols=\"12\" md=\"4\" class=\"tooltip\">\n      <v-btn\n        :disabled=\"\n          manifest.nonAB || !manifest.dynamicPartitionMetadata.vabcEnabled\n        \"\n        title=\"Only available for VABC update\"\n        block\n        @click=\"updateChart('COWmerge')\"\n      >\n        Analyse COW Merge Operations\n      </v-btn>\n      <span v-if=\"manifest.nonAB\" class=\"tooltiptext\">\n        This function is only supported in A/B OTA\n      </span>\n    </v-col>\n    <v-col cols=\"12\" md=\"4\">\n      <v-btn block :disabled=\"!targetFile\" @click=\"updateChart('filenames')\">\n        Analyse Filenames\n      </v-btn>\n    </v-col>\n    <v-col cols=\"12\" md=\"4\">\n      <v-btn block :disabled=\"!targetFile\" @click=\"updateChart('extensions')\">\n        Analyse File Extensions\n      </v-btn>\n    </v-col>\n  </v-row>\n  <v-row>\n    <v-col cols=\"12\" md=\"6\" />\n    <v-col cols=\"12\" md=\"6\">\n      <BaseFile\n        v-if=\"!demo\"\n        label=\"Drag and drop or Select The target Android build\"\n        @file-select=\"selectBuild\"\n      />\n    </v-col>\n  </v-row>\n</template>\n\n<script lang=\"ts\">\nimport axios from 'axios'\nimport PartialCheckbox from './PartialCheckbox.vue'\nimport PieChart from './PieChart.vue'\nimport BaseFile from './BaseFile.vue'\nimport { analysePartitions } from '../services/payload_composition'\nimport { chromeos_update_engine as update_metadata_pb } from '../services/update_metadata_pb'\nimport { TooltipComponentPositionCallbackParams } from 'echarts'\nimport { EchartsData } from '@/services/echarts_data'\nimport { defineComponent } from 'vue'\nimport {\n  downloadFile,\n  ensureSuffix,\n  getFileName,\n  trimTargetFiles\n} from '@/services/trim_zip'\n\ninterface ComponentState {\n  partitionInclude: Map<string, boolean>\n  echartsData: EchartsData | null\n  listData: string\n  targetFile: File | URL | null\n}\n\nexport default defineComponent({\n  components: {\n    PartialCheckbox,\n    PieChart,\n    BaseFile\n  },\n  props: {\n    manifest: {\n      type: update_metadata_pb.DeltaArchiveManifest,\n      default: () => []\n    },\n    demo: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      partitionInclude: new Map(),\n      echartsData: null,\n      listData: '',\n      targetFile: null\n    } as ComponentState\n  },\n  computed: {\n    updatePartitions(): string[] {\n      return this.manifest.partitions.map(\n        (partition: update_metadata_pb.IPartitionUpdate) => {\n          return partition.partitionName\n        }\n      )\n    }\n  },\n  async mounted() {\n    if (this.demo) {\n      try {\n        const download = await axios.get(\n          './files/cf_x86_target_file_demo.zip',\n          { responseType: 'blob' }\n        )\n        this.targetFile = new File([download.data], 'target_demo.zip')\n      } catch (err) {\n        console.log('Please put a proper example target file in /public/files/')\n      }\n    }\n  },\n  methods: {\n    piechartClick(param: TooltipComponentPositionCallbackParams) {\n      console.log(param)\n    },\n    async updateChart(metrics: string) {\n      let partitionSelected = this.manifest.partitions.filter(partition =>\n        this.partitionInclude.get(partition.partitionName)\n      )\n      try {\n        this.echartsData = await analysePartitions(\n          metrics,\n          partitionSelected,\n          this.manifest.blockSize,\n          this.targetFile\n        )\n      } catch (err) {\n        alert(`Cannot be processed for the following issue: ${err}`)\n      }\n    },\n    selectBuild(file: File | URL) {\n      //TODO(lishutong) check the version of target file is same to the OTA target\n      this.targetFile = file\n    },\n    async exportTargetFileMetadata() {\n      const blob = await trimTargetFiles(this.targetFile!)\n      const downloadNode = this.$refs['download'] as HTMLAnchorElement\n      downloadFile(\n        blob,\n        downloadNode,\n        'trimmed_' + ensureSuffix(getFileName(this.targetFile!), '.zip')\n      )\n    }\n  }\n})\n</script>\n\n<style scoped>\n.list-data {\n  text-align: center;\n}\n.tooltip {\n  position: relative;\n  display: inline-block;\n}\n\n.tooltip .tooltiptext {\n  visibility: hidden;\n  width: 120px;\n  background-color: black;\n  color: #fff;\n  text-align: center;\n  border-radius: 6px;\n  padding: 5px 0;\n  position: absolute;\n  z-index: 1;\n}\n\n.tooltip:hover .tooltiptext {\n  visibility: visible;\n}\n</style>\n","<!--\n Copyright 2021 Google LLC\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n\n<template>\n  <v-btn block type=\"button\" class=\"my-5\" @click=\"revertAllSelection\">\n    {{ selectAllText[selectAll] }}\n  </v-btn>\n  <v-row class=\"mb-5\">\n    <v-col v-for=\"label in labels\" :key=\"label\" cols=\"12\" md=\"4\">\n      <input\n        type=\"checkbox\"\n        :value=\"label\"\n        :checked=\"modelValue.get(label)\"\n        @change=\"updateSelected($event.target.value)\"\n      />\n      <label v-if=\"label\"> {{ label }} </label>\n    </v-col>\n  </v-row>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  props: {\n    labels: {\n      type: Array,\n      default: new Array()\n    },\n    modelValue: {\n      type: Map,\n      default: new Map()\n    }\n  },\n  data() {\n    return {\n      selectAll: 1,\n      selectAllText: ['Select All', 'Unselect All']\n    }\n  },\n  mounted() {\n    // Set the default value to be true once mounted\n    for (let key of this.labels) {\n      this.modelValue.set(key, true)\n    }\n  },\n  methods: {\n    updateSelected(newSelect: string) {\n      this.modelValue.set(newSelect, !this.modelValue.get(newSelect))\n      this.$emit('update:modelValue', this.modelValue)\n    },\n    revertAllSelection() {\n      this.selectAll = 1 - this.selectAll\n      for (let key of this.modelValue.keys()) {\n        this.modelValue.set(key, Boolean(this.selectAll))\n      }\n    }\n  }\n})\n</script>\n\n<style scoped>\nul > li {\n  display: inline-block;\n  list-style-type: none;\n  margin-left: 5%;\n  margin-right: 5%;\n  top: 0px;\n  height: 50px;\n}\n</style>\n","\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  props: {\n    labels: {\n      type: Array,\n      default: new Array()\n    },\n    modelValue: {\n      type: Map,\n      default: new Map()\n    }\n  },\n  data() {\n    return {\n      selectAll: 1,\n      selectAllText: ['Select All', 'Unselect All']\n    }\n  },\n  mounted() {\n    // Set the default value to be true once mounted\n    for (let key of this.labels) {\n      this.modelValue.set(key, true)\n    }\n  },\n  methods: {\n    updateSelected(newSelect: string) {\n      this.modelValue.set(newSelect, !this.modelValue.get(newSelect))\n      this.$emit('update:modelValue', this.modelValue)\n    },\n    revertAllSelection() {\n      this.selectAll = 1 - this.selectAll\n      for (let key of this.modelValue.keys()) {\n        this.modelValue.set(key, Boolean(this.selectAll))\n      }\n    }\n  }\n})\n","import { render } from \"./PartialCheckbox.vue?vue&type=template&id=533f2336&scoped=true\"\nimport script from \"./PartialCheckbox.vue?vue&type=script&lang=ts\"\nexport * from \"./PartialCheckbox.vue?vue&type=script&lang=ts\"\n\nimport \"./PartialCheckbox.vue?vue&type=style&index=0&id=533f2336&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-533f2336\"\n\nexport default script","<!--\n Copyright 2021 Google LLC\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n\n<template>\n  <v-chart\n    class=\"chart\"\n    :option=\"getEchartsOption\"\n    @click=\"$emit('click', ...arguments)\"\n  />\n</template>\n\n<script>\nimport { use } from 'echarts/core'\nimport { CanvasRenderer } from 'echarts/renderers'\nimport { PieChart } from 'echarts/charts'\nimport {\n  TitleComponent,\n  TooltipComponent,\n  LegendComponent\n} from 'echarts/components'\nimport VChart, { THEME_KEY } from 'vue-echarts'\nimport { EchartsData } from '../services/echarts_data'\n\nuse([\n  CanvasRenderer,\n  PieChart,\n  TitleComponent,\n  TooltipComponent,\n  LegendComponent\n])\n\nexport default {\n  components: {\n    VChart\n  },\n  provide: {\n    [THEME_KEY]: 'dark'\n  },\n  props: {\n    echartsData: {\n      type: EchartsData,\n      required: true\n    }\n  },\n  computed: {\n    getEchartsOption() {\n      return this.echartsData.getEchartsOption()\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chart {\n  height: 400px;\n}\n</style>\n","import { render } from \"./PieChart.vue?vue&type=template&id=5d1cb486&scoped=true\"\nimport script from \"./PieChart.vue?vue&type=script&lang=js\"\nexport * from \"./PieChart.vue?vue&type=script&lang=js\"\n\nimport \"./PieChart.vue?vue&type=style&index=0&id=5d1cb486&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-5d1cb486\"\n\nexport default script","\nimport axios from 'axios'\nimport PartialCheckbox from './PartialCheckbox.vue'\nimport PieChart from './PieChart.vue'\nimport BaseFile from './BaseFile.vue'\nimport { analysePartitions } from '../services/payload_composition'\nimport { chromeos_update_engine as update_metadata_pb } from '../services/update_metadata_pb'\nimport { TooltipComponentPositionCallbackParams } from 'echarts'\nimport { EchartsData } from '@/services/echarts_data'\nimport { defineComponent } from 'vue'\nimport {\n  downloadFile,\n  ensureSuffix,\n  getFileName,\n  trimTargetFiles\n} from '@/services/trim_zip'\n\ninterface ComponentState {\n  partitionInclude: Map<string, boolean>\n  echartsData: EchartsData | null\n  listData: string\n  targetFile: File | URL | null\n}\n\nexport default defineComponent({\n  components: {\n    PartialCheckbox,\n    PieChart,\n    BaseFile\n  },\n  props: {\n    manifest: {\n      type: update_metadata_pb.DeltaArchiveManifest,\n      default: () => []\n    },\n    demo: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      partitionInclude: new Map(),\n      echartsData: null,\n      listData: '',\n      targetFile: null\n    } as ComponentState\n  },\n  computed: {\n    updatePartitions(): string[] {\n      return this.manifest.partitions.map(\n        (partition: update_metadata_pb.IPartitionUpdate) => {\n          return partition.partitionName\n        }\n      )\n    }\n  },\n  async mounted() {\n    if (this.demo) {\n      try {\n        const download = await axios.get(\n          './files/cf_x86_target_file_demo.zip',\n          { responseType: 'blob' }\n        )\n        this.targetFile = new File([download.data], 'target_demo.zip')\n      } catch (err) {\n        console.log('Please put a proper example target file in /public/files/')\n      }\n    }\n  },\n  methods: {\n    piechartClick(param: TooltipComponentPositionCallbackParams) {\n      console.log(param)\n    },\n    async updateChart(metrics: string) {\n      let partitionSelected = this.manifest.partitions.filter(partition =>\n        this.partitionInclude.get(partition.partitionName)\n      )\n      try {\n        this.echartsData = await analysePartitions(\n          metrics,\n          partitionSelected,\n          this.manifest.blockSize,\n          this.targetFile\n        )\n      } catch (err) {\n        alert(`Cannot be processed for the following issue: ${err}`)\n      }\n    },\n    selectBuild(file: File | URL) {\n      //TODO(lishutong) check the version of target file is same to the OTA target\n      this.targetFile = file\n    },\n    async exportTargetFileMetadata() {\n      const blob = await trimTargetFiles(this.targetFile!)\n      const downloadNode = this.$refs['download'] as HTMLAnchorElement\n      downloadFile(\n        blob,\n        downloadNode,\n        'trimmed_' + ensureSuffix(getFileName(this.targetFile!), '.zip')\n      )\n    }\n  }\n})\n","import { render } from \"./PayloadComposition.vue?vue&type=template&id=b6f71732&scoped=true\"\nimport script from \"./PayloadComposition.vue?vue&type=script&lang=ts\"\nexport * from \"./PayloadComposition.vue?vue&type=script&lang=ts\"\n\nimport \"./PayloadComposition.vue?vue&type=style&index=0&id=b6f71732&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-b6f71732\"\n\nexport default script","\nimport BaseFile from '../components/BaseFile.vue'\nimport PayloadDetail from '../components/PayloadDetail.vue'\nimport PayloadComposition from '../components/PayloadComposition.vue'\nimport { Payload } from '../services/payload'\nimport { defineComponent } from 'vue'\nimport { ZipFile } from '@/services/trim_zip'\n\nexport default defineComponent({\n  components: {\n    BaseFile,\n    PayloadDetail,\n    PayloadComposition\n  },\n  data() {\n    return ({\n      zipFile: null,\n      payload: null\n    } as unknown) as {\n      zipFile: ZipFile\n      payload: Payload\n    }\n  },\n  methods: {\n    async unpackOTA(file: File | URL) {\n      this.zipFile = new ZipFile(file)\n      try {\n        const payload = new Payload(this.zipFile as ZipFile);\n        await payload.init();\n        this.payload = payload;\n      } catch (err) {\n        alert(`Please check if this is a correct OTA package (.zip). ${err}`)\n        console.log(err)\n      }\n    }\n  }\n})\n","import { render } from \"./PackageAnalysis.vue?vue&type=template&id=142e5614\"\nimport script from \"./PackageAnalysis.vue?vue&type=script&lang=ts\"\nexport * from \"./PackageAnalysis.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<!--\n Copyright 2021 Google LLC\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n\n<template>\n  <v-row>\n    <v-col cols=\"12\" md=\"6\">\n      <PayloadDetail\n        v-if=\"zipFile && payload\"\n        :zipFile=\"zipFile\"\n        :payload=\"payload\"\n      />\n    </v-col>\n    <v-divider vertical />\n    <v-col cols=\"12\" md=\"6\">\n      <PayloadComposition\n        v-if=\"zipFile && payload.manifest\"\n        :manifest=\"payload.manifest\"\n        :demo=\"true\"\n      />\n    </v-col>\n  </v-row>\n</template>\n\n<script lang=\"ts\">\nimport axios from 'axios'\nimport PayloadDetail from '../components/PayloadDetail.vue'\nimport PayloadComposition from '../components/PayloadComposition.vue'\nimport { Payload } from '../services/payload'\nimport { defineComponent } from 'vue'\nimport { ZipFile } from '@/services/trim_zip'\n\nexport default defineComponent({\n  components: {\n    PayloadDetail,\n    PayloadComposition\n  },\n  data() {\n    return {\n      zipFile: null,\n      payload: null\n    } as {\n      zipFile: ZipFile | null\n      payload: Payload | null\n    }\n  },\n  async created() {\n    // put cf_x86_demo.zip and cf_x86_target_file_demo into\n    // this directory: /public/files\n    try {\n      const download = await axios.get('./files/cf_x86_demo.zip', {\n        responseType: 'blob'\n      })\n      this.zipFile = new ZipFile(new File([download.data], 'ota_demo.zip'))\n      this.payload = new Payload(this.zipFile as ZipFile)\n      await this.payload.init()\n    } catch (err) {\n      console.log('Please put a proper example OTA in /public/files/')\n    }\n  }\n})\n</script>\n","\nimport axios from 'axios'\nimport PayloadDetail from '../components/PayloadDetail.vue'\nimport PayloadComposition from '../components/PayloadComposition.vue'\nimport { Payload } from '../services/payload'\nimport { defineComponent } from 'vue'\nimport { ZipFile } from '@/services/trim_zip'\n\nexport default defineComponent({\n  components: {\n    PayloadDetail,\n    PayloadComposition\n  },\n  data() {\n    return {\n      zipFile: null,\n      payload: null\n    } as {\n      zipFile: ZipFile | null\n      payload: Payload | null\n    }\n  },\n  async created() {\n    // put cf_x86_demo.zip and cf_x86_target_file_demo into\n    // this directory: /public/files\n    try {\n      const download = await axios.get('./files/cf_x86_demo.zip', {\n        responseType: 'blob'\n      })\n      this.zipFile = new ZipFile(new File([download.data], 'ota_demo.zip'))\n      this.payload = new Payload(this.zipFile as ZipFile)\n      await this.payload.init()\n    } catch (err) {\n      console.log('Please put a proper example OTA in /public/files/')\n    }\n  }\n})\n","import { render } from \"./Demo.vue?vue&type=template&id=1e5d071a\"\nimport script from \"./Demo.vue?vue&type=script&lang=ts\"\nexport * from \"./Demo.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<!--\n Copyright 2021 Google LLC\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n\n<template>\n  <div class=\"about\">\n    <p>A web based tool to inspect Android OTA packages.</p>\n  </div>\n</template>\n","import { render } from \"./About.vue?vue&type=template&id=67ed0bf6\"\nconst script = {}\nscript.render = render\n\nexport default script","<!--\n Copyright 2021 Google LLC\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n\n<template>\n  <center>\n    <h1>Not Found!</h1>\n    <p>\n      <a href=\"/\">Go home?</a>\n    </p>\n  </center>\n</template>\n\n<style scoped>\n\n  center {\n    margin: 15vw;\n  }\n\n  h1 {\n    color: var(--border);\n    font-size: 2em;\n  }\n\n</style>","import { render } from \"./NotFound.vue?vue&type=template&id=50c6f348&scoped=true\"\nconst script = {}\n\nimport \"./NotFound.vue?vue&type=style&index=0&id=50c6f348&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-50c6f348\"\n\nexport default script","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createRouter, createWebHistory } from 'vue-router'\nimport PackageAnalysis from '@/views/PackageAnalysis.vue'\nimport Demo from'@/views/Demo.vue'\nimport About from '@/views/About.vue'\nimport NotFound from '@/views/NotFound.vue'\n\nconst routes = [\n  {\n    path: '/',\n    name: 'Analysis',\n    component: PackageAnalysis,\n    meta: {\n      title: 'Analyse OTA package - from AOSP'\n    }\n  },\n  {\n    path: '/demo',\n    name: 'Demo',\n    component: Demo\n  },\n  {\n    path: '/about',\n    name: 'About',\n    component: About\n  },\n  {\n    path: '/:catchAll(.*)',\n    name: 'Not Found',\n    component: NotFound\n  }\n]\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n})\n\n// This callback runs before every route change, including on page load.\nrouter.beforeEach((to, from, next) => {\n  // This goes through the matched routes from last to first, finding the closest route with a title.\n  // e.g., if we have `/some/deep/nested/route` and `/some`, `/deep`, and `/nested` have titles,\n  // `/nested`'s will be chosen.\n  const nearestWithTitle = to.matched.slice().reverse().find(r => r.meta && r.meta.title);\n\n  // Find the nearest route element with meta tags.\n  const nearestWithMeta = to.matched.slice().reverse().find(r => r.meta && r.meta.metaTags)!;\n\n  const previousNearestWithMeta = from.matched.slice().reverse().find(r => r.meta && r.meta.metaTags);\n\n  // If a route with a title was found, set the document (page) title to that value.\n  if(nearestWithTitle) {\n    document.title = nearestWithTitle.meta.title as string;\n  } else if(previousNearestWithMeta) {\n    document.title = previousNearestWithMeta.meta.title as string;\n  }\n\n  // Remove any stale meta tags from the document using the key attribute we set below.\n  Array.from(document.querySelectorAll('[data-vue-router-controlled]')).map(el => el.parentNode!.removeChild(el));\n\n  next();\n});\n\nexport default router\n","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createStore } from 'vuex'\n\nexport default createStore({\n  state: {},\n  mutations: {},\n  actions: {},\n  modules: {}\n})\n","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createApp } from 'vue'\nimport vuetify from './plugins/vuetify'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\nconst app = createApp(App)\napp.use(router)\napp.use(store)\napp.use(vuetify)\n\napp.mount('#app')","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./PayloadDetail.vue?vue&type=style&index=0&id=05db67f2&scoped=true&lang=css\""],"sourceRoot":""}