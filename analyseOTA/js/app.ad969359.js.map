{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/PieChart.vue?f5d6","webpack:///./src/components/PartitionDetail.vue?f017","webpack:///./src/components/PayloadComposition.vue?c2c2","webpack:///./src/App.vue?5803","webpack:///./src/App.vue","webpack:///./src/App.vue?dfb6","webpack:///./src/views/PackageAnalysis.vue","webpack:///./src/components/BaseFile.vue","webpack:///./src/components/BaseFile.vue?0a43","webpack:///./src/components/PayloadDetail.vue","webpack:///./src/components/PartitionDetail.vue","webpack:///./src/services/update_metadata_pb.js","webpack:///./src/services/payload.js","webpack:///./src/components/OperationDetail.vue","webpack:///./src/services/echarts_data.js","webpack:///./src/services/map_parser.js","webpack:///./src/services/payload_composition.js","webpack:///./src/components/OperationDetail.vue?78ae","webpack:///./src/components/PartitionDetail.vue?39ae","webpack:///./src/components/PayloadComposition.vue","webpack:///./src/components/PartialCheckbox.vue","webpack:///./src/components/PartialCheckbox.vue?7829","webpack:///./src/components/PieChart.vue","webpack:///./src/components/PieChart.vue?c4e9","webpack:///./src/components/PayloadComposition.vue?c966","webpack:///./src/components/PayloadDetail.vue?5065","webpack:///./src/views/PackageAnalysis.vue?c891","webpack:///./src/views/About.vue","webpack:///./src/views/About.vue?008a","webpack:///./src/router/index.js","webpack:///./src/store/index.js","webpack:///./src/main.js","webpack:///./src/components/PayloadDetail.vue?450a","webpack:///./src/components/BaseFile.vue?385b","webpack:///./src/components/PartialCheckbox.vue?3520"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","id","to","script","render","label","unpackOTA","zipFile","payload","class","type","handleFileChange","props","String","default","methods","e","this","$emit","target","files","__scopeId","style","size","lastModifiedDate","manifest","partitions","partition","partitionName","estimateCowSize","metadata_signature","octToHex","signatures","toggle","operations","showOPs","operation","dataSha256Hash","mapType","opType","$Reader","$protobuf","$Writer","$util","$root","chromeos_update_engine","Extent","properties","keys","startBlock","Long","fromBits","numBlocks","encode","message","writer","uint32","uint64","encodeDelimited","ldelim","decode","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","isInteger","low","high","fromObject","fromValue","unsigned","parseInt","LongBits","toNumber","toObject","options","defaults","long","longs","toString","Number","toJSON","constructor","toJSONOptions","Signatures","emptyArray","Signature","fork","Array","isArray","error","TypeError","arrays","version","newBuffer","unpaddedSignatureSize","bytes","fixed32","isString","base64","PartitionInfo","hash","ImageInfo","board","channel","buildChannel","buildVersion","string","InstallOperation","srcExtents","dstExtents","xorMap","dataOffset","dataLength","srcLength","dstLength","srcSha256Hash","emptyObject","int32","end2","tag2","ProtocolError","instance","isObject","key32Re","test","keys2","objects","enums","Type","valuesById","values","CowMergeOperation","srcExtent","dstExtent","srcOffset","PartitionUpdate","newPartitionSignature","mergeOperations","runPostinstall","postinstallPath","filesystemType","oldPartitionInfo","newPartitionInfo","postinstallOptional","hashTreeDataExtent","hashTreeExtent","hashTreeAlgorithm","hashTreeSalt","fecDataExtent","fecExtent","fecRoots","bool","Boolean","DynamicPartitionGroup","partitionNames","DynamicPartitionMetadata","groups","snapshotEnabled","vabcEnabled","vabcCompressionParam","cowVersion","ApexInfo","packageName","isCompressed","decompressedSize","int64","ApexMetadata","apexInfo","DeltaArchiveManifest","installOperations","kernelInstallOperations","blockSize","signaturesOffset","signaturesSize","oldKernelInfo","newKernelInfo","oldRootfsInfo","newRootfsInfo","oldImageInfo","newImageInfo","minorVersion","maxTimestamp","dynamicPartitionMetadata","partialUpdate","_MAGIC","_VERSION_SIZE","_MANIFEST_LEN_SIZE","_METADATA_SIGNATURE_LEN_SIZE","_BRILLO_MAJOR_PAYLOAD_VERSION","Payload","file","packedFile","zip","cursor","getEntries","entries","entry","filename","getData","alert","arrayBuffer","buffer","view","DataView","getUInt16","getUint32","getBigUint64","decoder","TextDecoder","magic","header_version","readInt","manifest_len","metadata_signature_len","err","console","log","manifest_raw","Uint8Array","update_metadata_pb","signature_raw","unzipPayload","readHeader","readManifest","readSignature","OpType","types","Map","set","MergeOpType","srcTotalBlocks","srcBlocks","dstTotalBlocks","dstBlocks","EchartsData","statisticData","title","unit","maximumEntries","table","trimMap","option","text","left","tooltip","trigger","formatter","legend","orient","top","from","series","radius","center","map","pair","emphasis","itemStyle","shadowBlur","shadowOffsetX","shadowColor","new_map","curr","currKey","restTotal","MapParser","targetFile","build","mapFiles","maps","regexPath","regexName","forEach","match","totalLength","regexNumber","regexRange","mapText","fileEntries","split","elements","right","InsertMap","extents","names","ext","queryMap","addNumberToMap","operatedBlockStatistics","operatedBlocks","operationType","mergeOperationStatistics","totalBlocks","Math","ceil","operatedPayloadStatistics","operatedExtensionStatistics","operatedExtensions","buildMap","init","add","operatedFileNames","query","extentDataLength","distributeExtensions","analysePartitions","metrics","statisticsData","echartsData","exts","accumulator","total","reduce","displayBlocks","filenames","distributedLengths","name2Extension","round","required","mounted","components","OperationDetail","created","partitionInclude","labels","updatePartitions","updateChart","selectBuild","disabled","$attrs","revertAllSelection","selectAll","checked","modelValue","updateSelected","$event","selectAllText","newSelect","getEchartsOption","VChart","provide","computed","PartialCheckbox","PieChart","BaseFile","listData","partitionSelected","filter","PartitionDetail","PayloadComposition","File","bufferArray","hex_table","PayloadDetail","routes","path","component","PackageAnalysis","meta","About","router","createRouter","history","createWebHistory","process","beforeEach","next","nearestWithTitle","matched","reverse","find","nearestWithMeta","metaTags","previousNearestWithMeta","document","querySelectorAll","el","parentNode","removeChild","tagDef","createElement","setAttribute","head","appendChild","createStore","state","mutations","actions","createApp","App","use","store","mount"],"mappings":"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","file":"js/app.ad969359.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/analyseOTA/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./PieChart.vue?vue&type=style&index=0&id=6d824429&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./PartitionDetail.vue?vue&type=style&index=0&id=07beeff1&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./PayloadComposition.vue?vue&type=style&index=0&id=a7ba14a4&scoped=true&lang=css\"","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../node_modules/vue-loader-v16/dist/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./App.vue?vue&type=style&index=0&id=fc86bdac&lang=css\"","<template>\n  <div id=\"nav\">\n    <router-link :to=\"{ name: 'Analysis' }\">\n      Analysis\n    </router-link> |\n    <router-link :to=\"{ name: 'About' }\">\n      About\n    </router-link>\n  </div>\n  <div id=\"app\">\n    <router-view />\n  </div>\n</template>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n\n#nav {\n  padding: 30px;\n}\n\n#nav a {\n  font-weight: bold;\n  color: #2c3e50;\n}\n\n#nav a.router-link-exact-active {\n  color: #42b983;\n}\n\nh4 {\n  font-size: 20px;\n  text-align: center;\n}\nhtml {\n  -webkit-text-size-adjust: 100%;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\nbody {\n  margin: 0;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: 16px;\n  line-height: 1.5;\n}\n#app {\n  box-sizing: border-box;\n  width: 500px;\n  padding: 0 20px 20px;\n  margin: 0 auto;\n}\nhr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible;\n}\na {\n  color: #39b982;\n  font-weight: 600;\n  background-color: transparent;\n}\nimg {\n  border-style: none;\n  width: 100%;\n}\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  display: flex;\n  align-items: center;\n  font-family: \"Montserrat\", sans-serif;\n}\nh1 {\n  font-size: 50px;\n  font-weight: 700;\n}\nh2 {\n  font-size: 38px;\n  font-weight: 700;\n}\nh3 {\n  font-size: 28px;\n  font-weight: 700;\n}\nh4 {\n  font-size: 21px;\n  font-weight: 700;\n}\nh5 {\n  font-size: 16px;\n  font-weight: 700;\n}\nh6 {\n  font-size: 15px;\n  font-weight: 700;\n}\nb,\nstrong {\n  font-weight: bolder;\n}\nsmall {\n  font-size: 80%;\n}\n.eyebrow {\n  font-size: 20px;\n}\n.-text-primary {\n  color: #39b982;\n}\n.-text-base {\n  color: #000;\n}\n.-text-error {\n  color: tomato;\n}\n.-text-gray {\n  color: rgba(0, 0, 0, 0.5);\n}\n.-shadow {\n  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.13);\n}\n.badge {\n  display: inline-flex;\n  height: 26px;\n  width: auto;\n  padding: 0 7px;\n  margin: 0 5px;\n  background: transparent;\n  border-radius: 13px;\n  font-size: 13px;\n  font-weight: 400;\n  line-height: 26px;\n}\n.badge.-fill-gradient {\n  background: linear-gradient(to right, #16c0b0, #84cf6a);\n  color: #fff;\n}\nbutton,\nlabel,\ninput,\noptgroup,\nselect,\ntextarea {\n  display: inline-flex;\n  font-family: \"Open sans\", sans-serif;\n  font-size: 100%;\n  line-height: 1.15;\n  margin: 0;\n}\nbutton,\ninput {\n  overflow: visible;\n}\nbutton,\nselect {\n  text-transform: none;\n}\nbutton,\n[type=\"button\"],\n[type=\"reset\"],\n[type=\"submit\"] {\n  -webkit-appearance: none;\n}\nbutton::-moz-focus-inner,\n[type=\"button\"]::-moz-focus-inner,\n[type=\"reset\"]::-moz-focus-inner,\n[type=\"submit\"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\nbutton:-moz-focusring,\n[type=\"button\"]:-moz-focusring,\n[type=\"reset\"]:-moz-focusring,\n[type=\"submit\"]:-moz-focusring {\n  outline: 2px solid #39b982;\n}\nlabel {\n  color: rgba(0, 0, 0, 0.5);\n  font-weight: 700;\n}\ninput,\ntextarea {\n  box-sizing: border-box;\n  border: solid 1px rgba(0, 0, 0, 0.4);\n}\ninput.error,\nselect.error {\n  margin-bottom: 0;\n}\ninput + p.errorMessage {\n  margin-bottom: 24px;\n}\ntextarea {\n  width: 100%;\n  overflow: auto;\n  font-size: 20px;\n}\n[type=\"checkbox\"],\n[type=\"radio\"] {\n  box-sizing: border-box;\n  padding: 0;\n  margin-right: 0.5rem;\n}\n[type=\"number\"]::-webkit-inner-spin-button,\n[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n[type=\"search\"] {\n  -webkit-appearance: textfield;\n  outline-offset: -2px;\n}\n[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n[type=\"text\"],\n[type=\"number\"],\n[type=\"search\"],\n[type=\"password\"] {\n  height: 52px;\n  width: 100%;\n  padding: 0 10px;\n  font-size: 20px;\n}\n[type=\"text\"]:focus,\n[type=\"number\"]:focus,\n[type=\"search\"]:focus,\n[type=\"password\"]:focus {\n  border-color: #39b982;\n}\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit;\n}\n[hidden] {\n  display: none;\n}\n.error {\n  border: 1px solid red;\n}\nselect {\n  width: 100%;\n  height: 52px;\n  padding: 0 24px 0 10px;\n  vertical-align: middle;\n  background: #fff\n    url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E\")\n    no-repeat right 12px center;\n  background-size: 8px 10px;\n  border: solid 1px rgba(0, 0, 0, 0.4);\n  border-radius: 0;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n}\nselect:focus {\n  border-color: #39b982;\n  outline: 0;\n}\nselect:focus::ms-value {\n  color: #000;\n  background: #fff;\n}\nselect::ms-expand {\n  opacity: 0;\n}\n.field {\n  margin-bottom: 24px;\n}\n.error {\n  border: 1px solid red;\n}\n.errorMessage {\n  color: red;\n}\n.button {\n  display: inline-flex;\n  align-items: center;\n  justify-content: space-between;\n  height: 52px;\n  padding: 0 40px;\n  background: transparent;\n  border: none;\n  border-radius: 6px;\n  text-align: center;\n  font-weight: 600;\n  white-space: nowrap;\n  transition: all 0.2s linear;\n}\n.button:hover {\n  -webkit-transform: scale(1.02);\n  transform: scale(1.02);\n  box-shadow: 0 7px 17px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n.button:active {\n  -webkit-transform: scale(1);\n  transform: scale(1);\n  box-shadow: none;\n}\n.button:focus {\n  outline: 0;\n}\n.button:disabled {\n  -webkit-transform: scale(1);\n  transform: scale(1);\n  box-shadow: none;\n}\n.button + .button {\n  margin-left: 1em;\n}\n.button.-fill-gradient {\n  background: linear-gradient(to right, #16c0b0, #84cf6a);\n  color: #ffffff;\n}\n.button.-fill-gray {\n  background: rgba(0, 0, 0, 0.5);\n  color: #ffffff;\n}\n.button.-size-small {\n  height: 32px;\n}\n.button.-icon-right {\n  text-align: left;\n  padding: 0 20px;\n}\n.button.-icon-right > .icon {\n  margin-left: 10px;\n}\n.button.-icon-left {\n  text-align: right;\n  padding: 0 20px;\n}\n.button.-icon-left > .icon {\n  margin-right: 10px;\n}\n.button.-icon-center {\n  padding: 0 20px;\n}\n</style>\n","import { render } from \"./App.vue?vue&type=template&id=fc86bdac\"\nconst script = {}\n\nimport \"./App.vue?vue&type=style&index=0&id=fc86bdac&lang=css\"\nscript.render = render\n\nexport default script","<template>\n  <div>\n    <BaseFile\n      label=\"Select an OTA package\"\n      @file-select=\"unpackOTA\"\n    />\n    <PayloadDetail\n      v-if=\"zipFile && payload\"\n      :zipFile=\"zipFile\"\n      :payload=\"payload\"\n    />\n  </div>\n</template>\n\n<script>\nimport BaseFile from '@/components/BaseFile.vue'\nimport PayloadDetail from '@/components/PayloadDetail.vue'\nimport { Payload } from '@/services/payload.js'\n\nexport default {\n  components: {\n    BaseFile,\n    PayloadDetail,\n  },\n  data() {\n    return {\n      zipFile: null,\n      payload: null,\n    }\n  },\n  methods: {\n    async unpackOTA(files) {\n      this.zipFile = files[0]\n      try {\n        this.payload = new Payload(this.zipFile)\n        await this.payload.init()\n      } catch (err) {\n        alert('Please check if this is a correct OTA package (.zip).')\n        console.log(err)\n      }\n    },\n  },\n}\n</script>\n","<template>\n  <label class=\"file-select\">\n    <div class=\"select-button\">\n      <span v-if=\"label\">{{ label }}</span>\n      <span v-else>Select File</span>\n    </div>\n    <input\n      type=\"file\"\n      @change=\"handleFileChange\"\n    >\n  </label>\n</template>\n\n<script>\nexport default {\n  props: {\n    label: {\n      type: String,\n      default: ''\n    }\n  },\n  methods: {\n    handleFileChange(e) {\n      this.$emit('file-select', e.target.files)\n    }\n  }\n}\n</script>\n\n<style scoped>\n.file-select > .select-button {\n  padding: 1rem;\n\n  color: white;\n  background-color: #2EA169;\n\n  border-radius: .3rem;\n\n  text-align: center;\n  font-weight: bold;\n}\n\n.file-select > input[type=\"file\"] {\n  display: none;\n}\n</style>","import { render } from \"./BaseFile.vue?vue&type=template&id=b6697dfa&scoped=true\"\nimport script from \"./BaseFile.vue?vue&type=script&lang=js\"\nexport * from \"./BaseFile.vue?vue&type=script&lang=js\"\n\nimport \"./BaseFile.vue?vue&type=style&index=0&id=b6697dfa&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-b6697dfa\"\n\nexport default script","<template>\n  <div v-if=\"zipFile\">\n    <h3>File infos</h3>\n    <ul>\n      <li>File name: {{ zipFile.name }}</li>\n      <li>File size: {{ zipFile.size }} Bytes</li>\n      <li>File last modified date: {{ zipFile.lastModifiedDate }}</li>\n    </ul>\n  </div>\n  <div v-if=\"payload\">\n    <h3>Payload Compositin</h3>\n    <div v-if=\"payload.manifest\">\n      <PayloadComposition :manifest=\"payload.manifest\" />\n    </div>\n    <h3>Partition List</h3>\n    <ul v-if=\"payload.manifest\">\n      <li\n        v-for=\"partition in payload.manifest.partitions\"\n        :key=\"partition.partitionName\"\n      >\n        <h4>{{ partition.partitionName }}</h4>\n        <p v-if=\"partition.estimateCowSize\">\n          Estimate COW Size: {{ partition.estimateCowSize }} Bytes\n        </p>\n        <p v-else>\n          Estimate COW Size: 0 Bytes\n        </p>\n        <PartitionDetail :partition=\"partition\" />\n      </li>\n    </ul>\n    <h3>Metadata Signature</h3>\n    <div\n      v-if=\"payload.metadata_signature\"\n      class=\"signature\"\n    >\n      <span style=\"white-space: pre-wrap\">\n        {{ octToHex(payload.metadata_signature.signatures[0].data) }}\n      </span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport PartitionDetail from './PartitionDetail.vue'\nimport PayloadComposition from './PayloadComposition.vue'\nimport { Payload } from '@/services/payload.js'\n\nexport default {\n  components: {\n    PartitionDetail,\n    PayloadComposition,\n  },\n  props: {\n    zipFile: {\n      type: File,\n      default: null,\n    },\n    payload: {\n      type: Payload,\n      default: null,\n    },\n  },\n  methods: {\n    octToHex: octToHex,\n  },\n}\n\nfunction octToHex(bufferArray) {\n  let hex_table = ''\n  for (let i = 0; i < bufferArray.length; i++) {\n    hex_table += bufferArray[i].toString(16) + ' '\n    if ((i + 1) % 16 == 0) {\n      hex_table += '\\n'\n    }\n  }\n  return hex_table\n}\n</script>\n\n<style scoped>\n.signature {\n  overflow: scroll;\n  height: 200px;\n  width: 100%;\n  word-break: break-all;\n}\n</style>","<template>\n  <p\n    class=\"toggle\"\n    @click=\"toggle()\"\n  >\n    Total Operations: {{ partition.operations.length }}\n    <ul\n      v-if=\"showOPs\"\n    >\n      <li\n        v-for=\"operation in partition.operations\"\n        :key=\"operation.dataSha256Hash\"\n      >\n        <OperationDetail\n          :operation=\"operation\"\n          :mapType=\"opType.mapType\"\n        />\n      </li>\n    </ul>\n  </p>\n</template>\n\n<script>\nimport { OpType } from '@/services/payload.js'\nimport OperationDetail from '@/components/OperationDetail.vue'\n\nexport default {\n  components: {\n    OperationDetail,\n  },\n  props: {\n    partition: {\n      type: Object,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      showOPs: false,\n      opType: null,\n    }\n  },\n  created() {\n    this.opType = new OpType()\n  },\n  methods: {\n    toggle() {\n      this.showOPs = !this.showOPs\n    },\n  },\n}\n</script>\n\n<style scoped>\n.toggle {\n  display: block;\n  cursor: pointer;\n  color: #00c255;\n}\n</style>","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\nimport * as $protobuf from \"protobufjs/minimal\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const chromeos_update_engine = $root.chromeos_update_engine = (() => {\n\n    /**\n     * Namespace chromeos_update_engine.\n     * @exports chromeos_update_engine\n     * @namespace\n     */\n    const chromeos_update_engine = {};\n\n    chromeos_update_engine.Extent = (function() {\n\n        /**\n         * Properties of an Extent.\n         * @memberof chromeos_update_engine\n         * @interface IExtent\n         * @property {number|Long|null} [startBlock] Extent startBlock\n         * @property {number|Long|null} [numBlocks] Extent numBlocks\n         */\n\n        /**\n         * Constructs a new Extent.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents an Extent.\n         * @implements IExtent\n         * @constructor\n         * @param {chromeos_update_engine.IExtent=} [properties] Properties to set\n         */\n        function Extent(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Extent startBlock.\n         * @member {number|Long} startBlock\n         * @memberof chromeos_update_engine.Extent\n         * @instance\n         */\n        Extent.prototype.startBlock = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Extent numBlocks.\n         * @member {number|Long} numBlocks\n         * @memberof chromeos_update_engine.Extent\n         * @instance\n         */\n        Extent.prototype.numBlocks = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new Extent instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {chromeos_update_engine.IExtent=} [properties] Properties to set\n         * @returns {chromeos_update_engine.Extent} Extent instance\n         */\n        Extent.create = function create(properties) {\n            return new Extent(properties);\n        };\n\n        /**\n         * Encodes the specified Extent message. Does not implicitly {@link chromeos_update_engine.Extent.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {chromeos_update_engine.IExtent} message Extent message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Extent.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.startBlock != null && Object.hasOwnProperty.call(message, \"startBlock\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.startBlock);\n            if (message.numBlocks != null && Object.hasOwnProperty.call(message, \"numBlocks\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.numBlocks);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Extent message, length delimited. Does not implicitly {@link chromeos_update_engine.Extent.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {chromeos_update_engine.IExtent} message Extent message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Extent.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Extent message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.Extent} Extent\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Extent.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.Extent();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.startBlock = reader.uint64();\n                    break;\n                case 2:\n                    message.numBlocks = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Extent message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.Extent} Extent\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Extent.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Extent message.\n         * @function verify\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Extent.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.startBlock != null && message.hasOwnProperty(\"startBlock\"))\n                if (!$util.isInteger(message.startBlock) && !(message.startBlock && $util.isInteger(message.startBlock.low) && $util.isInteger(message.startBlock.high)))\n                    return \"startBlock: integer|Long expected\";\n            if (message.numBlocks != null && message.hasOwnProperty(\"numBlocks\"))\n                if (!$util.isInteger(message.numBlocks) && !(message.numBlocks && $util.isInteger(message.numBlocks.low) && $util.isInteger(message.numBlocks.high)))\n                    return \"numBlocks: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an Extent message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.Extent} Extent\n         */\n        Extent.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.Extent)\n                return object;\n            let message = new $root.chromeos_update_engine.Extent();\n            if (object.startBlock != null)\n                if ($util.Long)\n                    (message.startBlock = $util.Long.fromValue(object.startBlock)).unsigned = true;\n                else if (typeof object.startBlock === \"string\")\n                    message.startBlock = parseInt(object.startBlock, 10);\n                else if (typeof object.startBlock === \"number\")\n                    message.startBlock = object.startBlock;\n                else if (typeof object.startBlock === \"object\")\n                    message.startBlock = new $util.LongBits(object.startBlock.low >>> 0, object.startBlock.high >>> 0).toNumber(true);\n            if (object.numBlocks != null)\n                if ($util.Long)\n                    (message.numBlocks = $util.Long.fromValue(object.numBlocks)).unsigned = true;\n                else if (typeof object.numBlocks === \"string\")\n                    message.numBlocks = parseInt(object.numBlocks, 10);\n                else if (typeof object.numBlocks === \"number\")\n                    message.numBlocks = object.numBlocks;\n                else if (typeof object.numBlocks === \"object\")\n                    message.numBlocks = new $util.LongBits(object.numBlocks.low >>> 0, object.numBlocks.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Extent message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {chromeos_update_engine.Extent} message Extent\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Extent.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.startBlock = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.startBlock = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.numBlocks = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.numBlocks = options.longs === String ? \"0\" : 0;\n            }\n            if (message.startBlock != null && message.hasOwnProperty(\"startBlock\"))\n                if (typeof message.startBlock === \"number\")\n                    object.startBlock = options.longs === String ? String(message.startBlock) : message.startBlock;\n                else\n                    object.startBlock = options.longs === String ? $util.Long.prototype.toString.call(message.startBlock) : options.longs === Number ? new $util.LongBits(message.startBlock.low >>> 0, message.startBlock.high >>> 0).toNumber(true) : message.startBlock;\n            if (message.numBlocks != null && message.hasOwnProperty(\"numBlocks\"))\n                if (typeof message.numBlocks === \"number\")\n                    object.numBlocks = options.longs === String ? String(message.numBlocks) : message.numBlocks;\n                else\n                    object.numBlocks = options.longs === String ? $util.Long.prototype.toString.call(message.numBlocks) : options.longs === Number ? new $util.LongBits(message.numBlocks.low >>> 0, message.numBlocks.high >>> 0).toNumber(true) : message.numBlocks;\n            return object;\n        };\n\n        /**\n         * Converts this Extent to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.Extent\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Extent.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Extent;\n    })();\n\n    chromeos_update_engine.Signatures = (function() {\n\n        /**\n         * Properties of a Signatures.\n         * @memberof chromeos_update_engine\n         * @interface ISignatures\n         * @property {Array.<chromeos_update_engine.Signatures.ISignature>|null} [signatures] Signatures signatures\n         */\n\n        /**\n         * Constructs a new Signatures.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a Signatures.\n         * @implements ISignatures\n         * @constructor\n         * @param {chromeos_update_engine.ISignatures=} [properties] Properties to set\n         */\n        function Signatures(properties) {\n            this.signatures = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Signatures signatures.\n         * @member {Array.<chromeos_update_engine.Signatures.ISignature>} signatures\n         * @memberof chromeos_update_engine.Signatures\n         * @instance\n         */\n        Signatures.prototype.signatures = $util.emptyArray;\n\n        /**\n         * Creates a new Signatures instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {chromeos_update_engine.ISignatures=} [properties] Properties to set\n         * @returns {chromeos_update_engine.Signatures} Signatures instance\n         */\n        Signatures.create = function create(properties) {\n            return new Signatures(properties);\n        };\n\n        /**\n         * Encodes the specified Signatures message. Does not implicitly {@link chromeos_update_engine.Signatures.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {chromeos_update_engine.ISignatures} message Signatures message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Signatures.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.signatures != null && message.signatures.length)\n                for (let i = 0; i < message.signatures.length; ++i)\n                    $root.chromeos_update_engine.Signatures.Signature.encode(message.signatures[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Signatures message, length delimited. Does not implicitly {@link chromeos_update_engine.Signatures.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {chromeos_update_engine.ISignatures} message Signatures message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Signatures.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Signatures message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.Signatures} Signatures\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Signatures.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.Signatures();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.signatures && message.signatures.length))\n                        message.signatures = [];\n                    message.signatures.push($root.chromeos_update_engine.Signatures.Signature.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Signatures message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.Signatures} Signatures\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Signatures.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Signatures message.\n         * @function verify\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Signatures.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.signatures != null && message.hasOwnProperty(\"signatures\")) {\n                if (!Array.isArray(message.signatures))\n                    return \"signatures: array expected\";\n                for (let i = 0; i < message.signatures.length; ++i) {\n                    let error = $root.chromeos_update_engine.Signatures.Signature.verify(message.signatures[i]);\n                    if (error)\n                        return \"signatures.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Signatures message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.Signatures} Signatures\n         */\n        Signatures.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.Signatures)\n                return object;\n            let message = new $root.chromeos_update_engine.Signatures();\n            if (object.signatures) {\n                if (!Array.isArray(object.signatures))\n                    throw TypeError(\".chromeos_update_engine.Signatures.signatures: array expected\");\n                message.signatures = [];\n                for (let i = 0; i < object.signatures.length; ++i) {\n                    if (typeof object.signatures[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.Signatures.signatures: object expected\");\n                    message.signatures[i] = $root.chromeos_update_engine.Signatures.Signature.fromObject(object.signatures[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Signatures message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {chromeos_update_engine.Signatures} message Signatures\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Signatures.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.signatures = [];\n            if (message.signatures && message.signatures.length) {\n                object.signatures = [];\n                for (let j = 0; j < message.signatures.length; ++j)\n                    object.signatures[j] = $root.chromeos_update_engine.Signatures.Signature.toObject(message.signatures[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Signatures to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.Signatures\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Signatures.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        Signatures.Signature = (function() {\n\n            /**\n             * Properties of a Signature.\n             * @memberof chromeos_update_engine.Signatures\n             * @interface ISignature\n             * @property {number|null} [version] Signature version\n             * @property {Uint8Array|null} [data] Signature data\n             * @property {number|null} [unpaddedSignatureSize] Signature unpaddedSignatureSize\n             */\n\n            /**\n             * Constructs a new Signature.\n             * @memberof chromeos_update_engine.Signatures\n             * @classdesc Represents a Signature.\n             * @implements ISignature\n             * @constructor\n             * @param {chromeos_update_engine.Signatures.ISignature=} [properties] Properties to set\n             */\n            function Signature(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Signature version.\n             * @member {number} version\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @instance\n             */\n            Signature.prototype.version = 0;\n\n            /**\n             * Signature data.\n             * @member {Uint8Array} data\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @instance\n             */\n            Signature.prototype.data = $util.newBuffer([]);\n\n            /**\n             * Signature unpaddedSignatureSize.\n             * @member {number} unpaddedSignatureSize\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @instance\n             */\n            Signature.prototype.unpaddedSignatureSize = 0;\n\n            /**\n             * Creates a new Signature instance using the specified properties.\n             * @function create\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {chromeos_update_engine.Signatures.ISignature=} [properties] Properties to set\n             * @returns {chromeos_update_engine.Signatures.Signature} Signature instance\n             */\n            Signature.create = function create(properties) {\n                return new Signature(properties);\n            };\n\n            /**\n             * Encodes the specified Signature message. Does not implicitly {@link chromeos_update_engine.Signatures.Signature.verify|verify} messages.\n             * @function encode\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {chromeos_update_engine.Signatures.ISignature} message Signature message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Signature.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.version);\n                if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);\n                if (message.unpaddedSignatureSize != null && Object.hasOwnProperty.call(message, \"unpaddedSignatureSize\"))\n                    writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.unpaddedSignatureSize);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Signature message, length delimited. Does not implicitly {@link chromeos_update_engine.Signatures.Signature.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {chromeos_update_engine.Signatures.ISignature} message Signature message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Signature.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Signature message from the specified reader or buffer.\n             * @function decode\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {chromeos_update_engine.Signatures.Signature} Signature\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Signature.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.Signatures.Signature();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.version = reader.uint32();\n                        break;\n                    case 2:\n                        message.data = reader.bytes();\n                        break;\n                    case 3:\n                        message.unpaddedSignatureSize = reader.fixed32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Signature message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {chromeos_update_engine.Signatures.Signature} Signature\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Signature.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Signature message.\n             * @function verify\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Signature.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.version != null && message.hasOwnProperty(\"version\"))\n                    if (!$util.isInteger(message.version))\n                        return \"version: integer expected\";\n                if (message.data != null && message.hasOwnProperty(\"data\"))\n                    if (!(message.data && typeof message.data.length === \"number\" || $util.isString(message.data)))\n                        return \"data: buffer expected\";\n                if (message.unpaddedSignatureSize != null && message.hasOwnProperty(\"unpaddedSignatureSize\"))\n                    if (!$util.isInteger(message.unpaddedSignatureSize))\n                        return \"unpaddedSignatureSize: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Signature message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {chromeos_update_engine.Signatures.Signature} Signature\n             */\n            Signature.fromObject = function fromObject(object) {\n                if (object instanceof $root.chromeos_update_engine.Signatures.Signature)\n                    return object;\n                let message = new $root.chromeos_update_engine.Signatures.Signature();\n                if (object.version != null)\n                    message.version = object.version >>> 0;\n                if (object.data != null)\n                    if (typeof object.data === \"string\")\n                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);\n                    else if (object.data.length)\n                        message.data = object.data;\n                if (object.unpaddedSignatureSize != null)\n                    message.unpaddedSignatureSize = object.unpaddedSignatureSize >>> 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Signature message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {chromeos_update_engine.Signatures.Signature} message Signature\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Signature.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.version = 0;\n                    if (options.bytes === String)\n                        object.data = \"\";\n                    else {\n                        object.data = [];\n                        if (options.bytes !== Array)\n                            object.data = $util.newBuffer(object.data);\n                    }\n                    object.unpaddedSignatureSize = 0;\n                }\n                if (message.version != null && message.hasOwnProperty(\"version\"))\n                    object.version = message.version;\n                if (message.data != null && message.hasOwnProperty(\"data\"))\n                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;\n                if (message.unpaddedSignatureSize != null && message.hasOwnProperty(\"unpaddedSignatureSize\"))\n                    object.unpaddedSignatureSize = message.unpaddedSignatureSize;\n                return object;\n            };\n\n            /**\n             * Converts this Signature to JSON.\n             * @function toJSON\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Signature.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Signature;\n        })();\n\n        return Signatures;\n    })();\n\n    chromeos_update_engine.PartitionInfo = (function() {\n\n        /**\n         * Properties of a PartitionInfo.\n         * @memberof chromeos_update_engine\n         * @interface IPartitionInfo\n         * @property {number|Long|null} [size] PartitionInfo size\n         * @property {Uint8Array|null} [hash] PartitionInfo hash\n         */\n\n        /**\n         * Constructs a new PartitionInfo.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a PartitionInfo.\n         * @implements IPartitionInfo\n         * @constructor\n         * @param {chromeos_update_engine.IPartitionInfo=} [properties] Properties to set\n         */\n        function PartitionInfo(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PartitionInfo size.\n         * @member {number|Long} size\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @instance\n         */\n        PartitionInfo.prototype.size = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * PartitionInfo hash.\n         * @member {Uint8Array} hash\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @instance\n         */\n        PartitionInfo.prototype.hash = $util.newBuffer([]);\n\n        /**\n         * Creates a new PartitionInfo instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {chromeos_update_engine.IPartitionInfo=} [properties] Properties to set\n         * @returns {chromeos_update_engine.PartitionInfo} PartitionInfo instance\n         */\n        PartitionInfo.create = function create(properties) {\n            return new PartitionInfo(properties);\n        };\n\n        /**\n         * Encodes the specified PartitionInfo message. Does not implicitly {@link chromeos_update_engine.PartitionInfo.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {chromeos_update_engine.IPartitionInfo} message PartitionInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PartitionInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.size != null && Object.hasOwnProperty.call(message, \"size\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.size);\n            if (message.hash != null && Object.hasOwnProperty.call(message, \"hash\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.hash);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified PartitionInfo message, length delimited. Does not implicitly {@link chromeos_update_engine.PartitionInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {chromeos_update_engine.IPartitionInfo} message PartitionInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PartitionInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PartitionInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.PartitionInfo} PartitionInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PartitionInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.PartitionInfo();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.size = reader.uint64();\n                    break;\n                case 2:\n                    message.hash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a PartitionInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.PartitionInfo} PartitionInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PartitionInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PartitionInfo message.\n         * @function verify\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PartitionInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))\n                    return \"size: integer|Long expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                if (!(message.hash && typeof message.hash.length === \"number\" || $util.isString(message.hash)))\n                    return \"hash: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a PartitionInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.PartitionInfo} PartitionInfo\n         */\n        PartitionInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.PartitionInfo)\n                return object;\n            let message = new $root.chromeos_update_engine.PartitionInfo();\n            if (object.size != null)\n                if ($util.Long)\n                    (message.size = $util.Long.fromValue(object.size)).unsigned = true;\n                else if (typeof object.size === \"string\")\n                    message.size = parseInt(object.size, 10);\n                else if (typeof object.size === \"number\")\n                    message.size = object.size;\n                else if (typeof object.size === \"object\")\n                    message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber(true);\n            if (object.hash != null)\n                if (typeof object.hash === \"string\")\n                    $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);\n                else if (object.hash.length)\n                    message.hash = object.hash;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a PartitionInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {chromeos_update_engine.PartitionInfo} message PartitionInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PartitionInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.size = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.hash = \"\";\n                else {\n                    object.hash = [];\n                    if (options.bytes !== Array)\n                        object.hash = $util.newBuffer(object.hash);\n                }\n            }\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (typeof message.size === \"number\")\n                    object.size = options.longs === String ? String(message.size) : message.size;\n                else\n                    object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber(true) : message.size;\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;\n            return object;\n        };\n\n        /**\n         * Converts this PartitionInfo to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PartitionInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return PartitionInfo;\n    })();\n\n    chromeos_update_engine.ImageInfo = (function() {\n\n        /**\n         * Properties of an ImageInfo.\n         * @memberof chromeos_update_engine\n         * @interface IImageInfo\n         * @property {string|null} [board] ImageInfo board\n         * @property {string|null} [key] ImageInfo key\n         * @property {string|null} [channel] ImageInfo channel\n         * @property {string|null} [version] ImageInfo version\n         * @property {string|null} [buildChannel] ImageInfo buildChannel\n         * @property {string|null} [buildVersion] ImageInfo buildVersion\n         */\n\n        /**\n         * Constructs a new ImageInfo.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents an ImageInfo.\n         * @implements IImageInfo\n         * @constructor\n         * @param {chromeos_update_engine.IImageInfo=} [properties] Properties to set\n         */\n        function ImageInfo(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ImageInfo board.\n         * @member {string} board\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         */\n        ImageInfo.prototype.board = \"\";\n\n        /**\n         * ImageInfo key.\n         * @member {string} key\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         */\n        ImageInfo.prototype.key = \"\";\n\n        /**\n         * ImageInfo channel.\n         * @member {string} channel\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         */\n        ImageInfo.prototype.channel = \"\";\n\n        /**\n         * ImageInfo version.\n         * @member {string} version\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         */\n        ImageInfo.prototype.version = \"\";\n\n        /**\n         * ImageInfo buildChannel.\n         * @member {string} buildChannel\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         */\n        ImageInfo.prototype.buildChannel = \"\";\n\n        /**\n         * ImageInfo buildVersion.\n         * @member {string} buildVersion\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         */\n        ImageInfo.prototype.buildVersion = \"\";\n\n        /**\n         * Creates a new ImageInfo instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {chromeos_update_engine.IImageInfo=} [properties] Properties to set\n         * @returns {chromeos_update_engine.ImageInfo} ImageInfo instance\n         */\n        ImageInfo.create = function create(properties) {\n            return new ImageInfo(properties);\n        };\n\n        /**\n         * Encodes the specified ImageInfo message. Does not implicitly {@link chromeos_update_engine.ImageInfo.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {chromeos_update_engine.IImageInfo} message ImageInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ImageInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.board != null && Object.hasOwnProperty.call(message, \"board\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.board);\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.key);\n            if (message.channel != null && Object.hasOwnProperty.call(message, \"channel\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.channel);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.version);\n            if (message.buildChannel != null && Object.hasOwnProperty.call(message, \"buildChannel\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.buildChannel);\n            if (message.buildVersion != null && Object.hasOwnProperty.call(message, \"buildVersion\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.buildVersion);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ImageInfo message, length delimited. Does not implicitly {@link chromeos_update_engine.ImageInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {chromeos_update_engine.IImageInfo} message ImageInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ImageInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ImageInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.ImageInfo} ImageInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ImageInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.ImageInfo();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.board = reader.string();\n                    break;\n                case 2:\n                    message.key = reader.string();\n                    break;\n                case 3:\n                    message.channel = reader.string();\n                    break;\n                case 4:\n                    message.version = reader.string();\n                    break;\n                case 5:\n                    message.buildChannel = reader.string();\n                    break;\n                case 6:\n                    message.buildVersion = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an ImageInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.ImageInfo} ImageInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ImageInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ImageInfo message.\n         * @function verify\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ImageInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.board != null && message.hasOwnProperty(\"board\"))\n                if (!$util.isString(message.board))\n                    return \"board: string expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.channel != null && message.hasOwnProperty(\"channel\"))\n                if (!$util.isString(message.channel))\n                    return \"channel: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isString(message.version))\n                    return \"version: string expected\";\n            if (message.buildChannel != null && message.hasOwnProperty(\"buildChannel\"))\n                if (!$util.isString(message.buildChannel))\n                    return \"buildChannel: string expected\";\n            if (message.buildVersion != null && message.hasOwnProperty(\"buildVersion\"))\n                if (!$util.isString(message.buildVersion))\n                    return \"buildVersion: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an ImageInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.ImageInfo} ImageInfo\n         */\n        ImageInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.ImageInfo)\n                return object;\n            let message = new $root.chromeos_update_engine.ImageInfo();\n            if (object.board != null)\n                message.board = String(object.board);\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.channel != null)\n                message.channel = String(object.channel);\n            if (object.version != null)\n                message.version = String(object.version);\n            if (object.buildChannel != null)\n                message.buildChannel = String(object.buildChannel);\n            if (object.buildVersion != null)\n                message.buildVersion = String(object.buildVersion);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ImageInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {chromeos_update_engine.ImageInfo} message ImageInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ImageInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.board = \"\";\n                object.key = \"\";\n                object.channel = \"\";\n                object.version = \"\";\n                object.buildChannel = \"\";\n                object.buildVersion = \"\";\n            }\n            if (message.board != null && message.hasOwnProperty(\"board\"))\n                object.board = message.board;\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.channel != null && message.hasOwnProperty(\"channel\"))\n                object.channel = message.channel;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                object.version = message.version;\n            if (message.buildChannel != null && message.hasOwnProperty(\"buildChannel\"))\n                object.buildChannel = message.buildChannel;\n            if (message.buildVersion != null && message.hasOwnProperty(\"buildVersion\"))\n                object.buildVersion = message.buildVersion;\n            return object;\n        };\n\n        /**\n         * Converts this ImageInfo to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ImageInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ImageInfo;\n    })();\n\n    chromeos_update_engine.InstallOperation = (function() {\n\n        /**\n         * Properties of an InstallOperation.\n         * @memberof chromeos_update_engine\n         * @interface IInstallOperation\n         * @property {chromeos_update_engine.InstallOperation.Type} type InstallOperation type\n         * @property {number|Long|null} [dataOffset] InstallOperation dataOffset\n         * @property {number|Long|null} [dataLength] InstallOperation dataLength\n         * @property {Array.<chromeos_update_engine.IExtent>|null} [srcExtents] InstallOperation srcExtents\n         * @property {number|Long|null} [srcLength] InstallOperation srcLength\n         * @property {Array.<chromeos_update_engine.IExtent>|null} [dstExtents] InstallOperation dstExtents\n         * @property {number|Long|null} [dstLength] InstallOperation dstLength\n         * @property {Uint8Array|null} [dataSha256Hash] InstallOperation dataSha256Hash\n         * @property {Uint8Array|null} [srcSha256Hash] InstallOperation srcSha256Hash\n         * @property {Object.<string,number>|null} [xorMap] InstallOperation xorMap\n         */\n\n        /**\n         * Constructs a new InstallOperation.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents an InstallOperation.\n         * @implements IInstallOperation\n         * @constructor\n         * @param {chromeos_update_engine.IInstallOperation=} [properties] Properties to set\n         */\n        function InstallOperation(properties) {\n            this.srcExtents = [];\n            this.dstExtents = [];\n            this.xorMap = {};\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * InstallOperation type.\n         * @member {chromeos_update_engine.InstallOperation.Type} type\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.type = 0;\n\n        /**\n         * InstallOperation dataOffset.\n         * @member {number|Long} dataOffset\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dataOffset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * InstallOperation dataLength.\n         * @member {number|Long} dataLength\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dataLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * InstallOperation srcExtents.\n         * @member {Array.<chromeos_update_engine.IExtent>} srcExtents\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.srcExtents = $util.emptyArray;\n\n        /**\n         * InstallOperation srcLength.\n         * @member {number|Long} srcLength\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.srcLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * InstallOperation dstExtents.\n         * @member {Array.<chromeos_update_engine.IExtent>} dstExtents\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dstExtents = $util.emptyArray;\n\n        /**\n         * InstallOperation dstLength.\n         * @member {number|Long} dstLength\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dstLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * InstallOperation dataSha256Hash.\n         * @member {Uint8Array} dataSha256Hash\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dataSha256Hash = $util.newBuffer([]);\n\n        /**\n         * InstallOperation srcSha256Hash.\n         * @member {Uint8Array} srcSha256Hash\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.srcSha256Hash = $util.newBuffer([]);\n\n        /**\n         * InstallOperation xorMap.\n         * @member {Object.<string,number>} xorMap\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.xorMap = $util.emptyObject;\n\n        /**\n         * Creates a new InstallOperation instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {chromeos_update_engine.IInstallOperation=} [properties] Properties to set\n         * @returns {chromeos_update_engine.InstallOperation} InstallOperation instance\n         */\n        InstallOperation.create = function create(properties) {\n            return new InstallOperation(properties);\n        };\n\n        /**\n         * Encodes the specified InstallOperation message. Does not implicitly {@link chromeos_update_engine.InstallOperation.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {chromeos_update_engine.IInstallOperation} message InstallOperation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InstallOperation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);\n            if (message.dataOffset != null && Object.hasOwnProperty.call(message, \"dataOffset\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.dataOffset);\n            if (message.dataLength != null && Object.hasOwnProperty.call(message, \"dataLength\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.dataLength);\n            if (message.srcExtents != null && message.srcExtents.length)\n                for (let i = 0; i < message.srcExtents.length; ++i)\n                    $root.chromeos_update_engine.Extent.encode(message.srcExtents[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.srcLength != null && Object.hasOwnProperty.call(message, \"srcLength\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.srcLength);\n            if (message.dstExtents != null && message.dstExtents.length)\n                for (let i = 0; i < message.dstExtents.length; ++i)\n                    $root.chromeos_update_engine.Extent.encode(message.dstExtents[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.dstLength != null && Object.hasOwnProperty.call(message, \"dstLength\"))\n                writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.dstLength);\n            if (message.dataSha256Hash != null && Object.hasOwnProperty.call(message, \"dataSha256Hash\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.dataSha256Hash);\n            if (message.srcSha256Hash != null && Object.hasOwnProperty.call(message, \"srcSha256Hash\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.srcSha256Hash);\n            if (message.xorMap != null && Object.hasOwnProperty.call(message, \"xorMap\"))\n                for (let keys = Object.keys(message.xorMap), i = 0; i < keys.length; ++i)\n                    writer.uint32(/* id 10, wireType 2 =*/82).fork().uint32(/* id 1, wireType 0 =*/8).uint32(keys[i]).uint32(/* id 2, wireType 0 =*/16).uint32(message.xorMap[keys[i]]).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified InstallOperation message, length delimited. Does not implicitly {@link chromeos_update_engine.InstallOperation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {chromeos_update_engine.IInstallOperation} message InstallOperation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InstallOperation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an InstallOperation message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.InstallOperation} InstallOperation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InstallOperation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.InstallOperation(), key, value;\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.dataOffset = reader.uint64();\n                    break;\n                case 3:\n                    message.dataLength = reader.uint64();\n                    break;\n                case 4:\n                    if (!(message.srcExtents && message.srcExtents.length))\n                        message.srcExtents = [];\n                    message.srcExtents.push($root.chromeos_update_engine.Extent.decode(reader, reader.uint32()));\n                    break;\n                case 5:\n                    message.srcLength = reader.uint64();\n                    break;\n                case 6:\n                    if (!(message.dstExtents && message.dstExtents.length))\n                        message.dstExtents = [];\n                    message.dstExtents.push($root.chromeos_update_engine.Extent.decode(reader, reader.uint32()));\n                    break;\n                case 7:\n                    message.dstLength = reader.uint64();\n                    break;\n                case 8:\n                    message.dataSha256Hash = reader.bytes();\n                    break;\n                case 9:\n                    message.srcSha256Hash = reader.bytes();\n                    break;\n                case 10:\n                    if (message.xorMap === $util.emptyObject)\n                        message.xorMap = {};\n                    let end2 = reader.uint32() + reader.pos;\n                    key = 0;\n                    value = 0;\n                    while (reader.pos < end2) {\n                        let tag2 = reader.uint32();\n                        switch (tag2 >>> 3) {\n                        case 1:\n                            key = reader.uint32();\n                            break;\n                        case 2:\n                            value = reader.uint32();\n                            break;\n                        default:\n                            reader.skipType(tag2 & 7);\n                            break;\n                        }\n                    }\n                    message.xorMap[key] = value;\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            if (!message.hasOwnProperty(\"type\"))\n                throw $util.ProtocolError(\"missing required 'type'\", { instance: message });\n            return message;\n        };\n\n        /**\n         * Decodes an InstallOperation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.InstallOperation} InstallOperation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InstallOperation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an InstallOperation message.\n         * @function verify\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        InstallOperation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            switch (message.type) {\n            default:\n                return \"type: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 8:\n            case 6:\n            case 7:\n            case 10:\n            case 9:\n                break;\n            }\n            if (message.dataOffset != null && message.hasOwnProperty(\"dataOffset\"))\n                if (!$util.isInteger(message.dataOffset) && !(message.dataOffset && $util.isInteger(message.dataOffset.low) && $util.isInteger(message.dataOffset.high)))\n                    return \"dataOffset: integer|Long expected\";\n            if (message.dataLength != null && message.hasOwnProperty(\"dataLength\"))\n                if (!$util.isInteger(message.dataLength) && !(message.dataLength && $util.isInteger(message.dataLength.low) && $util.isInteger(message.dataLength.high)))\n                    return \"dataLength: integer|Long expected\";\n            if (message.srcExtents != null && message.hasOwnProperty(\"srcExtents\")) {\n                if (!Array.isArray(message.srcExtents))\n                    return \"srcExtents: array expected\";\n                for (let i = 0; i < message.srcExtents.length; ++i) {\n                    let error = $root.chromeos_update_engine.Extent.verify(message.srcExtents[i]);\n                    if (error)\n                        return \"srcExtents.\" + error;\n                }\n            }\n            if (message.srcLength != null && message.hasOwnProperty(\"srcLength\"))\n                if (!$util.isInteger(message.srcLength) && !(message.srcLength && $util.isInteger(message.srcLength.low) && $util.isInteger(message.srcLength.high)))\n                    return \"srcLength: integer|Long expected\";\n            if (message.dstExtents != null && message.hasOwnProperty(\"dstExtents\")) {\n                if (!Array.isArray(message.dstExtents))\n                    return \"dstExtents: array expected\";\n                for (let i = 0; i < message.dstExtents.length; ++i) {\n                    let error = $root.chromeos_update_engine.Extent.verify(message.dstExtents[i]);\n                    if (error)\n                        return \"dstExtents.\" + error;\n                }\n            }\n            if (message.dstLength != null && message.hasOwnProperty(\"dstLength\"))\n                if (!$util.isInteger(message.dstLength) && !(message.dstLength && $util.isInteger(message.dstLength.low) && $util.isInteger(message.dstLength.high)))\n                    return \"dstLength: integer|Long expected\";\n            if (message.dataSha256Hash != null && message.hasOwnProperty(\"dataSha256Hash\"))\n                if (!(message.dataSha256Hash && typeof message.dataSha256Hash.length === \"number\" || $util.isString(message.dataSha256Hash)))\n                    return \"dataSha256Hash: buffer expected\";\n            if (message.srcSha256Hash != null && message.hasOwnProperty(\"srcSha256Hash\"))\n                if (!(message.srcSha256Hash && typeof message.srcSha256Hash.length === \"number\" || $util.isString(message.srcSha256Hash)))\n                    return \"srcSha256Hash: buffer expected\";\n            if (message.xorMap != null && message.hasOwnProperty(\"xorMap\")) {\n                if (!$util.isObject(message.xorMap))\n                    return \"xorMap: object expected\";\n                let key = Object.keys(message.xorMap);\n                for (let i = 0; i < key.length; ++i) {\n                    if (!$util.key32Re.test(key[i]))\n                        return \"xorMap: integer key{k:uint32} expected\";\n                    if (!$util.isInteger(message.xorMap[key[i]]))\n                        return \"xorMap: integer{k:uint32} expected\";\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an InstallOperation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.InstallOperation} InstallOperation\n         */\n        InstallOperation.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.InstallOperation)\n                return object;\n            let message = new $root.chromeos_update_engine.InstallOperation();\n            switch (object.type) {\n            case \"REPLACE\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"REPLACE_BZ\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"MOVE\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"BSDIFF\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"SOURCE_COPY\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"SOURCE_BSDIFF\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"REPLACE_XZ\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"ZERO\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"DISCARD\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"BROTLI_BSDIFF\":\n            case 10:\n                message.type = 10;\n                break;\n            case \"PUFFDIFF\":\n            case 9:\n                message.type = 9;\n                break;\n            }\n            if (object.dataOffset != null)\n                if ($util.Long)\n                    (message.dataOffset = $util.Long.fromValue(object.dataOffset)).unsigned = true;\n                else if (typeof object.dataOffset === \"string\")\n                    message.dataOffset = parseInt(object.dataOffset, 10);\n                else if (typeof object.dataOffset === \"number\")\n                    message.dataOffset = object.dataOffset;\n                else if (typeof object.dataOffset === \"object\")\n                    message.dataOffset = new $util.LongBits(object.dataOffset.low >>> 0, object.dataOffset.high >>> 0).toNumber(true);\n            if (object.dataLength != null)\n                if ($util.Long)\n                    (message.dataLength = $util.Long.fromValue(object.dataLength)).unsigned = true;\n                else if (typeof object.dataLength === \"string\")\n                    message.dataLength = parseInt(object.dataLength, 10);\n                else if (typeof object.dataLength === \"number\")\n                    message.dataLength = object.dataLength;\n                else if (typeof object.dataLength === \"object\")\n                    message.dataLength = new $util.LongBits(object.dataLength.low >>> 0, object.dataLength.high >>> 0).toNumber(true);\n            if (object.srcExtents) {\n                if (!Array.isArray(object.srcExtents))\n                    throw TypeError(\".chromeos_update_engine.InstallOperation.srcExtents: array expected\");\n                message.srcExtents = [];\n                for (let i = 0; i < object.srcExtents.length; ++i) {\n                    if (typeof object.srcExtents[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.InstallOperation.srcExtents: object expected\");\n                    message.srcExtents[i] = $root.chromeos_update_engine.Extent.fromObject(object.srcExtents[i]);\n                }\n            }\n            if (object.srcLength != null)\n                if ($util.Long)\n                    (message.srcLength = $util.Long.fromValue(object.srcLength)).unsigned = true;\n                else if (typeof object.srcLength === \"string\")\n                    message.srcLength = parseInt(object.srcLength, 10);\n                else if (typeof object.srcLength === \"number\")\n                    message.srcLength = object.srcLength;\n                else if (typeof object.srcLength === \"object\")\n                    message.srcLength = new $util.LongBits(object.srcLength.low >>> 0, object.srcLength.high >>> 0).toNumber(true);\n            if (object.dstExtents) {\n                if (!Array.isArray(object.dstExtents))\n                    throw TypeError(\".chromeos_update_engine.InstallOperation.dstExtents: array expected\");\n                message.dstExtents = [];\n                for (let i = 0; i < object.dstExtents.length; ++i) {\n                    if (typeof object.dstExtents[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.InstallOperation.dstExtents: object expected\");\n                    message.dstExtents[i] = $root.chromeos_update_engine.Extent.fromObject(object.dstExtents[i]);\n                }\n            }\n            if (object.dstLength != null)\n                if ($util.Long)\n                    (message.dstLength = $util.Long.fromValue(object.dstLength)).unsigned = true;\n                else if (typeof object.dstLength === \"string\")\n                    message.dstLength = parseInt(object.dstLength, 10);\n                else if (typeof object.dstLength === \"number\")\n                    message.dstLength = object.dstLength;\n                else if (typeof object.dstLength === \"object\")\n                    message.dstLength = new $util.LongBits(object.dstLength.low >>> 0, object.dstLength.high >>> 0).toNumber(true);\n            if (object.dataSha256Hash != null)\n                if (typeof object.dataSha256Hash === \"string\")\n                    $util.base64.decode(object.dataSha256Hash, message.dataSha256Hash = $util.newBuffer($util.base64.length(object.dataSha256Hash)), 0);\n                else if (object.dataSha256Hash.length)\n                    message.dataSha256Hash = object.dataSha256Hash;\n            if (object.srcSha256Hash != null)\n                if (typeof object.srcSha256Hash === \"string\")\n                    $util.base64.decode(object.srcSha256Hash, message.srcSha256Hash = $util.newBuffer($util.base64.length(object.srcSha256Hash)), 0);\n                else if (object.srcSha256Hash.length)\n                    message.srcSha256Hash = object.srcSha256Hash;\n            if (object.xorMap) {\n                if (typeof object.xorMap !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.InstallOperation.xorMap: object expected\");\n                message.xorMap = {};\n                for (let keys = Object.keys(object.xorMap), i = 0; i < keys.length; ++i)\n                    message.xorMap[keys[i]] = object.xorMap[keys[i]] >>> 0;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an InstallOperation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {chromeos_update_engine.InstallOperation} message InstallOperation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        InstallOperation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.srcExtents = [];\n                object.dstExtents = [];\n            }\n            if (options.objects || options.defaults)\n                object.xorMap = {};\n            if (options.defaults) {\n                object.type = options.enums === String ? \"REPLACE\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.dataOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.dataOffset = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.dataLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.dataLength = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.srcLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.srcLength = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.dstLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.dstLength = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.dataSha256Hash = \"\";\n                else {\n                    object.dataSha256Hash = [];\n                    if (options.bytes !== Array)\n                        object.dataSha256Hash = $util.newBuffer(object.dataSha256Hash);\n                }\n                if (options.bytes === String)\n                    object.srcSha256Hash = \"\";\n                else {\n                    object.srcSha256Hash = [];\n                    if (options.bytes !== Array)\n                        object.srcSha256Hash = $util.newBuffer(object.srcSha256Hash);\n                }\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.chromeos_update_engine.InstallOperation.Type[message.type] : message.type;\n            if (message.dataOffset != null && message.hasOwnProperty(\"dataOffset\"))\n                if (typeof message.dataOffset === \"number\")\n                    object.dataOffset = options.longs === String ? String(message.dataOffset) : message.dataOffset;\n                else\n                    object.dataOffset = options.longs === String ? $util.Long.prototype.toString.call(message.dataOffset) : options.longs === Number ? new $util.LongBits(message.dataOffset.low >>> 0, message.dataOffset.high >>> 0).toNumber(true) : message.dataOffset;\n            if (message.dataLength != null && message.hasOwnProperty(\"dataLength\"))\n                if (typeof message.dataLength === \"number\")\n                    object.dataLength = options.longs === String ? String(message.dataLength) : message.dataLength;\n                else\n                    object.dataLength = options.longs === String ? $util.Long.prototype.toString.call(message.dataLength) : options.longs === Number ? new $util.LongBits(message.dataLength.low >>> 0, message.dataLength.high >>> 0).toNumber(true) : message.dataLength;\n            if (message.srcExtents && message.srcExtents.length) {\n                object.srcExtents = [];\n                for (let j = 0; j < message.srcExtents.length; ++j)\n                    object.srcExtents[j] = $root.chromeos_update_engine.Extent.toObject(message.srcExtents[j], options);\n            }\n            if (message.srcLength != null && message.hasOwnProperty(\"srcLength\"))\n                if (typeof message.srcLength === \"number\")\n                    object.srcLength = options.longs === String ? String(message.srcLength) : message.srcLength;\n                else\n                    object.srcLength = options.longs === String ? $util.Long.prototype.toString.call(message.srcLength) : options.longs === Number ? new $util.LongBits(message.srcLength.low >>> 0, message.srcLength.high >>> 0).toNumber(true) : message.srcLength;\n            if (message.dstExtents && message.dstExtents.length) {\n                object.dstExtents = [];\n                for (let j = 0; j < message.dstExtents.length; ++j)\n                    object.dstExtents[j] = $root.chromeos_update_engine.Extent.toObject(message.dstExtents[j], options);\n            }\n            if (message.dstLength != null && message.hasOwnProperty(\"dstLength\"))\n                if (typeof message.dstLength === \"number\")\n                    object.dstLength = options.longs === String ? String(message.dstLength) : message.dstLength;\n                else\n                    object.dstLength = options.longs === String ? $util.Long.prototype.toString.call(message.dstLength) : options.longs === Number ? new $util.LongBits(message.dstLength.low >>> 0, message.dstLength.high >>> 0).toNumber(true) : message.dstLength;\n            if (message.dataSha256Hash != null && message.hasOwnProperty(\"dataSha256Hash\"))\n                object.dataSha256Hash = options.bytes === String ? $util.base64.encode(message.dataSha256Hash, 0, message.dataSha256Hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.dataSha256Hash) : message.dataSha256Hash;\n            if (message.srcSha256Hash != null && message.hasOwnProperty(\"srcSha256Hash\"))\n                object.srcSha256Hash = options.bytes === String ? $util.base64.encode(message.srcSha256Hash, 0, message.srcSha256Hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.srcSha256Hash) : message.srcSha256Hash;\n            let keys2;\n            if (message.xorMap && (keys2 = Object.keys(message.xorMap)).length) {\n                object.xorMap = {};\n                for (let j = 0; j < keys2.length; ++j)\n                    object.xorMap[keys2[j]] = message.xorMap[keys2[j]];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this InstallOperation to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        InstallOperation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Type enum.\n         * @name chromeos_update_engine.InstallOperation.Type\n         * @enum {number}\n         * @property {number} REPLACE=0 REPLACE value\n         * @property {number} REPLACE_BZ=1 REPLACE_BZ value\n         * @property {number} MOVE=2 MOVE value\n         * @property {number} BSDIFF=3 BSDIFF value\n         * @property {number} SOURCE_COPY=4 SOURCE_COPY value\n         * @property {number} SOURCE_BSDIFF=5 SOURCE_BSDIFF value\n         * @property {number} REPLACE_XZ=8 REPLACE_XZ value\n         * @property {number} ZERO=6 ZERO value\n         * @property {number} DISCARD=7 DISCARD value\n         * @property {number} BROTLI_BSDIFF=10 BROTLI_BSDIFF value\n         * @property {number} PUFFDIFF=9 PUFFDIFF value\n         */\n        InstallOperation.Type = (function() {\n            const valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"REPLACE\"] = 0;\n            values[valuesById[1] = \"REPLACE_BZ\"] = 1;\n            values[valuesById[2] = \"MOVE\"] = 2;\n            values[valuesById[3] = \"BSDIFF\"] = 3;\n            values[valuesById[4] = \"SOURCE_COPY\"] = 4;\n            values[valuesById[5] = \"SOURCE_BSDIFF\"] = 5;\n            values[valuesById[8] = \"REPLACE_XZ\"] = 8;\n            values[valuesById[6] = \"ZERO\"] = 6;\n            values[valuesById[7] = \"DISCARD\"] = 7;\n            values[valuesById[10] = \"BROTLI_BSDIFF\"] = 10;\n            values[valuesById[9] = \"PUFFDIFF\"] = 9;\n            return values;\n        })();\n\n        return InstallOperation;\n    })();\n\n    chromeos_update_engine.CowMergeOperation = (function() {\n\n        /**\n         * Properties of a CowMergeOperation.\n         * @memberof chromeos_update_engine\n         * @interface ICowMergeOperation\n         * @property {chromeos_update_engine.CowMergeOperation.Type|null} [type] CowMergeOperation type\n         * @property {chromeos_update_engine.IExtent|null} [srcExtent] CowMergeOperation srcExtent\n         * @property {chromeos_update_engine.IExtent|null} [dstExtent] CowMergeOperation dstExtent\n         * @property {number|Long|null} [srcOffset] CowMergeOperation srcOffset\n         */\n\n        /**\n         * Constructs a new CowMergeOperation.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a CowMergeOperation.\n         * @implements ICowMergeOperation\n         * @constructor\n         * @param {chromeos_update_engine.ICowMergeOperation=} [properties] Properties to set\n         */\n        function CowMergeOperation(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CowMergeOperation type.\n         * @member {chromeos_update_engine.CowMergeOperation.Type} type\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         */\n        CowMergeOperation.prototype.type = 0;\n\n        /**\n         * CowMergeOperation srcExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} srcExtent\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         */\n        CowMergeOperation.prototype.srcExtent = null;\n\n        /**\n         * CowMergeOperation dstExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} dstExtent\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         */\n        CowMergeOperation.prototype.dstExtent = null;\n\n        /**\n         * CowMergeOperation srcOffset.\n         * @member {number|Long} srcOffset\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         */\n        CowMergeOperation.prototype.srcOffset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new CowMergeOperation instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {chromeos_update_engine.ICowMergeOperation=} [properties] Properties to set\n         * @returns {chromeos_update_engine.CowMergeOperation} CowMergeOperation instance\n         */\n        CowMergeOperation.create = function create(properties) {\n            return new CowMergeOperation(properties);\n        };\n\n        /**\n         * Encodes the specified CowMergeOperation message. Does not implicitly {@link chromeos_update_engine.CowMergeOperation.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {chromeos_update_engine.ICowMergeOperation} message CowMergeOperation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CowMergeOperation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);\n            if (message.srcExtent != null && Object.hasOwnProperty.call(message, \"srcExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.srcExtent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.dstExtent != null && Object.hasOwnProperty.call(message, \"dstExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.dstExtent, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.srcOffset != null && Object.hasOwnProperty.call(message, \"srcOffset\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.srcOffset);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CowMergeOperation message, length delimited. Does not implicitly {@link chromeos_update_engine.CowMergeOperation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {chromeos_update_engine.ICowMergeOperation} message CowMergeOperation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CowMergeOperation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CowMergeOperation message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.CowMergeOperation} CowMergeOperation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CowMergeOperation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.CowMergeOperation();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.srcExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.dstExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.srcOffset = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CowMergeOperation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.CowMergeOperation} CowMergeOperation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CowMergeOperation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CowMergeOperation message.\n         * @function verify\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CowMergeOperation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n                }\n            if (message.srcExtent != null && message.hasOwnProperty(\"srcExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.srcExtent);\n                if (error)\n                    return \"srcExtent.\" + error;\n            }\n            if (message.dstExtent != null && message.hasOwnProperty(\"dstExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.dstExtent);\n                if (error)\n                    return \"dstExtent.\" + error;\n            }\n            if (message.srcOffset != null && message.hasOwnProperty(\"srcOffset\"))\n                if (!$util.isInteger(message.srcOffset) && !(message.srcOffset && $util.isInteger(message.srcOffset.low) && $util.isInteger(message.srcOffset.high)))\n                    return \"srcOffset: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a CowMergeOperation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.CowMergeOperation} CowMergeOperation\n         */\n        CowMergeOperation.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.CowMergeOperation)\n                return object;\n            let message = new $root.chromeos_update_engine.CowMergeOperation();\n            switch (object.type) {\n            case \"COW_COPY\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"COW_XOR\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"COW_REPLACE\":\n            case 2:\n                message.type = 2;\n                break;\n            }\n            if (object.srcExtent != null) {\n                if (typeof object.srcExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.CowMergeOperation.srcExtent: object expected\");\n                message.srcExtent = $root.chromeos_update_engine.Extent.fromObject(object.srcExtent);\n            }\n            if (object.dstExtent != null) {\n                if (typeof object.dstExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.CowMergeOperation.dstExtent: object expected\");\n                message.dstExtent = $root.chromeos_update_engine.Extent.fromObject(object.dstExtent);\n            }\n            if (object.srcOffset != null)\n                if ($util.Long)\n                    (message.srcOffset = $util.Long.fromValue(object.srcOffset)).unsigned = true;\n                else if (typeof object.srcOffset === \"string\")\n                    message.srcOffset = parseInt(object.srcOffset, 10);\n                else if (typeof object.srcOffset === \"number\")\n                    message.srcOffset = object.srcOffset;\n                else if (typeof object.srcOffset === \"object\")\n                    message.srcOffset = new $util.LongBits(object.srcOffset.low >>> 0, object.srcOffset.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CowMergeOperation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {chromeos_update_engine.CowMergeOperation} message CowMergeOperation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CowMergeOperation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.type = options.enums === String ? \"COW_COPY\" : 0;\n                object.srcExtent = null;\n                object.dstExtent = null;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.srcOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.srcOffset = options.longs === String ? \"0\" : 0;\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.chromeos_update_engine.CowMergeOperation.Type[message.type] : message.type;\n            if (message.srcExtent != null && message.hasOwnProperty(\"srcExtent\"))\n                object.srcExtent = $root.chromeos_update_engine.Extent.toObject(message.srcExtent, options);\n            if (message.dstExtent != null && message.hasOwnProperty(\"dstExtent\"))\n                object.dstExtent = $root.chromeos_update_engine.Extent.toObject(message.dstExtent, options);\n            if (message.srcOffset != null && message.hasOwnProperty(\"srcOffset\"))\n                if (typeof message.srcOffset === \"number\")\n                    object.srcOffset = options.longs === String ? String(message.srcOffset) : message.srcOffset;\n                else\n                    object.srcOffset = options.longs === String ? $util.Long.prototype.toString.call(message.srcOffset) : options.longs === Number ? new $util.LongBits(message.srcOffset.low >>> 0, message.srcOffset.high >>> 0).toNumber(true) : message.srcOffset;\n            return object;\n        };\n\n        /**\n         * Converts this CowMergeOperation to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CowMergeOperation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Type enum.\n         * @name chromeos_update_engine.CowMergeOperation.Type\n         * @enum {number}\n         * @property {number} COW_COPY=0 COW_COPY value\n         * @property {number} COW_XOR=1 COW_XOR value\n         * @property {number} COW_REPLACE=2 COW_REPLACE value\n         */\n        CowMergeOperation.Type = (function() {\n            const valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"COW_COPY\"] = 0;\n            values[valuesById[1] = \"COW_XOR\"] = 1;\n            values[valuesById[2] = \"COW_REPLACE\"] = 2;\n            return values;\n        })();\n\n        return CowMergeOperation;\n    })();\n\n    chromeos_update_engine.PartitionUpdate = (function() {\n\n        /**\n         * Properties of a PartitionUpdate.\n         * @memberof chromeos_update_engine\n         * @interface IPartitionUpdate\n         * @property {string} partitionName PartitionUpdate partitionName\n         * @property {boolean|null} [runPostinstall] PartitionUpdate runPostinstall\n         * @property {string|null} [postinstallPath] PartitionUpdate postinstallPath\n         * @property {string|null} [filesystemType] PartitionUpdate filesystemType\n         * @property {Array.<chromeos_update_engine.Signatures.ISignature>|null} [newPartitionSignature] PartitionUpdate newPartitionSignature\n         * @property {chromeos_update_engine.IPartitionInfo|null} [oldPartitionInfo] PartitionUpdate oldPartitionInfo\n         * @property {chromeos_update_engine.IPartitionInfo|null} [newPartitionInfo] PartitionUpdate newPartitionInfo\n         * @property {Array.<chromeos_update_engine.IInstallOperation>|null} [operations] PartitionUpdate operations\n         * @property {boolean|null} [postinstallOptional] PartitionUpdate postinstallOptional\n         * @property {chromeos_update_engine.IExtent|null} [hashTreeDataExtent] PartitionUpdate hashTreeDataExtent\n         * @property {chromeos_update_engine.IExtent|null} [hashTreeExtent] PartitionUpdate hashTreeExtent\n         * @property {string|null} [hashTreeAlgorithm] PartitionUpdate hashTreeAlgorithm\n         * @property {Uint8Array|null} [hashTreeSalt] PartitionUpdate hashTreeSalt\n         * @property {chromeos_update_engine.IExtent|null} [fecDataExtent] PartitionUpdate fecDataExtent\n         * @property {chromeos_update_engine.IExtent|null} [fecExtent] PartitionUpdate fecExtent\n         * @property {number|null} [fecRoots] PartitionUpdate fecRoots\n         * @property {string|null} [version] PartitionUpdate version\n         * @property {Array.<chromeos_update_engine.ICowMergeOperation>|null} [mergeOperations] PartitionUpdate mergeOperations\n         * @property {number|Long|null} [estimateCowSize] PartitionUpdate estimateCowSize\n         */\n\n        /**\n         * Constructs a new PartitionUpdate.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a PartitionUpdate.\n         * @implements IPartitionUpdate\n         * @constructor\n         * @param {chromeos_update_engine.IPartitionUpdate=} [properties] Properties to set\n         */\n        function PartitionUpdate(properties) {\n            this.newPartitionSignature = [];\n            this.operations = [];\n            this.mergeOperations = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PartitionUpdate partitionName.\n         * @member {string} partitionName\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.partitionName = \"\";\n\n        /**\n         * PartitionUpdate runPostinstall.\n         * @member {boolean} runPostinstall\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.runPostinstall = false;\n\n        /**\n         * PartitionUpdate postinstallPath.\n         * @member {string} postinstallPath\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.postinstallPath = \"\";\n\n        /**\n         * PartitionUpdate filesystemType.\n         * @member {string} filesystemType\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.filesystemType = \"\";\n\n        /**\n         * PartitionUpdate newPartitionSignature.\n         * @member {Array.<chromeos_update_engine.Signatures.ISignature>} newPartitionSignature\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.newPartitionSignature = $util.emptyArray;\n\n        /**\n         * PartitionUpdate oldPartitionInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} oldPartitionInfo\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.oldPartitionInfo = null;\n\n        /**\n         * PartitionUpdate newPartitionInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} newPartitionInfo\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.newPartitionInfo = null;\n\n        /**\n         * PartitionUpdate operations.\n         * @member {Array.<chromeos_update_engine.IInstallOperation>} operations\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.operations = $util.emptyArray;\n\n        /**\n         * PartitionUpdate postinstallOptional.\n         * @member {boolean} postinstallOptional\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.postinstallOptional = false;\n\n        /**\n         * PartitionUpdate hashTreeDataExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} hashTreeDataExtent\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.hashTreeDataExtent = null;\n\n        /**\n         * PartitionUpdate hashTreeExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} hashTreeExtent\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.hashTreeExtent = null;\n\n        /**\n         * PartitionUpdate hashTreeAlgorithm.\n         * @member {string} hashTreeAlgorithm\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.hashTreeAlgorithm = \"\";\n\n        /**\n         * PartitionUpdate hashTreeSalt.\n         * @member {Uint8Array} hashTreeSalt\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.hashTreeSalt = $util.newBuffer([]);\n\n        /**\n         * PartitionUpdate fecDataExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} fecDataExtent\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.fecDataExtent = null;\n\n        /**\n         * PartitionUpdate fecExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} fecExtent\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.fecExtent = null;\n\n        /**\n         * PartitionUpdate fecRoots.\n         * @member {number} fecRoots\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.fecRoots = 2;\n\n        /**\n         * PartitionUpdate version.\n         * @member {string} version\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.version = \"\";\n\n        /**\n         * PartitionUpdate mergeOperations.\n         * @member {Array.<chromeos_update_engine.ICowMergeOperation>} mergeOperations\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.mergeOperations = $util.emptyArray;\n\n        /**\n         * PartitionUpdate estimateCowSize.\n         * @member {number|Long} estimateCowSize\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.estimateCowSize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new PartitionUpdate instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {chromeos_update_engine.IPartitionUpdate=} [properties] Properties to set\n         * @returns {chromeos_update_engine.PartitionUpdate} PartitionUpdate instance\n         */\n        PartitionUpdate.create = function create(properties) {\n            return new PartitionUpdate(properties);\n        };\n\n        /**\n         * Encodes the specified PartitionUpdate message. Does not implicitly {@link chromeos_update_engine.PartitionUpdate.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {chromeos_update_engine.IPartitionUpdate} message PartitionUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PartitionUpdate.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.partitionName);\n            if (message.runPostinstall != null && Object.hasOwnProperty.call(message, \"runPostinstall\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.runPostinstall);\n            if (message.postinstallPath != null && Object.hasOwnProperty.call(message, \"postinstallPath\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.postinstallPath);\n            if (message.filesystemType != null && Object.hasOwnProperty.call(message, \"filesystemType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.filesystemType);\n            if (message.newPartitionSignature != null && message.newPartitionSignature.length)\n                for (let i = 0; i < message.newPartitionSignature.length; ++i)\n                    $root.chromeos_update_engine.Signatures.Signature.encode(message.newPartitionSignature[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.oldPartitionInfo != null && Object.hasOwnProperty.call(message, \"oldPartitionInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.oldPartitionInfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.newPartitionInfo != null && Object.hasOwnProperty.call(message, \"newPartitionInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.newPartitionInfo, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.operations != null && message.operations.length)\n                for (let i = 0; i < message.operations.length; ++i)\n                    $root.chromeos_update_engine.InstallOperation.encode(message.operations[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.postinstallOptional != null && Object.hasOwnProperty.call(message, \"postinstallOptional\"))\n                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.postinstallOptional);\n            if (message.hashTreeDataExtent != null && Object.hasOwnProperty.call(message, \"hashTreeDataExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.hashTreeDataExtent, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.hashTreeExtent != null && Object.hasOwnProperty.call(message, \"hashTreeExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.hashTreeExtent, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.hashTreeAlgorithm != null && Object.hasOwnProperty.call(message, \"hashTreeAlgorithm\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.hashTreeAlgorithm);\n            if (message.hashTreeSalt != null && Object.hasOwnProperty.call(message, \"hashTreeSalt\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).bytes(message.hashTreeSalt);\n            if (message.fecDataExtent != null && Object.hasOwnProperty.call(message, \"fecDataExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.fecDataExtent, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.fecExtent != null && Object.hasOwnProperty.call(message, \"fecExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.fecExtent, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.fecRoots != null && Object.hasOwnProperty.call(message, \"fecRoots\"))\n                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.fecRoots);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 17, wireType 2 =*/138).string(message.version);\n            if (message.mergeOperations != null && message.mergeOperations.length)\n                for (let i = 0; i < message.mergeOperations.length; ++i)\n                    $root.chromeos_update_engine.CowMergeOperation.encode(message.mergeOperations[i], writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n            if (message.estimateCowSize != null && Object.hasOwnProperty.call(message, \"estimateCowSize\"))\n                writer.uint32(/* id 19, wireType 0 =*/152).uint64(message.estimateCowSize);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified PartitionUpdate message, length delimited. Does not implicitly {@link chromeos_update_engine.PartitionUpdate.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {chromeos_update_engine.IPartitionUpdate} message PartitionUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PartitionUpdate.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PartitionUpdate message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.PartitionUpdate} PartitionUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PartitionUpdate.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.PartitionUpdate();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.partitionName = reader.string();\n                    break;\n                case 2:\n                    message.runPostinstall = reader.bool();\n                    break;\n                case 3:\n                    message.postinstallPath = reader.string();\n                    break;\n                case 4:\n                    message.filesystemType = reader.string();\n                    break;\n                case 5:\n                    if (!(message.newPartitionSignature && message.newPartitionSignature.length))\n                        message.newPartitionSignature = [];\n                    message.newPartitionSignature.push($root.chromeos_update_engine.Signatures.Signature.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.oldPartitionInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.newPartitionInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    if (!(message.operations && message.operations.length))\n                        message.operations = [];\n                    message.operations.push($root.chromeos_update_engine.InstallOperation.decode(reader, reader.uint32()));\n                    break;\n                case 9:\n                    message.postinstallOptional = reader.bool();\n                    break;\n                case 10:\n                    message.hashTreeDataExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.hashTreeExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.hashTreeAlgorithm = reader.string();\n                    break;\n                case 13:\n                    message.hashTreeSalt = reader.bytes();\n                    break;\n                case 14:\n                    message.fecDataExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 15:\n                    message.fecExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 16:\n                    message.fecRoots = reader.uint32();\n                    break;\n                case 17:\n                    message.version = reader.string();\n                    break;\n                case 18:\n                    if (!(message.mergeOperations && message.mergeOperations.length))\n                        message.mergeOperations = [];\n                    message.mergeOperations.push($root.chromeos_update_engine.CowMergeOperation.decode(reader, reader.uint32()));\n                    break;\n                case 19:\n                    message.estimateCowSize = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            if (!message.hasOwnProperty(\"partitionName\"))\n                throw $util.ProtocolError(\"missing required 'partitionName'\", { instance: message });\n            return message;\n        };\n\n        /**\n         * Decodes a PartitionUpdate message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.PartitionUpdate} PartitionUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PartitionUpdate.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PartitionUpdate message.\n         * @function verify\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PartitionUpdate.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (!$util.isString(message.partitionName))\n                return \"partitionName: string expected\";\n            if (message.runPostinstall != null && message.hasOwnProperty(\"runPostinstall\"))\n                if (typeof message.runPostinstall !== \"boolean\")\n                    return \"runPostinstall: boolean expected\";\n            if (message.postinstallPath != null && message.hasOwnProperty(\"postinstallPath\"))\n                if (!$util.isString(message.postinstallPath))\n                    return \"postinstallPath: string expected\";\n            if (message.filesystemType != null && message.hasOwnProperty(\"filesystemType\"))\n                if (!$util.isString(message.filesystemType))\n                    return \"filesystemType: string expected\";\n            if (message.newPartitionSignature != null && message.hasOwnProperty(\"newPartitionSignature\")) {\n                if (!Array.isArray(message.newPartitionSignature))\n                    return \"newPartitionSignature: array expected\";\n                for (let i = 0; i < message.newPartitionSignature.length; ++i) {\n                    let error = $root.chromeos_update_engine.Signatures.Signature.verify(message.newPartitionSignature[i]);\n                    if (error)\n                        return \"newPartitionSignature.\" + error;\n                }\n            }\n            if (message.oldPartitionInfo != null && message.hasOwnProperty(\"oldPartitionInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.oldPartitionInfo);\n                if (error)\n                    return \"oldPartitionInfo.\" + error;\n            }\n            if (message.newPartitionInfo != null && message.hasOwnProperty(\"newPartitionInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.newPartitionInfo);\n                if (error)\n                    return \"newPartitionInfo.\" + error;\n            }\n            if (message.operations != null && message.hasOwnProperty(\"operations\")) {\n                if (!Array.isArray(message.operations))\n                    return \"operations: array expected\";\n                for (let i = 0; i < message.operations.length; ++i) {\n                    let error = $root.chromeos_update_engine.InstallOperation.verify(message.operations[i]);\n                    if (error)\n                        return \"operations.\" + error;\n                }\n            }\n            if (message.postinstallOptional != null && message.hasOwnProperty(\"postinstallOptional\"))\n                if (typeof message.postinstallOptional !== \"boolean\")\n                    return \"postinstallOptional: boolean expected\";\n            if (message.hashTreeDataExtent != null && message.hasOwnProperty(\"hashTreeDataExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.hashTreeDataExtent);\n                if (error)\n                    return \"hashTreeDataExtent.\" + error;\n            }\n            if (message.hashTreeExtent != null && message.hasOwnProperty(\"hashTreeExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.hashTreeExtent);\n                if (error)\n                    return \"hashTreeExtent.\" + error;\n            }\n            if (message.hashTreeAlgorithm != null && message.hasOwnProperty(\"hashTreeAlgorithm\"))\n                if (!$util.isString(message.hashTreeAlgorithm))\n                    return \"hashTreeAlgorithm: string expected\";\n            if (message.hashTreeSalt != null && message.hasOwnProperty(\"hashTreeSalt\"))\n                if (!(message.hashTreeSalt && typeof message.hashTreeSalt.length === \"number\" || $util.isString(message.hashTreeSalt)))\n                    return \"hashTreeSalt: buffer expected\";\n            if (message.fecDataExtent != null && message.hasOwnProperty(\"fecDataExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.fecDataExtent);\n                if (error)\n                    return \"fecDataExtent.\" + error;\n            }\n            if (message.fecExtent != null && message.hasOwnProperty(\"fecExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.fecExtent);\n                if (error)\n                    return \"fecExtent.\" + error;\n            }\n            if (message.fecRoots != null && message.hasOwnProperty(\"fecRoots\"))\n                if (!$util.isInteger(message.fecRoots))\n                    return \"fecRoots: integer expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isString(message.version))\n                    return \"version: string expected\";\n            if (message.mergeOperations != null && message.hasOwnProperty(\"mergeOperations\")) {\n                if (!Array.isArray(message.mergeOperations))\n                    return \"mergeOperations: array expected\";\n                for (let i = 0; i < message.mergeOperations.length; ++i) {\n                    let error = $root.chromeos_update_engine.CowMergeOperation.verify(message.mergeOperations[i]);\n                    if (error)\n                        return \"mergeOperations.\" + error;\n                }\n            }\n            if (message.estimateCowSize != null && message.hasOwnProperty(\"estimateCowSize\"))\n                if (!$util.isInteger(message.estimateCowSize) && !(message.estimateCowSize && $util.isInteger(message.estimateCowSize.low) && $util.isInteger(message.estimateCowSize.high)))\n                    return \"estimateCowSize: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a PartitionUpdate message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.PartitionUpdate} PartitionUpdate\n         */\n        PartitionUpdate.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.PartitionUpdate)\n                return object;\n            let message = new $root.chromeos_update_engine.PartitionUpdate();\n            if (object.partitionName != null)\n                message.partitionName = String(object.partitionName);\n            if (object.runPostinstall != null)\n                message.runPostinstall = Boolean(object.runPostinstall);\n            if (object.postinstallPath != null)\n                message.postinstallPath = String(object.postinstallPath);\n            if (object.filesystemType != null)\n                message.filesystemType = String(object.filesystemType);\n            if (object.newPartitionSignature) {\n                if (!Array.isArray(object.newPartitionSignature))\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.newPartitionSignature: array expected\");\n                message.newPartitionSignature = [];\n                for (let i = 0; i < object.newPartitionSignature.length; ++i) {\n                    if (typeof object.newPartitionSignature[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.PartitionUpdate.newPartitionSignature: object expected\");\n                    message.newPartitionSignature[i] = $root.chromeos_update_engine.Signatures.Signature.fromObject(object.newPartitionSignature[i]);\n                }\n            }\n            if (object.oldPartitionInfo != null) {\n                if (typeof object.oldPartitionInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.oldPartitionInfo: object expected\");\n                message.oldPartitionInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.oldPartitionInfo);\n            }\n            if (object.newPartitionInfo != null) {\n                if (typeof object.newPartitionInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.newPartitionInfo: object expected\");\n                message.newPartitionInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.newPartitionInfo);\n            }\n            if (object.operations) {\n                if (!Array.isArray(object.operations))\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.operations: array expected\");\n                message.operations = [];\n                for (let i = 0; i < object.operations.length; ++i) {\n                    if (typeof object.operations[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.PartitionUpdate.operations: object expected\");\n                    message.operations[i] = $root.chromeos_update_engine.InstallOperation.fromObject(object.operations[i]);\n                }\n            }\n            if (object.postinstallOptional != null)\n                message.postinstallOptional = Boolean(object.postinstallOptional);\n            if (object.hashTreeDataExtent != null) {\n                if (typeof object.hashTreeDataExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.hashTreeDataExtent: object expected\");\n                message.hashTreeDataExtent = $root.chromeos_update_engine.Extent.fromObject(object.hashTreeDataExtent);\n            }\n            if (object.hashTreeExtent != null) {\n                if (typeof object.hashTreeExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.hashTreeExtent: object expected\");\n                message.hashTreeExtent = $root.chromeos_update_engine.Extent.fromObject(object.hashTreeExtent);\n            }\n            if (object.hashTreeAlgorithm != null)\n                message.hashTreeAlgorithm = String(object.hashTreeAlgorithm);\n            if (object.hashTreeSalt != null)\n                if (typeof object.hashTreeSalt === \"string\")\n                    $util.base64.decode(object.hashTreeSalt, message.hashTreeSalt = $util.newBuffer($util.base64.length(object.hashTreeSalt)), 0);\n                else if (object.hashTreeSalt.length)\n                    message.hashTreeSalt = object.hashTreeSalt;\n            if (object.fecDataExtent != null) {\n                if (typeof object.fecDataExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.fecDataExtent: object expected\");\n                message.fecDataExtent = $root.chromeos_update_engine.Extent.fromObject(object.fecDataExtent);\n            }\n            if (object.fecExtent != null) {\n                if (typeof object.fecExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.fecExtent: object expected\");\n                message.fecExtent = $root.chromeos_update_engine.Extent.fromObject(object.fecExtent);\n            }\n            if (object.fecRoots != null)\n                message.fecRoots = object.fecRoots >>> 0;\n            if (object.version != null)\n                message.version = String(object.version);\n            if (object.mergeOperations) {\n                if (!Array.isArray(object.mergeOperations))\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.mergeOperations: array expected\");\n                message.mergeOperations = [];\n                for (let i = 0; i < object.mergeOperations.length; ++i) {\n                    if (typeof object.mergeOperations[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.PartitionUpdate.mergeOperations: object expected\");\n                    message.mergeOperations[i] = $root.chromeos_update_engine.CowMergeOperation.fromObject(object.mergeOperations[i]);\n                }\n            }\n            if (object.estimateCowSize != null)\n                if ($util.Long)\n                    (message.estimateCowSize = $util.Long.fromValue(object.estimateCowSize)).unsigned = true;\n                else if (typeof object.estimateCowSize === \"string\")\n                    message.estimateCowSize = parseInt(object.estimateCowSize, 10);\n                else if (typeof object.estimateCowSize === \"number\")\n                    message.estimateCowSize = object.estimateCowSize;\n                else if (typeof object.estimateCowSize === \"object\")\n                    message.estimateCowSize = new $util.LongBits(object.estimateCowSize.low >>> 0, object.estimateCowSize.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a PartitionUpdate message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {chromeos_update_engine.PartitionUpdate} message PartitionUpdate\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PartitionUpdate.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.newPartitionSignature = [];\n                object.operations = [];\n                object.mergeOperations = [];\n            }\n            if (options.defaults) {\n                object.partitionName = \"\";\n                object.runPostinstall = false;\n                object.postinstallPath = \"\";\n                object.filesystemType = \"\";\n                object.oldPartitionInfo = null;\n                object.newPartitionInfo = null;\n                object.postinstallOptional = false;\n                object.hashTreeDataExtent = null;\n                object.hashTreeExtent = null;\n                object.hashTreeAlgorithm = \"\";\n                if (options.bytes === String)\n                    object.hashTreeSalt = \"\";\n                else {\n                    object.hashTreeSalt = [];\n                    if (options.bytes !== Array)\n                        object.hashTreeSalt = $util.newBuffer(object.hashTreeSalt);\n                }\n                object.fecDataExtent = null;\n                object.fecExtent = null;\n                object.fecRoots = 2;\n                object.version = \"\";\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.estimateCowSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.estimateCowSize = options.longs === String ? \"0\" : 0;\n            }\n            if (message.partitionName != null && message.hasOwnProperty(\"partitionName\"))\n                object.partitionName = message.partitionName;\n            if (message.runPostinstall != null && message.hasOwnProperty(\"runPostinstall\"))\n                object.runPostinstall = message.runPostinstall;\n            if (message.postinstallPath != null && message.hasOwnProperty(\"postinstallPath\"))\n                object.postinstallPath = message.postinstallPath;\n            if (message.filesystemType != null && message.hasOwnProperty(\"filesystemType\"))\n                object.filesystemType = message.filesystemType;\n            if (message.newPartitionSignature && message.newPartitionSignature.length) {\n                object.newPartitionSignature = [];\n                for (let j = 0; j < message.newPartitionSignature.length; ++j)\n                    object.newPartitionSignature[j] = $root.chromeos_update_engine.Signatures.Signature.toObject(message.newPartitionSignature[j], options);\n            }\n            if (message.oldPartitionInfo != null && message.hasOwnProperty(\"oldPartitionInfo\"))\n                object.oldPartitionInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.oldPartitionInfo, options);\n            if (message.newPartitionInfo != null && message.hasOwnProperty(\"newPartitionInfo\"))\n                object.newPartitionInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.newPartitionInfo, options);\n            if (message.operations && message.operations.length) {\n                object.operations = [];\n                for (let j = 0; j < message.operations.length; ++j)\n                    object.operations[j] = $root.chromeos_update_engine.InstallOperation.toObject(message.operations[j], options);\n            }\n            if (message.postinstallOptional != null && message.hasOwnProperty(\"postinstallOptional\"))\n                object.postinstallOptional = message.postinstallOptional;\n            if (message.hashTreeDataExtent != null && message.hasOwnProperty(\"hashTreeDataExtent\"))\n                object.hashTreeDataExtent = $root.chromeos_update_engine.Extent.toObject(message.hashTreeDataExtent, options);\n            if (message.hashTreeExtent != null && message.hasOwnProperty(\"hashTreeExtent\"))\n                object.hashTreeExtent = $root.chromeos_update_engine.Extent.toObject(message.hashTreeExtent, options);\n            if (message.hashTreeAlgorithm != null && message.hasOwnProperty(\"hashTreeAlgorithm\"))\n                object.hashTreeAlgorithm = message.hashTreeAlgorithm;\n            if (message.hashTreeSalt != null && message.hasOwnProperty(\"hashTreeSalt\"))\n                object.hashTreeSalt = options.bytes === String ? $util.base64.encode(message.hashTreeSalt, 0, message.hashTreeSalt.length) : options.bytes === Array ? Array.prototype.slice.call(message.hashTreeSalt) : message.hashTreeSalt;\n            if (message.fecDataExtent != null && message.hasOwnProperty(\"fecDataExtent\"))\n                object.fecDataExtent = $root.chromeos_update_engine.Extent.toObject(message.fecDataExtent, options);\n            if (message.fecExtent != null && message.hasOwnProperty(\"fecExtent\"))\n                object.fecExtent = $root.chromeos_update_engine.Extent.toObject(message.fecExtent, options);\n            if (message.fecRoots != null && message.hasOwnProperty(\"fecRoots\"))\n                object.fecRoots = message.fecRoots;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                object.version = message.version;\n            if (message.mergeOperations && message.mergeOperations.length) {\n                object.mergeOperations = [];\n                for (let j = 0; j < message.mergeOperations.length; ++j)\n                    object.mergeOperations[j] = $root.chromeos_update_engine.CowMergeOperation.toObject(message.mergeOperations[j], options);\n            }\n            if (message.estimateCowSize != null && message.hasOwnProperty(\"estimateCowSize\"))\n                if (typeof message.estimateCowSize === \"number\")\n                    object.estimateCowSize = options.longs === String ? String(message.estimateCowSize) : message.estimateCowSize;\n                else\n                    object.estimateCowSize = options.longs === String ? $util.Long.prototype.toString.call(message.estimateCowSize) : options.longs === Number ? new $util.LongBits(message.estimateCowSize.low >>> 0, message.estimateCowSize.high >>> 0).toNumber(true) : message.estimateCowSize;\n            return object;\n        };\n\n        /**\n         * Converts this PartitionUpdate to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PartitionUpdate.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return PartitionUpdate;\n    })();\n\n    chromeos_update_engine.DynamicPartitionGroup = (function() {\n\n        /**\n         * Properties of a DynamicPartitionGroup.\n         * @memberof chromeos_update_engine\n         * @interface IDynamicPartitionGroup\n         * @property {string} name DynamicPartitionGroup name\n         * @property {number|Long|null} [size] DynamicPartitionGroup size\n         * @property {Array.<string>|null} [partitionNames] DynamicPartitionGroup partitionNames\n         */\n\n        /**\n         * Constructs a new DynamicPartitionGroup.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a DynamicPartitionGroup.\n         * @implements IDynamicPartitionGroup\n         * @constructor\n         * @param {chromeos_update_engine.IDynamicPartitionGroup=} [properties] Properties to set\n         */\n        function DynamicPartitionGroup(properties) {\n            this.partitionNames = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DynamicPartitionGroup name.\n         * @member {string} name\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @instance\n         */\n        DynamicPartitionGroup.prototype.name = \"\";\n\n        /**\n         * DynamicPartitionGroup size.\n         * @member {number|Long} size\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @instance\n         */\n        DynamicPartitionGroup.prototype.size = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * DynamicPartitionGroup partitionNames.\n         * @member {Array.<string>} partitionNames\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @instance\n         */\n        DynamicPartitionGroup.prototype.partitionNames = $util.emptyArray;\n\n        /**\n         * Creates a new DynamicPartitionGroup instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionGroup=} [properties] Properties to set\n         * @returns {chromeos_update_engine.DynamicPartitionGroup} DynamicPartitionGroup instance\n         */\n        DynamicPartitionGroup.create = function create(properties) {\n            return new DynamicPartitionGroup(properties);\n        };\n\n        /**\n         * Encodes the specified DynamicPartitionGroup message. Does not implicitly {@link chromeos_update_engine.DynamicPartitionGroup.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionGroup} message DynamicPartitionGroup message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DynamicPartitionGroup.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.size != null && Object.hasOwnProperty.call(message, \"size\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.size);\n            if (message.partitionNames != null && message.partitionNames.length)\n                for (let i = 0; i < message.partitionNames.length; ++i)\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.partitionNames[i]);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified DynamicPartitionGroup message, length delimited. Does not implicitly {@link chromeos_update_engine.DynamicPartitionGroup.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionGroup} message DynamicPartitionGroup message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DynamicPartitionGroup.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DynamicPartitionGroup message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.DynamicPartitionGroup} DynamicPartitionGroup\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DynamicPartitionGroup.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.DynamicPartitionGroup();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.size = reader.uint64();\n                    break;\n                case 3:\n                    if (!(message.partitionNames && message.partitionNames.length))\n                        message.partitionNames = [];\n                    message.partitionNames.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            if (!message.hasOwnProperty(\"name\"))\n                throw $util.ProtocolError(\"missing required 'name'\", { instance: message });\n            return message;\n        };\n\n        /**\n         * Decodes a DynamicPartitionGroup message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.DynamicPartitionGroup} DynamicPartitionGroup\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DynamicPartitionGroup.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DynamicPartitionGroup message.\n         * @function verify\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DynamicPartitionGroup.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))\n                    return \"size: integer|Long expected\";\n            if (message.partitionNames != null && message.hasOwnProperty(\"partitionNames\")) {\n                if (!Array.isArray(message.partitionNames))\n                    return \"partitionNames: array expected\";\n                for (let i = 0; i < message.partitionNames.length; ++i)\n                    if (!$util.isString(message.partitionNames[i]))\n                        return \"partitionNames: string[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a DynamicPartitionGroup message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.DynamicPartitionGroup} DynamicPartitionGroup\n         */\n        DynamicPartitionGroup.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.DynamicPartitionGroup)\n                return object;\n            let message = new $root.chromeos_update_engine.DynamicPartitionGroup();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.size != null)\n                if ($util.Long)\n                    (message.size = $util.Long.fromValue(object.size)).unsigned = true;\n                else if (typeof object.size === \"string\")\n                    message.size = parseInt(object.size, 10);\n                else if (typeof object.size === \"number\")\n                    message.size = object.size;\n                else if (typeof object.size === \"object\")\n                    message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber(true);\n            if (object.partitionNames) {\n                if (!Array.isArray(object.partitionNames))\n                    throw TypeError(\".chromeos_update_engine.DynamicPartitionGroup.partitionNames: array expected\");\n                message.partitionNames = [];\n                for (let i = 0; i < object.partitionNames.length; ++i)\n                    message.partitionNames[i] = String(object.partitionNames[i]);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a DynamicPartitionGroup message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {chromeos_update_engine.DynamicPartitionGroup} message DynamicPartitionGroup\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DynamicPartitionGroup.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.partitionNames = [];\n            if (options.defaults) {\n                object.name = \"\";\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.size = options.longs === String ? \"0\" : 0;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (typeof message.size === \"number\")\n                    object.size = options.longs === String ? String(message.size) : message.size;\n                else\n                    object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber(true) : message.size;\n            if (message.partitionNames && message.partitionNames.length) {\n                object.partitionNames = [];\n                for (let j = 0; j < message.partitionNames.length; ++j)\n                    object.partitionNames[j] = message.partitionNames[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this DynamicPartitionGroup to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DynamicPartitionGroup.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DynamicPartitionGroup;\n    })();\n\n    chromeos_update_engine.DynamicPartitionMetadata = (function() {\n\n        /**\n         * Properties of a DynamicPartitionMetadata.\n         * @memberof chromeos_update_engine\n         * @interface IDynamicPartitionMetadata\n         * @property {Array.<chromeos_update_engine.IDynamicPartitionGroup>|null} [groups] DynamicPartitionMetadata groups\n         * @property {boolean|null} [snapshotEnabled] DynamicPartitionMetadata snapshotEnabled\n         * @property {boolean|null} [vabcEnabled] DynamicPartitionMetadata vabcEnabled\n         * @property {string|null} [vabcCompressionParam] DynamicPartitionMetadata vabcCompressionParam\n         * @property {number|null} [cowVersion] DynamicPartitionMetadata cowVersion\n         */\n\n        /**\n         * Constructs a new DynamicPartitionMetadata.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a DynamicPartitionMetadata.\n         * @implements IDynamicPartitionMetadata\n         * @constructor\n         * @param {chromeos_update_engine.IDynamicPartitionMetadata=} [properties] Properties to set\n         */\n        function DynamicPartitionMetadata(properties) {\n            this.groups = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DynamicPartitionMetadata groups.\n         * @member {Array.<chromeos_update_engine.IDynamicPartitionGroup>} groups\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.groups = $util.emptyArray;\n\n        /**\n         * DynamicPartitionMetadata snapshotEnabled.\n         * @member {boolean} snapshotEnabled\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.snapshotEnabled = false;\n\n        /**\n         * DynamicPartitionMetadata vabcEnabled.\n         * @member {boolean} vabcEnabled\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.vabcEnabled = false;\n\n        /**\n         * DynamicPartitionMetadata vabcCompressionParam.\n         * @member {string} vabcCompressionParam\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.vabcCompressionParam = \"\";\n\n        /**\n         * DynamicPartitionMetadata cowVersion.\n         * @member {number} cowVersion\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.cowVersion = 0;\n\n        /**\n         * Creates a new DynamicPartitionMetadata instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionMetadata=} [properties] Properties to set\n         * @returns {chromeos_update_engine.DynamicPartitionMetadata} DynamicPartitionMetadata instance\n         */\n        DynamicPartitionMetadata.create = function create(properties) {\n            return new DynamicPartitionMetadata(properties);\n        };\n\n        /**\n         * Encodes the specified DynamicPartitionMetadata message. Does not implicitly {@link chromeos_update_engine.DynamicPartitionMetadata.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionMetadata} message DynamicPartitionMetadata message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DynamicPartitionMetadata.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.groups != null && message.groups.length)\n                for (let i = 0; i < message.groups.length; ++i)\n                    $root.chromeos_update_engine.DynamicPartitionGroup.encode(message.groups[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.snapshotEnabled != null && Object.hasOwnProperty.call(message, \"snapshotEnabled\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.snapshotEnabled);\n            if (message.vabcEnabled != null && Object.hasOwnProperty.call(message, \"vabcEnabled\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.vabcEnabled);\n            if (message.vabcCompressionParam != null && Object.hasOwnProperty.call(message, \"vabcCompressionParam\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.vabcCompressionParam);\n            if (message.cowVersion != null && Object.hasOwnProperty.call(message, \"cowVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.cowVersion);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified DynamicPartitionMetadata message, length delimited. Does not implicitly {@link chromeos_update_engine.DynamicPartitionMetadata.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionMetadata} message DynamicPartitionMetadata message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DynamicPartitionMetadata.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DynamicPartitionMetadata message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.DynamicPartitionMetadata} DynamicPartitionMetadata\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DynamicPartitionMetadata.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.DynamicPartitionMetadata();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.groups && message.groups.length))\n                        message.groups = [];\n                    message.groups.push($root.chromeos_update_engine.DynamicPartitionGroup.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.snapshotEnabled = reader.bool();\n                    break;\n                case 3:\n                    message.vabcEnabled = reader.bool();\n                    break;\n                case 4:\n                    message.vabcCompressionParam = reader.string();\n                    break;\n                case 5:\n                    message.cowVersion = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a DynamicPartitionMetadata message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.DynamicPartitionMetadata} DynamicPartitionMetadata\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DynamicPartitionMetadata.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DynamicPartitionMetadata message.\n         * @function verify\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DynamicPartitionMetadata.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.groups != null && message.hasOwnProperty(\"groups\")) {\n                if (!Array.isArray(message.groups))\n                    return \"groups: array expected\";\n                for (let i = 0; i < message.groups.length; ++i) {\n                    let error = $root.chromeos_update_engine.DynamicPartitionGroup.verify(message.groups[i]);\n                    if (error)\n                        return \"groups.\" + error;\n                }\n            }\n            if (message.snapshotEnabled != null && message.hasOwnProperty(\"snapshotEnabled\"))\n                if (typeof message.snapshotEnabled !== \"boolean\")\n                    return \"snapshotEnabled: boolean expected\";\n            if (message.vabcEnabled != null && message.hasOwnProperty(\"vabcEnabled\"))\n                if (typeof message.vabcEnabled !== \"boolean\")\n                    return \"vabcEnabled: boolean expected\";\n            if (message.vabcCompressionParam != null && message.hasOwnProperty(\"vabcCompressionParam\"))\n                if (!$util.isString(message.vabcCompressionParam))\n                    return \"vabcCompressionParam: string expected\";\n            if (message.cowVersion != null && message.hasOwnProperty(\"cowVersion\"))\n                if (!$util.isInteger(message.cowVersion))\n                    return \"cowVersion: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a DynamicPartitionMetadata message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.DynamicPartitionMetadata} DynamicPartitionMetadata\n         */\n        DynamicPartitionMetadata.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.DynamicPartitionMetadata)\n                return object;\n            let message = new $root.chromeos_update_engine.DynamicPartitionMetadata();\n            if (object.groups) {\n                if (!Array.isArray(object.groups))\n                    throw TypeError(\".chromeos_update_engine.DynamicPartitionMetadata.groups: array expected\");\n                message.groups = [];\n                for (let i = 0; i < object.groups.length; ++i) {\n                    if (typeof object.groups[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.DynamicPartitionMetadata.groups: object expected\");\n                    message.groups[i] = $root.chromeos_update_engine.DynamicPartitionGroup.fromObject(object.groups[i]);\n                }\n            }\n            if (object.snapshotEnabled != null)\n                message.snapshotEnabled = Boolean(object.snapshotEnabled);\n            if (object.vabcEnabled != null)\n                message.vabcEnabled = Boolean(object.vabcEnabled);\n            if (object.vabcCompressionParam != null)\n                message.vabcCompressionParam = String(object.vabcCompressionParam);\n            if (object.cowVersion != null)\n                message.cowVersion = object.cowVersion >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a DynamicPartitionMetadata message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {chromeos_update_engine.DynamicPartitionMetadata} message DynamicPartitionMetadata\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DynamicPartitionMetadata.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.groups = [];\n            if (options.defaults) {\n                object.snapshotEnabled = false;\n                object.vabcEnabled = false;\n                object.vabcCompressionParam = \"\";\n                object.cowVersion = 0;\n            }\n            if (message.groups && message.groups.length) {\n                object.groups = [];\n                for (let j = 0; j < message.groups.length; ++j)\n                    object.groups[j] = $root.chromeos_update_engine.DynamicPartitionGroup.toObject(message.groups[j], options);\n            }\n            if (message.snapshotEnabled != null && message.hasOwnProperty(\"snapshotEnabled\"))\n                object.snapshotEnabled = message.snapshotEnabled;\n            if (message.vabcEnabled != null && message.hasOwnProperty(\"vabcEnabled\"))\n                object.vabcEnabled = message.vabcEnabled;\n            if (message.vabcCompressionParam != null && message.hasOwnProperty(\"vabcCompressionParam\"))\n                object.vabcCompressionParam = message.vabcCompressionParam;\n            if (message.cowVersion != null && message.hasOwnProperty(\"cowVersion\"))\n                object.cowVersion = message.cowVersion;\n            return object;\n        };\n\n        /**\n         * Converts this DynamicPartitionMetadata to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DynamicPartitionMetadata.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DynamicPartitionMetadata;\n    })();\n\n    chromeos_update_engine.ApexInfo = (function() {\n\n        /**\n         * Properties of an ApexInfo.\n         * @memberof chromeos_update_engine\n         * @interface IApexInfo\n         * @property {string|null} [packageName] ApexInfo packageName\n         * @property {number|Long|null} [version] ApexInfo version\n         * @property {boolean|null} [isCompressed] ApexInfo isCompressed\n         * @property {number|Long|null} [decompressedSize] ApexInfo decompressedSize\n         */\n\n        /**\n         * Constructs a new ApexInfo.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents an ApexInfo.\n         * @implements IApexInfo\n         * @constructor\n         * @param {chromeos_update_engine.IApexInfo=} [properties] Properties to set\n         */\n        function ApexInfo(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ApexInfo packageName.\n         * @member {string} packageName\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         */\n        ApexInfo.prototype.packageName = \"\";\n\n        /**\n         * ApexInfo version.\n         * @member {number|Long} version\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         */\n        ApexInfo.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ApexInfo isCompressed.\n         * @member {boolean} isCompressed\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         */\n        ApexInfo.prototype.isCompressed = false;\n\n        /**\n         * ApexInfo decompressedSize.\n         * @member {number|Long} decompressedSize\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         */\n        ApexInfo.prototype.decompressedSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new ApexInfo instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {chromeos_update_engine.IApexInfo=} [properties] Properties to set\n         * @returns {chromeos_update_engine.ApexInfo} ApexInfo instance\n         */\n        ApexInfo.create = function create(properties) {\n            return new ApexInfo(properties);\n        };\n\n        /**\n         * Encodes the specified ApexInfo message. Does not implicitly {@link chromeos_update_engine.ApexInfo.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {chromeos_update_engine.IApexInfo} message ApexInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApexInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.packageName != null && Object.hasOwnProperty.call(message, \"packageName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.packageName);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            if (message.isCompressed != null && Object.hasOwnProperty.call(message, \"isCompressed\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isCompressed);\n            if (message.decompressedSize != null && Object.hasOwnProperty.call(message, \"decompressedSize\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.decompressedSize);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ApexInfo message, length delimited. Does not implicitly {@link chromeos_update_engine.ApexInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {chromeos_update_engine.IApexInfo} message ApexInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApexInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ApexInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.ApexInfo} ApexInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApexInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.ApexInfo();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.packageName = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                case 3:\n                    message.isCompressed = reader.bool();\n                    break;\n                case 4:\n                    message.decompressedSize = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an ApexInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.ApexInfo} ApexInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApexInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ApexInfo message.\n         * @function verify\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ApexInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.packageName != null && message.hasOwnProperty(\"packageName\"))\n                if (!$util.isString(message.packageName))\n                    return \"packageName: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            if (message.isCompressed != null && message.hasOwnProperty(\"isCompressed\"))\n                if (typeof message.isCompressed !== \"boolean\")\n                    return \"isCompressed: boolean expected\";\n            if (message.decompressedSize != null && message.hasOwnProperty(\"decompressedSize\"))\n                if (!$util.isInteger(message.decompressedSize) && !(message.decompressedSize && $util.isInteger(message.decompressedSize.low) && $util.isInteger(message.decompressedSize.high)))\n                    return \"decompressedSize: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an ApexInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.ApexInfo} ApexInfo\n         */\n        ApexInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.ApexInfo)\n                return object;\n            let message = new $root.chromeos_update_engine.ApexInfo();\n            if (object.packageName != null)\n                message.packageName = String(object.packageName);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            if (object.isCompressed != null)\n                message.isCompressed = Boolean(object.isCompressed);\n            if (object.decompressedSize != null)\n                if ($util.Long)\n                    (message.decompressedSize = $util.Long.fromValue(object.decompressedSize)).unsigned = false;\n                else if (typeof object.decompressedSize === \"string\")\n                    message.decompressedSize = parseInt(object.decompressedSize, 10);\n                else if (typeof object.decompressedSize === \"number\")\n                    message.decompressedSize = object.decompressedSize;\n                else if (typeof object.decompressedSize === \"object\")\n                    message.decompressedSize = new $util.LongBits(object.decompressedSize.low >>> 0, object.decompressedSize.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ApexInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {chromeos_update_engine.ApexInfo} message ApexInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ApexInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.packageName = \"\";\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n                object.isCompressed = false;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.decompressedSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.decompressedSize = options.longs === String ? \"0\" : 0;\n            }\n            if (message.packageName != null && message.hasOwnProperty(\"packageName\"))\n                object.packageName = message.packageName;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            if (message.isCompressed != null && message.hasOwnProperty(\"isCompressed\"))\n                object.isCompressed = message.isCompressed;\n            if (message.decompressedSize != null && message.hasOwnProperty(\"decompressedSize\"))\n                if (typeof message.decompressedSize === \"number\")\n                    object.decompressedSize = options.longs === String ? String(message.decompressedSize) : message.decompressedSize;\n                else\n                    object.decompressedSize = options.longs === String ? $util.Long.prototype.toString.call(message.decompressedSize) : options.longs === Number ? new $util.LongBits(message.decompressedSize.low >>> 0, message.decompressedSize.high >>> 0).toNumber() : message.decompressedSize;\n            return object;\n        };\n\n        /**\n         * Converts this ApexInfo to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ApexInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ApexInfo;\n    })();\n\n    chromeos_update_engine.ApexMetadata = (function() {\n\n        /**\n         * Properties of an ApexMetadata.\n         * @memberof chromeos_update_engine\n         * @interface IApexMetadata\n         * @property {Array.<chromeos_update_engine.IApexInfo>|null} [apexInfo] ApexMetadata apexInfo\n         */\n\n        /**\n         * Constructs a new ApexMetadata.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents an ApexMetadata.\n         * @implements IApexMetadata\n         * @constructor\n         * @param {chromeos_update_engine.IApexMetadata=} [properties] Properties to set\n         */\n        function ApexMetadata(properties) {\n            this.apexInfo = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ApexMetadata apexInfo.\n         * @member {Array.<chromeos_update_engine.IApexInfo>} apexInfo\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @instance\n         */\n        ApexMetadata.prototype.apexInfo = $util.emptyArray;\n\n        /**\n         * Creates a new ApexMetadata instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {chromeos_update_engine.IApexMetadata=} [properties] Properties to set\n         * @returns {chromeos_update_engine.ApexMetadata} ApexMetadata instance\n         */\n        ApexMetadata.create = function create(properties) {\n            return new ApexMetadata(properties);\n        };\n\n        /**\n         * Encodes the specified ApexMetadata message. Does not implicitly {@link chromeos_update_engine.ApexMetadata.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {chromeos_update_engine.IApexMetadata} message ApexMetadata message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApexMetadata.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.apexInfo != null && message.apexInfo.length)\n                for (let i = 0; i < message.apexInfo.length; ++i)\n                    $root.chromeos_update_engine.ApexInfo.encode(message.apexInfo[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ApexMetadata message, length delimited. Does not implicitly {@link chromeos_update_engine.ApexMetadata.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {chromeos_update_engine.IApexMetadata} message ApexMetadata message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApexMetadata.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ApexMetadata message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.ApexMetadata} ApexMetadata\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApexMetadata.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.ApexMetadata();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.apexInfo && message.apexInfo.length))\n                        message.apexInfo = [];\n                    message.apexInfo.push($root.chromeos_update_engine.ApexInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an ApexMetadata message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.ApexMetadata} ApexMetadata\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApexMetadata.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ApexMetadata message.\n         * @function verify\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ApexMetadata.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.apexInfo != null && message.hasOwnProperty(\"apexInfo\")) {\n                if (!Array.isArray(message.apexInfo))\n                    return \"apexInfo: array expected\";\n                for (let i = 0; i < message.apexInfo.length; ++i) {\n                    let error = $root.chromeos_update_engine.ApexInfo.verify(message.apexInfo[i]);\n                    if (error)\n                        return \"apexInfo.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an ApexMetadata message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.ApexMetadata} ApexMetadata\n         */\n        ApexMetadata.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.ApexMetadata)\n                return object;\n            let message = new $root.chromeos_update_engine.ApexMetadata();\n            if (object.apexInfo) {\n                if (!Array.isArray(object.apexInfo))\n                    throw TypeError(\".chromeos_update_engine.ApexMetadata.apexInfo: array expected\");\n                message.apexInfo = [];\n                for (let i = 0; i < object.apexInfo.length; ++i) {\n                    if (typeof object.apexInfo[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.ApexMetadata.apexInfo: object expected\");\n                    message.apexInfo[i] = $root.chromeos_update_engine.ApexInfo.fromObject(object.apexInfo[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ApexMetadata message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {chromeos_update_engine.ApexMetadata} message ApexMetadata\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ApexMetadata.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.apexInfo = [];\n            if (message.apexInfo && message.apexInfo.length) {\n                object.apexInfo = [];\n                for (let j = 0; j < message.apexInfo.length; ++j)\n                    object.apexInfo[j] = $root.chromeos_update_engine.ApexInfo.toObject(message.apexInfo[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ApexMetadata to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ApexMetadata.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ApexMetadata;\n    })();\n\n    chromeos_update_engine.DeltaArchiveManifest = (function() {\n\n        /**\n         * Properties of a DeltaArchiveManifest.\n         * @memberof chromeos_update_engine\n         * @interface IDeltaArchiveManifest\n         * @property {Array.<chromeos_update_engine.IInstallOperation>|null} [installOperations] DeltaArchiveManifest installOperations\n         * @property {Array.<chromeos_update_engine.IInstallOperation>|null} [kernelInstallOperations] DeltaArchiveManifest kernelInstallOperations\n         * @property {number|null} [blockSize] DeltaArchiveManifest blockSize\n         * @property {number|Long|null} [signaturesOffset] DeltaArchiveManifest signaturesOffset\n         * @property {number|Long|null} [signaturesSize] DeltaArchiveManifest signaturesSize\n         * @property {chromeos_update_engine.IPartitionInfo|null} [oldKernelInfo] DeltaArchiveManifest oldKernelInfo\n         * @property {chromeos_update_engine.IPartitionInfo|null} [newKernelInfo] DeltaArchiveManifest newKernelInfo\n         * @property {chromeos_update_engine.IPartitionInfo|null} [oldRootfsInfo] DeltaArchiveManifest oldRootfsInfo\n         * @property {chromeos_update_engine.IPartitionInfo|null} [newRootfsInfo] DeltaArchiveManifest newRootfsInfo\n         * @property {chromeos_update_engine.IImageInfo|null} [oldImageInfo] DeltaArchiveManifest oldImageInfo\n         * @property {chromeos_update_engine.IImageInfo|null} [newImageInfo] DeltaArchiveManifest newImageInfo\n         * @property {number|null} [minorVersion] DeltaArchiveManifest minorVersion\n         * @property {Array.<chromeos_update_engine.IPartitionUpdate>|null} [partitions] DeltaArchiveManifest partitions\n         * @property {number|Long|null} [maxTimestamp] DeltaArchiveManifest maxTimestamp\n         * @property {chromeos_update_engine.IDynamicPartitionMetadata|null} [dynamicPartitionMetadata] DeltaArchiveManifest dynamicPartitionMetadata\n         * @property {boolean|null} [partialUpdate] DeltaArchiveManifest partialUpdate\n         * @property {Array.<chromeos_update_engine.IApexInfo>|null} [apexInfo] DeltaArchiveManifest apexInfo\n         */\n\n        /**\n         * Constructs a new DeltaArchiveManifest.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a DeltaArchiveManifest.\n         * @implements IDeltaArchiveManifest\n         * @constructor\n         * @param {chromeos_update_engine.IDeltaArchiveManifest=} [properties] Properties to set\n         */\n        function DeltaArchiveManifest(properties) {\n            this.installOperations = [];\n            this.kernelInstallOperations = [];\n            this.partitions = [];\n            this.apexInfo = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DeltaArchiveManifest installOperations.\n         * @member {Array.<chromeos_update_engine.IInstallOperation>} installOperations\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.installOperations = $util.emptyArray;\n\n        /**\n         * DeltaArchiveManifest kernelInstallOperations.\n         * @member {Array.<chromeos_update_engine.IInstallOperation>} kernelInstallOperations\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.kernelInstallOperations = $util.emptyArray;\n\n        /**\n         * DeltaArchiveManifest blockSize.\n         * @member {number} blockSize\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.blockSize = 4096;\n\n        /**\n         * DeltaArchiveManifest signaturesOffset.\n         * @member {number|Long} signaturesOffset\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.signaturesOffset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * DeltaArchiveManifest signaturesSize.\n         * @member {number|Long} signaturesSize\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.signaturesSize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * DeltaArchiveManifest oldKernelInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} oldKernelInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.oldKernelInfo = null;\n\n        /**\n         * DeltaArchiveManifest newKernelInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} newKernelInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.newKernelInfo = null;\n\n        /**\n         * DeltaArchiveManifest oldRootfsInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} oldRootfsInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.oldRootfsInfo = null;\n\n        /**\n         * DeltaArchiveManifest newRootfsInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} newRootfsInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.newRootfsInfo = null;\n\n        /**\n         * DeltaArchiveManifest oldImageInfo.\n         * @member {chromeos_update_engine.IImageInfo|null|undefined} oldImageInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.oldImageInfo = null;\n\n        /**\n         * DeltaArchiveManifest newImageInfo.\n         * @member {chromeos_update_engine.IImageInfo|null|undefined} newImageInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.newImageInfo = null;\n\n        /**\n         * DeltaArchiveManifest minorVersion.\n         * @member {number} minorVersion\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.minorVersion = 0;\n\n        /**\n         * DeltaArchiveManifest partitions.\n         * @member {Array.<chromeos_update_engine.IPartitionUpdate>} partitions\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.partitions = $util.emptyArray;\n\n        /**\n         * DeltaArchiveManifest maxTimestamp.\n         * @member {number|Long} maxTimestamp\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.maxTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * DeltaArchiveManifest dynamicPartitionMetadata.\n         * @member {chromeos_update_engine.IDynamicPartitionMetadata|null|undefined} dynamicPartitionMetadata\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.dynamicPartitionMetadata = null;\n\n        /**\n         * DeltaArchiveManifest partialUpdate.\n         * @member {boolean} partialUpdate\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.partialUpdate = false;\n\n        /**\n         * DeltaArchiveManifest apexInfo.\n         * @member {Array.<chromeos_update_engine.IApexInfo>} apexInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.apexInfo = $util.emptyArray;\n\n        /**\n         * Creates a new DeltaArchiveManifest instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {chromeos_update_engine.IDeltaArchiveManifest=} [properties] Properties to set\n         * @returns {chromeos_update_engine.DeltaArchiveManifest} DeltaArchiveManifest instance\n         */\n        DeltaArchiveManifest.create = function create(properties) {\n            return new DeltaArchiveManifest(properties);\n        };\n\n        /**\n         * Encodes the specified DeltaArchiveManifest message. Does not implicitly {@link chromeos_update_engine.DeltaArchiveManifest.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {chromeos_update_engine.IDeltaArchiveManifest} message DeltaArchiveManifest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DeltaArchiveManifest.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.installOperations != null && message.installOperations.length)\n                for (let i = 0; i < message.installOperations.length; ++i)\n                    $root.chromeos_update_engine.InstallOperation.encode(message.installOperations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.kernelInstallOperations != null && message.kernelInstallOperations.length)\n                for (let i = 0; i < message.kernelInstallOperations.length; ++i)\n                    $root.chromeos_update_engine.InstallOperation.encode(message.kernelInstallOperations[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.blockSize != null && Object.hasOwnProperty.call(message, \"blockSize\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.blockSize);\n            if (message.signaturesOffset != null && Object.hasOwnProperty.call(message, \"signaturesOffset\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.signaturesOffset);\n            if (message.signaturesSize != null && Object.hasOwnProperty.call(message, \"signaturesSize\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.signaturesSize);\n            if (message.oldKernelInfo != null && Object.hasOwnProperty.call(message, \"oldKernelInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.oldKernelInfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.newKernelInfo != null && Object.hasOwnProperty.call(message, \"newKernelInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.newKernelInfo, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.oldRootfsInfo != null && Object.hasOwnProperty.call(message, \"oldRootfsInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.oldRootfsInfo, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.newRootfsInfo != null && Object.hasOwnProperty.call(message, \"newRootfsInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.newRootfsInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.oldImageInfo != null && Object.hasOwnProperty.call(message, \"oldImageInfo\"))\n                $root.chromeos_update_engine.ImageInfo.encode(message.oldImageInfo, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.newImageInfo != null && Object.hasOwnProperty.call(message, \"newImageInfo\"))\n                $root.chromeos_update_engine.ImageInfo.encode(message.newImageInfo, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.minorVersion != null && Object.hasOwnProperty.call(message, \"minorVersion\"))\n                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.minorVersion);\n            if (message.partitions != null && message.partitions.length)\n                for (let i = 0; i < message.partitions.length; ++i)\n                    $root.chromeos_update_engine.PartitionUpdate.encode(message.partitions[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.maxTimestamp != null && Object.hasOwnProperty.call(message, \"maxTimestamp\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int64(message.maxTimestamp);\n            if (message.dynamicPartitionMetadata != null && Object.hasOwnProperty.call(message, \"dynamicPartitionMetadata\"))\n                $root.chromeos_update_engine.DynamicPartitionMetadata.encode(message.dynamicPartitionMetadata, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.partialUpdate != null && Object.hasOwnProperty.call(message, \"partialUpdate\"))\n                writer.uint32(/* id 16, wireType 0 =*/128).bool(message.partialUpdate);\n            if (message.apexInfo != null && message.apexInfo.length)\n                for (let i = 0; i < message.apexInfo.length; ++i)\n                    $root.chromeos_update_engine.ApexInfo.encode(message.apexInfo[i], writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified DeltaArchiveManifest message, length delimited. Does not implicitly {@link chromeos_update_engine.DeltaArchiveManifest.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {chromeos_update_engine.IDeltaArchiveManifest} message DeltaArchiveManifest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DeltaArchiveManifest.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DeltaArchiveManifest message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.DeltaArchiveManifest} DeltaArchiveManifest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DeltaArchiveManifest.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.DeltaArchiveManifest();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.installOperations && message.installOperations.length))\n                        message.installOperations = [];\n                    message.installOperations.push($root.chromeos_update_engine.InstallOperation.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    if (!(message.kernelInstallOperations && message.kernelInstallOperations.length))\n                        message.kernelInstallOperations = [];\n                    message.kernelInstallOperations.push($root.chromeos_update_engine.InstallOperation.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.blockSize = reader.uint32();\n                    break;\n                case 4:\n                    message.signaturesOffset = reader.uint64();\n                    break;\n                case 5:\n                    message.signaturesSize = reader.uint64();\n                    break;\n                case 6:\n                    message.oldKernelInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.newKernelInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.oldRootfsInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.newRootfsInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.oldImageInfo = $root.chromeos_update_engine.ImageInfo.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.newImageInfo = $root.chromeos_update_engine.ImageInfo.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.minorVersion = reader.uint32();\n                    break;\n                case 13:\n                    if (!(message.partitions && message.partitions.length))\n                        message.partitions = [];\n                    message.partitions.push($root.chromeos_update_engine.PartitionUpdate.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.maxTimestamp = reader.int64();\n                    break;\n                case 15:\n                    message.dynamicPartitionMetadata = $root.chromeos_update_engine.DynamicPartitionMetadata.decode(reader, reader.uint32());\n                    break;\n                case 16:\n                    message.partialUpdate = reader.bool();\n                    break;\n                case 17:\n                    if (!(message.apexInfo && message.apexInfo.length))\n                        message.apexInfo = [];\n                    message.apexInfo.push($root.chromeos_update_engine.ApexInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a DeltaArchiveManifest message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.DeltaArchiveManifest} DeltaArchiveManifest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DeltaArchiveManifest.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DeltaArchiveManifest message.\n         * @function verify\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DeltaArchiveManifest.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.installOperations != null && message.hasOwnProperty(\"installOperations\")) {\n                if (!Array.isArray(message.installOperations))\n                    return \"installOperations: array expected\";\n                for (let i = 0; i < message.installOperations.length; ++i) {\n                    let error = $root.chromeos_update_engine.InstallOperation.verify(message.installOperations[i]);\n                    if (error)\n                        return \"installOperations.\" + error;\n                }\n            }\n            if (message.kernelInstallOperations != null && message.hasOwnProperty(\"kernelInstallOperations\")) {\n                if (!Array.isArray(message.kernelInstallOperations))\n                    return \"kernelInstallOperations: array expected\";\n                for (let i = 0; i < message.kernelInstallOperations.length; ++i) {\n                    let error = $root.chromeos_update_engine.InstallOperation.verify(message.kernelInstallOperations[i]);\n                    if (error)\n                        return \"kernelInstallOperations.\" + error;\n                }\n            }\n            if (message.blockSize != null && message.hasOwnProperty(\"blockSize\"))\n                if (!$util.isInteger(message.blockSize))\n                    return \"blockSize: integer expected\";\n            if (message.signaturesOffset != null && message.hasOwnProperty(\"signaturesOffset\"))\n                if (!$util.isInteger(message.signaturesOffset) && !(message.signaturesOffset && $util.isInteger(message.signaturesOffset.low) && $util.isInteger(message.signaturesOffset.high)))\n                    return \"signaturesOffset: integer|Long expected\";\n            if (message.signaturesSize != null && message.hasOwnProperty(\"signaturesSize\"))\n                if (!$util.isInteger(message.signaturesSize) && !(message.signaturesSize && $util.isInteger(message.signaturesSize.low) && $util.isInteger(message.signaturesSize.high)))\n                    return \"signaturesSize: integer|Long expected\";\n            if (message.oldKernelInfo != null && message.hasOwnProperty(\"oldKernelInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.oldKernelInfo);\n                if (error)\n                    return \"oldKernelInfo.\" + error;\n            }\n            if (message.newKernelInfo != null && message.hasOwnProperty(\"newKernelInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.newKernelInfo);\n                if (error)\n                    return \"newKernelInfo.\" + error;\n            }\n            if (message.oldRootfsInfo != null && message.hasOwnProperty(\"oldRootfsInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.oldRootfsInfo);\n                if (error)\n                    return \"oldRootfsInfo.\" + error;\n            }\n            if (message.newRootfsInfo != null && message.hasOwnProperty(\"newRootfsInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.newRootfsInfo);\n                if (error)\n                    return \"newRootfsInfo.\" + error;\n            }\n            if (message.oldImageInfo != null && message.hasOwnProperty(\"oldImageInfo\")) {\n                let error = $root.chromeos_update_engine.ImageInfo.verify(message.oldImageInfo);\n                if (error)\n                    return \"oldImageInfo.\" + error;\n            }\n            if (message.newImageInfo != null && message.hasOwnProperty(\"newImageInfo\")) {\n                let error = $root.chromeos_update_engine.ImageInfo.verify(message.newImageInfo);\n                if (error)\n                    return \"newImageInfo.\" + error;\n            }\n            if (message.minorVersion != null && message.hasOwnProperty(\"minorVersion\"))\n                if (!$util.isInteger(message.minorVersion))\n                    return \"minorVersion: integer expected\";\n            if (message.partitions != null && message.hasOwnProperty(\"partitions\")) {\n                if (!Array.isArray(message.partitions))\n                    return \"partitions: array expected\";\n                for (let i = 0; i < message.partitions.length; ++i) {\n                    let error = $root.chromeos_update_engine.PartitionUpdate.verify(message.partitions[i]);\n                    if (error)\n                        return \"partitions.\" + error;\n                }\n            }\n            if (message.maxTimestamp != null && message.hasOwnProperty(\"maxTimestamp\"))\n                if (!$util.isInteger(message.maxTimestamp) && !(message.maxTimestamp && $util.isInteger(message.maxTimestamp.low) && $util.isInteger(message.maxTimestamp.high)))\n                    return \"maxTimestamp: integer|Long expected\";\n            if (message.dynamicPartitionMetadata != null && message.hasOwnProperty(\"dynamicPartitionMetadata\")) {\n                let error = $root.chromeos_update_engine.DynamicPartitionMetadata.verify(message.dynamicPartitionMetadata);\n                if (error)\n                    return \"dynamicPartitionMetadata.\" + error;\n            }\n            if (message.partialUpdate != null && message.hasOwnProperty(\"partialUpdate\"))\n                if (typeof message.partialUpdate !== \"boolean\")\n                    return \"partialUpdate: boolean expected\";\n            if (message.apexInfo != null && message.hasOwnProperty(\"apexInfo\")) {\n                if (!Array.isArray(message.apexInfo))\n                    return \"apexInfo: array expected\";\n                for (let i = 0; i < message.apexInfo.length; ++i) {\n                    let error = $root.chromeos_update_engine.ApexInfo.verify(message.apexInfo[i]);\n                    if (error)\n                        return \"apexInfo.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a DeltaArchiveManifest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.DeltaArchiveManifest} DeltaArchiveManifest\n         */\n        DeltaArchiveManifest.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.DeltaArchiveManifest)\n                return object;\n            let message = new $root.chromeos_update_engine.DeltaArchiveManifest();\n            if (object.installOperations) {\n                if (!Array.isArray(object.installOperations))\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.installOperations: array expected\");\n                message.installOperations = [];\n                for (let i = 0; i < object.installOperations.length; ++i) {\n                    if (typeof object.installOperations[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.installOperations: object expected\");\n                    message.installOperations[i] = $root.chromeos_update_engine.InstallOperation.fromObject(object.installOperations[i]);\n                }\n            }\n            if (object.kernelInstallOperations) {\n                if (!Array.isArray(object.kernelInstallOperations))\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.kernelInstallOperations: array expected\");\n                message.kernelInstallOperations = [];\n                for (let i = 0; i < object.kernelInstallOperations.length; ++i) {\n                    if (typeof object.kernelInstallOperations[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.kernelInstallOperations: object expected\");\n                    message.kernelInstallOperations[i] = $root.chromeos_update_engine.InstallOperation.fromObject(object.kernelInstallOperations[i]);\n                }\n            }\n            if (object.blockSize != null)\n                message.blockSize = object.blockSize >>> 0;\n            if (object.signaturesOffset != null)\n                if ($util.Long)\n                    (message.signaturesOffset = $util.Long.fromValue(object.signaturesOffset)).unsigned = true;\n                else if (typeof object.signaturesOffset === \"string\")\n                    message.signaturesOffset = parseInt(object.signaturesOffset, 10);\n                else if (typeof object.signaturesOffset === \"number\")\n                    message.signaturesOffset = object.signaturesOffset;\n                else if (typeof object.signaturesOffset === \"object\")\n                    message.signaturesOffset = new $util.LongBits(object.signaturesOffset.low >>> 0, object.signaturesOffset.high >>> 0).toNumber(true);\n            if (object.signaturesSize != null)\n                if ($util.Long)\n                    (message.signaturesSize = $util.Long.fromValue(object.signaturesSize)).unsigned = true;\n                else if (typeof object.signaturesSize === \"string\")\n                    message.signaturesSize = parseInt(object.signaturesSize, 10);\n                else if (typeof object.signaturesSize === \"number\")\n                    message.signaturesSize = object.signaturesSize;\n                else if (typeof object.signaturesSize === \"object\")\n                    message.signaturesSize = new $util.LongBits(object.signaturesSize.low >>> 0, object.signaturesSize.high >>> 0).toNumber(true);\n            if (object.oldKernelInfo != null) {\n                if (typeof object.oldKernelInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.oldKernelInfo: object expected\");\n                message.oldKernelInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.oldKernelInfo);\n            }\n            if (object.newKernelInfo != null) {\n                if (typeof object.newKernelInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.newKernelInfo: object expected\");\n                message.newKernelInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.newKernelInfo);\n            }\n            if (object.oldRootfsInfo != null) {\n                if (typeof object.oldRootfsInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.oldRootfsInfo: object expected\");\n                message.oldRootfsInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.oldRootfsInfo);\n            }\n            if (object.newRootfsInfo != null) {\n                if (typeof object.newRootfsInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.newRootfsInfo: object expected\");\n                message.newRootfsInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.newRootfsInfo);\n            }\n            if (object.oldImageInfo != null) {\n                if (typeof object.oldImageInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.oldImageInfo: object expected\");\n                message.oldImageInfo = $root.chromeos_update_engine.ImageInfo.fromObject(object.oldImageInfo);\n            }\n            if (object.newImageInfo != null) {\n                if (typeof object.newImageInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.newImageInfo: object expected\");\n                message.newImageInfo = $root.chromeos_update_engine.ImageInfo.fromObject(object.newImageInfo);\n            }\n            if (object.minorVersion != null)\n                message.minorVersion = object.minorVersion >>> 0;\n            if (object.partitions) {\n                if (!Array.isArray(object.partitions))\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.partitions: array expected\");\n                message.partitions = [];\n                for (let i = 0; i < object.partitions.length; ++i) {\n                    if (typeof object.partitions[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.partitions: object expected\");\n                    message.partitions[i] = $root.chromeos_update_engine.PartitionUpdate.fromObject(object.partitions[i]);\n                }\n            }\n            if (object.maxTimestamp != null)\n                if ($util.Long)\n                    (message.maxTimestamp = $util.Long.fromValue(object.maxTimestamp)).unsigned = false;\n                else if (typeof object.maxTimestamp === \"string\")\n                    message.maxTimestamp = parseInt(object.maxTimestamp, 10);\n                else if (typeof object.maxTimestamp === \"number\")\n                    message.maxTimestamp = object.maxTimestamp;\n                else if (typeof object.maxTimestamp === \"object\")\n                    message.maxTimestamp = new $util.LongBits(object.maxTimestamp.low >>> 0, object.maxTimestamp.high >>> 0).toNumber();\n            if (object.dynamicPartitionMetadata != null) {\n                if (typeof object.dynamicPartitionMetadata !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.dynamicPartitionMetadata: object expected\");\n                message.dynamicPartitionMetadata = $root.chromeos_update_engine.DynamicPartitionMetadata.fromObject(object.dynamicPartitionMetadata);\n            }\n            if (object.partialUpdate != null)\n                message.partialUpdate = Boolean(object.partialUpdate);\n            if (object.apexInfo) {\n                if (!Array.isArray(object.apexInfo))\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.apexInfo: array expected\");\n                message.apexInfo = [];\n                for (let i = 0; i < object.apexInfo.length; ++i) {\n                    if (typeof object.apexInfo[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.apexInfo: object expected\");\n                    message.apexInfo[i] = $root.chromeos_update_engine.ApexInfo.fromObject(object.apexInfo[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a DeltaArchiveManifest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {chromeos_update_engine.DeltaArchiveManifest} message DeltaArchiveManifest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DeltaArchiveManifest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.installOperations = [];\n                object.kernelInstallOperations = [];\n                object.partitions = [];\n                object.apexInfo = [];\n            }\n            if (options.defaults) {\n                object.blockSize = 4096;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.signaturesOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.signaturesOffset = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.signaturesSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.signaturesSize = options.longs === String ? \"0\" : 0;\n                object.oldKernelInfo = null;\n                object.newKernelInfo = null;\n                object.oldRootfsInfo = null;\n                object.newRootfsInfo = null;\n                object.oldImageInfo = null;\n                object.newImageInfo = null;\n                object.minorVersion = 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.maxTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.maxTimestamp = options.longs === String ? \"0\" : 0;\n                object.dynamicPartitionMetadata = null;\n                object.partialUpdate = false;\n            }\n            if (message.installOperations && message.installOperations.length) {\n                object.installOperations = [];\n                for (let j = 0; j < message.installOperations.length; ++j)\n                    object.installOperations[j] = $root.chromeos_update_engine.InstallOperation.toObject(message.installOperations[j], options);\n            }\n            if (message.kernelInstallOperations && message.kernelInstallOperations.length) {\n                object.kernelInstallOperations = [];\n                for (let j = 0; j < message.kernelInstallOperations.length; ++j)\n                    object.kernelInstallOperations[j] = $root.chromeos_update_engine.InstallOperation.toObject(message.kernelInstallOperations[j], options);\n            }\n            if (message.blockSize != null && message.hasOwnProperty(\"blockSize\"))\n                object.blockSize = message.blockSize;\n            if (message.signaturesOffset != null && message.hasOwnProperty(\"signaturesOffset\"))\n                if (typeof message.signaturesOffset === \"number\")\n                    object.signaturesOffset = options.longs === String ? String(message.signaturesOffset) : message.signaturesOffset;\n                else\n                    object.signaturesOffset = options.longs === String ? $util.Long.prototype.toString.call(message.signaturesOffset) : options.longs === Number ? new $util.LongBits(message.signaturesOffset.low >>> 0, message.signaturesOffset.high >>> 0).toNumber(true) : message.signaturesOffset;\n            if (message.signaturesSize != null && message.hasOwnProperty(\"signaturesSize\"))\n                if (typeof message.signaturesSize === \"number\")\n                    object.signaturesSize = options.longs === String ? String(message.signaturesSize) : message.signaturesSize;\n                else\n                    object.signaturesSize = options.longs === String ? $util.Long.prototype.toString.call(message.signaturesSize) : options.longs === Number ? new $util.LongBits(message.signaturesSize.low >>> 0, message.signaturesSize.high >>> 0).toNumber(true) : message.signaturesSize;\n            if (message.oldKernelInfo != null && message.hasOwnProperty(\"oldKernelInfo\"))\n                object.oldKernelInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.oldKernelInfo, options);\n            if (message.newKernelInfo != null && message.hasOwnProperty(\"newKernelInfo\"))\n                object.newKernelInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.newKernelInfo, options);\n            if (message.oldRootfsInfo != null && message.hasOwnProperty(\"oldRootfsInfo\"))\n                object.oldRootfsInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.oldRootfsInfo, options);\n            if (message.newRootfsInfo != null && message.hasOwnProperty(\"newRootfsInfo\"))\n                object.newRootfsInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.newRootfsInfo, options);\n            if (message.oldImageInfo != null && message.hasOwnProperty(\"oldImageInfo\"))\n                object.oldImageInfo = $root.chromeos_update_engine.ImageInfo.toObject(message.oldImageInfo, options);\n            if (message.newImageInfo != null && message.hasOwnProperty(\"newImageInfo\"))\n                object.newImageInfo = $root.chromeos_update_engine.ImageInfo.toObject(message.newImageInfo, options);\n            if (message.minorVersion != null && message.hasOwnProperty(\"minorVersion\"))\n                object.minorVersion = message.minorVersion;\n            if (message.partitions && message.partitions.length) {\n                object.partitions = [];\n                for (let j = 0; j < message.partitions.length; ++j)\n                    object.partitions[j] = $root.chromeos_update_engine.PartitionUpdate.toObject(message.partitions[j], options);\n            }\n            if (message.maxTimestamp != null && message.hasOwnProperty(\"maxTimestamp\"))\n                if (typeof message.maxTimestamp === \"number\")\n                    object.maxTimestamp = options.longs === String ? String(message.maxTimestamp) : message.maxTimestamp;\n                else\n                    object.maxTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.maxTimestamp) : options.longs === Number ? new $util.LongBits(message.maxTimestamp.low >>> 0, message.maxTimestamp.high >>> 0).toNumber() : message.maxTimestamp;\n            if (message.dynamicPartitionMetadata != null && message.hasOwnProperty(\"dynamicPartitionMetadata\"))\n                object.dynamicPartitionMetadata = $root.chromeos_update_engine.DynamicPartitionMetadata.toObject(message.dynamicPartitionMetadata, options);\n            if (message.partialUpdate != null && message.hasOwnProperty(\"partialUpdate\"))\n                object.partialUpdate = message.partialUpdate;\n            if (message.apexInfo && message.apexInfo.length) {\n                object.apexInfo = [];\n                for (let j = 0; j < message.apexInfo.length; ++j)\n                    object.apexInfo[j] = $root.chromeos_update_engine.ApexInfo.toObject(message.apexInfo[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this DeltaArchiveManifest to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DeltaArchiveManifest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DeltaArchiveManifest;\n    })();\n\n    return chromeos_update_engine;\n})();\n\nexport { $root as default };\n","/**\n * @fileoverview Class paypload is used to read in and\n * parse the payload.bin file from a OTA.zip file.\n * Class OpType creates a Map that can resolve the\n * operation type.\n * @package zip.js\n * @package protobufjs\n */\n\nimport * as zip from '@zip.js/zip.js/dist/zip-full.min.js'\nimport { chromeos_update_engine as update_metadata_pb } from './update_metadata_pb.js'\n\nconst /** Number */ _MAGIC = 'CrAU'\nconst /** Number */ _VERSION_SIZE = 8\nconst /** Number */ _MANIFEST_LEN_SIZE = 8\nconst /** Number */ _METADATA_SIGNATURE_LEN_SIZE = 4\nconst /** Number */ _BRILLO_MAJOR_PAYLOAD_VERSION = 2\n\nexport class Payload {\n  /**\n   * This class parses the metadata of a OTA package.\n   * @param {File} file A OTA.zip file read from user's machine.\n   */\n  constructor(file) {\n    this.packedFile = new zip.ZipReader(new zip.BlobReader(file))\n    this.cursor = 0\n  }\n\n  async unzipPayload() {\n    let /** Array<Entry> */ entries = await this.packedFile.getEntries()\n    this.payload = null\n    for (let entry of entries) {\n      if (entry.filename == 'payload.bin') {\n        //TODO: only read in the manifest instead of the whole payload\n        this.payload = await entry.getData(new zip.BlobWriter())\n      }\n    }\n    if (!this.payload) {\n      alert('Please select a legit OTA package')\n      return\n    }\n    this.buffer = await this.payload.arrayBuffer()\n  }\n\n  /**\n   * Read in an integer from binary bufferArray.\n   * @param {Int} size the size of a integer being read in\n   * @return {Int} an integer.\n   */\n  readInt(size) {\n    let /** DataView */ view = new DataView(\n      this.buffer.slice(this.cursor, this.cursor + size))\n    this.cursor += size\n    switch (size) {\n    case 2:\n      return view.getUInt16(0)\n    case 4:\n      return view.getUint32(0)\n    case 8:\n      return Number(view.getBigUint64(0))\n    default:\n      throw 'Cannot read this integer with size ' + size\n    }\n  }\n\n  readHeader() {\n    let /** TextDecoder */ decoder = new TextDecoder()\n    try {\n      this.magic = decoder.decode(\n        this.buffer.slice(this.cursor, _MAGIC.length))\n      this.cursor += _MAGIC.length\n      if (this.magic != _MAGIC) {\n        alert('MAGIC is not correct, please double check.')\n      }\n      this.header_version = this.readInt(_VERSION_SIZE)\n      this.manifest_len = this.readInt(_MANIFEST_LEN_SIZE)\n      if (this.header_version == _BRILLO_MAJOR_PAYLOAD_VERSION) {\n        this.metadata_signature_len = this.readInt(_METADATA_SIGNATURE_LEN_SIZE)\n      }\n    } catch (err) {\n      console.log(err)\n      return\n    }\n  }\n\n  /**\n   * Read in the manifest in an OTA.zip file.\n   * The structure of the manifest can be found in:\n   * aosp/system/update_engine/update_metadata.proto\n   */\n  readManifest() {\n    let /** Array<Uint8> */ manifest_raw = new Uint8Array(this.buffer.slice(\n      this.cursor, this.cursor + this.manifest_len\n    ))\n    this.cursor += this.manifest_len\n    this.manifest = update_metadata_pb.DeltaArchiveManifest\n      .decode(manifest_raw)\n  }\n\n  readSignature() {\n    let /** Array<Uint8>*/ signature_raw = new Uint8Array(this.buffer.slice(\n      this.cursor, this.cursor + this.metadata_signature_len\n    ))\n    this.cursor += this.metadata_signature_len\n    this.metadata_signature = update_metadata_pb.Signatures\n      .decode(signature_raw)\n  }\n\n  async init() {\n    await this.unzipPayload()\n    this.readHeader()\n    this.readManifest()\n    this.readSignature()\n  }\n\n}\n\nexport class OpType {\n  /**\n   * OpType.mapType create a map that could resolve the operation\n   * types. The operation types are encoded as numbers in\n   * update_metadata.proto and must be decoded before any usage.\n   */\n  constructor() {\n    let /** Array<{String: Number}>*/ types = update_metadata_pb.InstallOperation.Type\n    this.mapType = new Map()\n    for (let key in types) {\n      this.mapType.set(types[key], key)\n    }\n  }\n}\n\nexport class MergeOpType {\n  /**\n   * MergeOpType create a map that could resolve the COW merge operation\n   * types. This is very similar to OpType class except that one is for\n   * installation operations.\n   */\n  constructor() {\n    let /** Array<{String: Number}>*/ types =\n      update_metadata_pb.CowMergeOperation.Type\n    this.mapType = new Map()\n    for (let key in types) {\n      this.mapType.set(types[key], key)\n    }\n  }\n}","<template>\n  {{ mapType.get(operation.type) }}\n  <p v-if=\"operation.hasOwnProperty('dataOffset')\">\n    Data offset: {{ operation.dataOffset }}\n  </p>\n  <p v-if=\"operation.hasOwnProperty('dataLength')\">\n    Data length: {{ operation.dataLength }}\n  </p>\n  <p v-if=\"operation.hasOwnProperty('srcExtents')\">\n    Source: {{ operation.srcExtents.length }} extents ({{ srcTotalBlocks }}\n    blocks)\n    <br>\n    {{ srcBlocks }}\n  </p>\n  <p v-if=\"operation.hasOwnProperty('dstExtents')\">\n    Destination: {{ operation.dstExtents.length }} extents ({{ dstTotalBlocks }}\n    blocks)\n    <br>\n    {{ dstBlocks }}\n  </p>\n</template>\n\n<script>\nimport { numBlocks, displayBlocks } from '../services/payload_composition.js'\n\nexport default {\n  props: {\n    operation: {\n      type: Object,\n      required: true,\n    },\n    mapType: {\n      type: Map,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      srcTotalBlocks: null,\n      srcBlocks: null,\n      dstTotalBlocks: null,\n      dstBlocks: null,\n    }\n  },\n  mounted() {\n    if (this.operation.srcExtents) {\n      this.srcTotalBlocks = numBlocks(this.operation.srcExtents)\n      this.srcBlocks = displayBlocks(this.operation.srcExtents)\n    }\n    if (this.operation.dstExtents) {\n      this.dstTotalBlocks = numBlocks(this.operation.dstExtents)\n      this.dstBlocks = displayBlocks(this.operation.dstExtents)\n    }\n  },\n}\n</script>","export class EchartsData {\n  /**\n   * Given a set of [key, value] pairs and title, create an object for further\n   * usage in Vue-Echarts.\n   * @param {Map} statisticData\n   * @param {String} title\n   * @param {String} unit\n   * @param {Number} maximumEntries\n   */\n  constructor(statisticData, title, unit, maximumEntries = 15) {\n    this.statisticData = statisticData\n    this.title = title\n    this.unit = unit\n    this.maximumEntries = maximumEntries\n  }\n\n  /**\n   * Convert the raw data into a string.\n   * @return {String} A list of [key, value].\n   */\n  listData() {\n    let /** String */ table = ''\n    for (let [key, value] of this.statisticData) {\n      table += key + ' : ' + value.toString() + ' Blocks' + '\\n'\n    }\n    return table\n  }\n\n  /**\n   * Generate necessary parameters (option) for vue-echarts.\n   * Format of the parameters can be found here:\n   * https://echarts.apache.org/en/option.html\n   * @param {String} unit\n   * @return {Object} an ECharts option object.\n   */\n  getEchartsOption() {\n    if (this.statisticData.size > this.maximumEntries) {\n      this.statisticData = trimMap(this.statisticData, this.maximumEntries)\n    }\n    let /** Object */ option = new Object()\n    option.title = {\n      text: this.title,\n      left: \"center\"\n    }\n    option.tooltip = {\n      trigger: \"item\",\n      formatter: \"{a} <br/>{b} : {c} \" + this.unit + \" ({d}%)\"\n    }\n    option.legend = {\n      orient: \"horizontal\",\n      left: \"top\",\n      top: \"10%\",\n      data: Array.from(this.statisticData.keys())\n    }\n    option.series = [\n      {\n        name: this.title,\n        type: \"pie\",\n        radius: \"55%\",\n        center: [\"50%\", \"60%\"],\n        data: Array.from(this.statisticData).map((pair) => {\n          return { value: pair[1], name: pair[0] }\n        }),\n        emphasis: {\n          itemStyle: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: \"rgba(0, 0, 0, 0.5)\"\n          }\n        }\n      }\n    ]\n    return option\n  }\n}\n\n/**\n * When there are too many entries in the map, the pie chart can be very\n * crowded. This function will return the entries that have high values.\n * Specifically, the top <maximumEntries> will be stored and the others\n * will be added into an entry called 'other'.\n * @param {Map} map\n * @param {Number} maximumEntries\n * @return {Map}\n */\nfunction trimMap(map, maximumEntries) {\n  if (map.size <= maximumEntries) return map\n  let /** Map */ new_map = new Map()\n  for (let i=0; i<maximumEntries; i++) {\n    let /** Number */ curr = 0\n    let /** String */ currKey = ''\n    for (let [key, value] of map) {\n      if (!new_map.get(key)) {\n        if (value > curr) {\n          curr = value\n          currKey = key\n        }\n      }\n    }\n    new_map.set(currKey, curr)\n  }\n  let /** Number */ restTotal = 0\n  for (let [key, value] of map) {\n    if (!new_map.get(key)) {\n      restTotal += value\n    }\n  }\n  new_map.set('other', restTotal)\n  return new_map\n}","/**\n * @fileoverview Class MapParser will take in a Android build and construct\n * several file name maps (physical address: file name) according to it.\n * The map of each partitions is added by calling MapParser.add(partitionName).\n * You can query the file name being operated by calling\n * MapParser.query(address, datalength).\n */\n\nimport * as zip from '@zip.js/zip.js/dist/zip-full.min.js'\n\nexport class MapParser {\n  /**\n   * This class will take in a .zip Android build and construct a file type map\n   * @param {File} targetFile\n   */\n  constructor(targetFile) {\n    this.build = new zip.ZipReader(new zip.BlobReader(targetFile))\n    this.mapFiles = new Map()\n    this.maps = new Map()\n  }\n\n  /**\n   * Find the .map entries in the .zip build file. Store them as a map with\n   * pairs of (partition name: zip.js entry).\n   */\n  async init() {\n    let /** Array<Entry> */ entries = await this.build.getEntries()\n    const /** RegExp*/ regexPath = /IMAGES\\/[a-z_]*\\.map/g;\n    const /** RegExp*/ regexName = /[\\w_]+(?=\\.map)/g\n    entries.forEach((entry) => {\n      if (entry.filename.match(regexPath)) {\n        this.mapFiles.set(entry.filename.match(regexName)[0], entry)\n      }\n    });\n  }\n\n  /**\n   * According to the .map in the build, build a map for later query.\n   * @param {String} partitionName\n   * @param {Number} totalLength\n   */\n  async add(partitionName, totalLength) {\n    let /** Array<String> */ map = []\n    const /** RegExp */ regexNumber = /(?<![0-9\\-])\\d+(?![0-9\\-])/g\n    const /** Reg */ regexRange = /\\d+\\-\\d+/g\n    for (let i = 0; i < totalLength; i++) map[i] = 'unknown'\n    if (this.mapFiles.get(partitionName)) {\n      let /** String */mapText =\n        await this.mapFiles.get(partitionName).getData(\n          new zip.TextWriter()\n        )\n      let /** Array<String> */fileEntries = mapText.split('\\n')\n      // Each line of the .map file in Android build starts with the filename\n      // Followed by the block address, either a number or a range, for example:\n      // //system/apex/com.android.adbd.apex 54-66 66 66-2663\n      for (let entry of fileEntries) {\n        let /** Array<String> */ elements = entry.split(' ')\n        for (let j = 1; j < elements.length; j++) {\n          let /** Number */ left = 0\n          let /** Number */ right = 0\n          if (elements[j].match(regexRange)) {\n            left = parseInt(elements[j].match(/\\d+/g)[0])\n            right = parseInt(elements[j].match(/\\d+/g)[1])\n          } else {\n            left = parseInt(elements[j].match(regexNumber))\n            right = parseInt(elements[j].match(regexNumber))\n          }\n          InsertMap(map, elements[0], left, right)\n        }\n      }\n      this.maps.set(partitionName, map)\n    }\n    else {\n      this.maps.set(partitionName, map)\n    }\n  }\n\n  /**\n   * Return the filename of given address.\n   * @param {String} partitionName\n   * @param {Array<PartitionUpdate>} extents\n   * @return {Array<String>}\n   */\n  query(partitionName, extents) {\n    let /** Array<String> */ names = []\n    let /** Array<String> */ map = this.maps.get(partitionName)\n    for (let ext of extents) {\n      names.push(queryMap(map,\n        ext.startBlock,\n        ext.startBlock + ext.numBlocks))\n    }\n    return names\n  }\n}\n\n/**\n * Fill in the hashtable from <left> to <right> using <name>.\n * @param {Array<String>} map\n * @param {String} name\n * @param {Number} left\n * @param {Number} right\n */\nfunction InsertMap(map, name, left, right) {\n  for (let i = left; i <= right; i++) {\n    map[i] = name\n  }\n}\n\n/**\n * Query the hashtable <map> using index <address>.\n * @param {Array<String>} map\n * @param {Number} left\n * @param {Number} right\n */\nfunction queryMap(map, left, right) {\n  // Assuming the consecutive blocks belong to the same file\n  // Only the start block is queried here.\n  return map[left]\n}","/**\n * @fileoverview Offer functions that can be used to parse the partitionUpdate\n * and then do statistics over it. One can use analysePartitions to specify the\n * partitions been analysed and metrics.\n */\n\nimport { OpType, MergeOpType } from '@/services/payload.js'\nimport { EchartsData } from '@/services/echarts_data.js'\nimport { MapParser } from '@/services/map_parser.js'\n\n/**\n * Add a <value> to a element associated to <key>. If the element dose not\n * exists than its value will be initialized to zero.\n * @param {Map} map\n * @param {String} key\n * @param {Number} value\n */\nfunction addNumberToMap(map, key, value) {\n  if (!map.get(key)) {\n    map.set(key, 0)\n  }\n  map.set(key, map.get(key) + value)\n}\n\n/**\n * Return a statistics over the numbers of blocks (in destination) that are\n * being operated by different installation operation (e.g. REPLACE, BSDIFF).\n * Only partitions that are being passed in will be included.\n * @param {Array<PartitionUpdate>} partitions\n * @return {Map}\n */\nexport function operatedBlockStatistics(partitions) {\n  let /** Map */ operatedBlocks = new Map()\n  let /** OpType */ opType = new OpType()\n  for (let partition of partitions) {\n    for (let operation of partition.operations) {\n      let operationType = opType.mapType.get(operation.type)\n      addNumberToMap(\n        operatedBlocks,\n        operationType,\n        numBlocks(operation.dstExtents))\n    }\n  }\n  return operatedBlocks\n}\n\nexport function mergeOperationStatistics(partitions, blockSize) {\n  let /** Map */ mergeOperations = new Map()\n  let /** MergeOpType */ opType = new MergeOpType()\n  let /** Number */ totalBlocks = 0\n  for (let partition of partitions) {\n    for (let operation of partition.mergeOperations) {\n      let operationType = opType.mapType.get(operation.type)\n      addNumberToMap(\n        mergeOperations,\n        operationType,\n        operation.dstExtent.numBlocks)\n    }\n    // The total blocks number should be rounded up\n    totalBlocks += Math.ceil(partition.newPartitionInfo.size / blockSize)\n  }\n  // The COW merge operation is default to be COW_replace and not shown in\n  // the manifest info. We have to mannually add that part of operations,\n  // by subtracting the total blocks with other blocks.\n  mergeOperations.forEach((value, key) => totalBlocks -= value)\n  mergeOperations.set('COW_REPLACE', totalBlocks)\n  return mergeOperations\n}\n\n/**\n * Return a statistics over the disk usage of payload.bin, based on the type of\n * installation operations. Only partitions that are being passed in will be\n * included.\n * @param {Array<PartitionUpdate>} partitions\n * @return {Map}\n */\nexport function operatedPayloadStatistics(partitions) {\n  let /** Map */ operatedBlocks = new Map()\n  let /** OpType */ opType = new OpType()\n  for (let partition of partitions) {\n    for (let operation of partition.operations) {\n      let operationType = opType.mapType.get(operation.type)\n      addNumberToMap(\n        operatedBlocks,\n        operationType,\n        operation.dataLength)\n    }\n  }\n  return operatedBlocks\n}\n\n/**\n * Return a statistics over the disk usage of each file types in a OTA package.\n * A target file has to be provided and address-filename maps will be built.\n * Only partitions that are being passed in will be included.\n * @param {Array<PartitionUpdate>} partitions\n * @param {Number} blockSize\n * @param {File} targetFile\n * @return {Map}\n */\nexport async function operatedExtensionStatistics(partitions, blockSize, targetFile) {\n  let /** Map */ operatedExtensions = new Map()\n  if (!targetFile) {\n    return operatedExtensions\n  }\n  let buildMap = new MapParser(targetFile)\n  await buildMap.init()\n  for (let partition of partitions) {\n    await buildMap.add(\n      partition.partitionName,\n      Math.ceil(partition.newPartitionInfo.size / blockSize))\n    for (let operation of partition.operations) {\n      if (!operation.hasOwnProperty('dataLength')) continue\n      let operatedFileNames = buildMap.query(\n        partition.partitionName,\n        operation.dstExtents)\n      let extentDataLength = distributeExtensions(\n        operatedFileNames,\n        operation.dstExtents,\n        operation.dataLength\n      )\n      extentDataLength.forEach((value, key) => {\n        addNumberToMap(\n          operatedExtensions,\n          key,\n          value\n        )\n      })\n    }\n  }\n  return operatedExtensions\n}\n\n/**\n * Analyse the given partitions using the given metrics.\n * @param {String} metrics\n * @param {Array<PartitionUpdate>} partitions\n * @return {EchartsData}\n */\nexport async function analysePartitions(metrics, partitions, blockSize = 4096, targetFile = null) {\n  let /** Map */statisticsData\n  let /** Echartsdata */ echartsData\n  switch (metrics) {\n  case 'blocks':\n    statisticsData = operatedBlockStatistics(partitions)\n    echartsData = new EchartsData(\n      statisticsData,\n      'Operated blocks in target build',\n      'blocks'\n    )\n    break\n  case 'payload':\n    statisticsData = operatedPayloadStatistics(partitions)\n    echartsData = new EchartsData(\n      statisticsData,\n      'Payload disk usage',\n      'bytes'\n    )\n    break\n  case 'COWmerge':\n    statisticsData = mergeOperationStatistics(partitions, blockSize)\n    echartsData = new EchartsData(\n      statisticsData,\n      'COW merge operations',\n      'blocks'\n    )\n    break\n  case 'extensions':\n    try {\n      statisticsData = await operatedExtensionStatistics(partitions, blockSize, targetFile)\n    }\n    catch (err) {\n      throw err\n    }\n    echartsData = new EchartsData(\n      statisticsData,\n      'Size of operated filename extensions',\n      'bytes'\n    )\n  }\n  if (echartsData) {\n    return echartsData\n  } else {\n    throw 'Please double check if this is a proper AB OTA package.'\n  }\n}\n\n/**\n * Calculate the number of blocks being operated\n * @param {Array<InstallOperations>} exts\n * @return {number}\n */\nexport function numBlocks(exts) {\n  const accumulator = (total, ext) => total + ext.numBlocks\n  return exts.reduce(accumulator, 0)\n}\n\n/**\n * Return a string that indicates the blocks being operated\n * in the manner of (start_block, block_length)\n * @param {Array<InstallOperations>} exts\n * @return {string}\n */\nexport function displayBlocks(exts) {\n  const accumulator = (total, ext) =>\n    total + '(' + ext.startBlock + ',' + ext.numBlocks + ')'\n  return exts.reduce(accumulator, '')\n}\n\n/**\n * Return a map with pairs of (file extension, data length used by this\n * extension). The total data length will be distributed by the blocks ratio\n * of each extent.\n * @param {Array<String>} filenames\n * @param {Array<InstallOperations>} exts\n * @param {Number} length\n * @return {Map}\n */\nexport function distributeExtensions(filenames, exts, length) {\n  let totalBlocks = numBlocks(exts)\n  let distributedLengths = new Map()\n  for (let i = 0; i < filenames.length; i++) {\n    addNumberToMap(\n      distributedLengths,\n      name2Extension(filenames[i]),\n      Math.round(length * exts[i].numBlocks / totalBlocks)\n    )\n  }\n  return distributedLengths\n}\n\n/**\n * convert a filename into extension, for example:\n * '//system/apex/com.android.adbd.apex' => 'apex'\n * @param {String} filename\n * @return {String}\n */\nexport function name2Extension(filename) {\n  let elements = filename.split('.')\n  if (elements.length>1) {\n    return elements[elements.length - 1]\n  } else if (elements[0]==='unknown') {\n    return 'unknown'\n  } else {\n    return 'no-extension'\n  }\n}","import { render } from \"./OperationDetail.vue?vue&type=template&id=74ddc2c9\"\nimport script from \"./OperationDetail.vue?vue&type=script&lang=js\"\nexport * from \"./OperationDetail.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","import { render } from \"./PartitionDetail.vue?vue&type=template&id=07beeff1&scoped=true\"\nimport script from \"./PartitionDetail.vue?vue&type=script&lang=js\"\nexport * from \"./PartitionDetail.vue?vue&type=script&lang=js\"\n\nimport \"./PartitionDetail.vue?vue&type=style&index=0&id=07beeff1&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-07beeff1\"\n\nexport default script","<template>\n  <PartialCheckbox\n    v-model=\"partitionInclude\"\n    :labels=\"updatePartitions\"\n  />\n  <button @click=\"updateChart('blocks')\">\n    Analyse Installed Blocks (in target build)\n  </button>\n  <button @click=\"updateChart('payload')\">\n    Analyse Payload Composition\n  </button>\n  <button @click=\"updateChart('COWmerge')\">\n    Analyse COW Merge Operations\n  </button>\n  <BaseFile\n    label=\"Select The Target Android Build\"\n    @file-select=\"selectBuild\"\n  />\n  <button\n    :disabled=\"!targetFile\"\n    @click=\"updateChart('extensions')\"\n  >\n    Analyse File Extensions\n  </button>\n  <div v-if=\"echartsData\">\n    <PieChart :echartsData=\"echartsData\" />\n  </div>\n</template>\n\n<script>\nimport PartialCheckbox from '@/components/PartialCheckbox.vue'\nimport PieChart from '@/components/PieChart.vue'\nimport BaseFile from '@/components/BaseFile.vue'\nimport { analysePartitions } from '../services/payload_composition.js'\nimport { chromeos_update_engine as update_metadata_pb } from '../services/update_metadata_pb.js'\n\nexport default {\n  components: {\n    PartialCheckbox,\n    PieChart,\n    BaseFile\n  },\n  props: {\n    manifest: {\n      type: update_metadata_pb.DeltaArchiveManifest,\n      default: () => [],\n    },\n  },\n  data() {\n    return {\n      partitionInclude: new Map(),\n      echartsData: null,\n      listData: '',\n      targetFile: null\n    }\n  },\n  computed: {\n    updatePartitions() {\n      return this.manifest.partitions.map((partition) => {\n        return partition.partitionName\n      })\n    },\n  },\n  methods: {\n    async updateChart(metrics) {\n      let partitionSelected = this.manifest.partitions.filter((partition) =>\n        this.partitionInclude.get(partition.partitionName)\n      )\n      try {\n        this.echartsData = await analysePartitions(\n          metrics,\n          partitionSelected,\n          this.manifest.blockSize,\n          this.targetFile) }\n      catch (err) {\n        alert('Cannot be processed for the following issue: ', err)\n      }\n    },\n    selectBuild(files) {\n      //TODO(lishutong) check the version of target file is same to the OTA target\n      this.targetFile = files[0]\n    }\n  },\n}\n</script>\n\n<style scoped>\n.list-data {\n  text-align: center;\n}\n</style>","<template>\n  <ul v-bind=\"$attrs\">\n    <button\n      type=\"button\"\n      @click=\"revertAllSelection\"\n      v-text=\"selectAllText[selectAll]\"\n    />\n    <br>\n    <li\n      v-for=\"label in labels\"\n      :key=\"label\"\n    >\n      <input\n        type=\"checkbox\"\n        :value=\"label\"\n        :checked=\"modelValue.get(label)\"\n        @change=\"updateSelected($event.target.value)\"\n      >\n      <label v-if=\"label\"> {{ label }} </label>\n    </li>\n  </ul>\n</template>\n\n<script>\nexport default {\n  props: {\n    labels: {\n      type: Array,\n      default: new Array(),\n    },\n    modelValue: {\n      type: Map,\n      default: new Map(),\n    },\n  },\n  data() {\n    return {\n      selectAll: 1,\n      selectAllText: ['Select All', 'Unselect All'],\n    }\n  },\n  mounted() {\n    // Set the default value to be true once mounted\n    for (let key of this.labels) {\n      this.modelValue.set(key, true)\n    }\n  },\n  methods: {\n    updateSelected(newSelect) {\n      this.modelValue.set(newSelect, !this.modelValue.get(newSelect))\n      this.$emit('update:modelValue', this.modelValue)\n    },\n    revertAllSelection() {\n      this.selectAll = 1 - this.selectAll\n      for (let key of this.modelValue.keys()) {\n        this.modelValue.set(key, Boolean(this.selectAll))\n      }\n    },\n  },\n}\n</script>\n\n<style scoped>\nul > li {\n  display: inline-block;\n  list-style-type: none;\n  margin-left: 5%;\n  margin-right: 5%;\n  top: 0px;\n  height: 50px;\n}\n</style>","import { render } from \"./PartialCheckbox.vue?vue&type=template&id=749e9611&scoped=true\"\nimport script from \"./PartialCheckbox.vue?vue&type=script&lang=js\"\nexport * from \"./PartialCheckbox.vue?vue&type=script&lang=js\"\n\nimport \"./PartialCheckbox.vue?vue&type=style&index=0&id=749e9611&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-749e9611\"\n\nexport default script","<template>\n  <v-chart\n    class=\"chart\"\n    :option=\"getEchartsOption\"\n  />\n</template>\n\n<script>\nimport { use } from 'echarts/core'\nimport { CanvasRenderer } from 'echarts/renderers'\nimport { PieChart } from 'echarts/charts'\nimport {\n  TitleComponent,\n  TooltipComponent,\n  LegendComponent,\n} from 'echarts/components'\nimport VChart, { THEME_KEY } from 'vue-echarts'\nimport { EchartsData } from '@/services/echarts_data.js'\n\nuse([\n  CanvasRenderer,\n  PieChart,\n  TitleComponent,\n  TooltipComponent,\n  LegendComponent,\n])\n\nexport default {\n  components: {\n    VChart,\n  },\n  provide: {\n    [THEME_KEY]: 'light',\n  },\n  props: {\n    echartsData: {\n      type: EchartsData,\n      required: true,\n    },\n  },\n  computed: {\n    getEchartsOption() {\n      return this.echartsData.getEchartsOption()\n    },\n  },\n}\n</script>\n\n<style scoped>\n.chart {\n  height: 400px;\n}\n</style>","import { render } from \"./PieChart.vue?vue&type=template&id=6d824429&scoped=true\"\nimport script from \"./PieChart.vue?vue&type=script&lang=js\"\nexport * from \"./PieChart.vue?vue&type=script&lang=js\"\n\nimport \"./PieChart.vue?vue&type=style&index=0&id=6d824429&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-6d824429\"\n\nexport default script","import { render } from \"./PayloadComposition.vue?vue&type=template&id=a7ba14a4&scoped=true\"\nimport script from \"./PayloadComposition.vue?vue&type=script&lang=js\"\nexport * from \"./PayloadComposition.vue?vue&type=script&lang=js\"\n\nimport \"./PayloadComposition.vue?vue&type=style&index=0&id=a7ba14a4&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-a7ba14a4\"\n\nexport default script","import { render } from \"./PayloadDetail.vue?vue&type=template&id=df69c15a&scoped=true\"\nimport script from \"./PayloadDetail.vue?vue&type=script&lang=js\"\nexport * from \"./PayloadDetail.vue?vue&type=script&lang=js\"\n\nimport \"./PayloadDetail.vue?vue&type=style&index=0&id=df69c15a&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-df69c15a\"\n\nexport default script","import { render } from \"./PackageAnalysis.vue?vue&type=template&id=72466aae\"\nimport script from \"./PackageAnalysis.vue?vue&type=script&lang=js\"\nexport * from \"./PackageAnalysis.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","<template>\n  <div class=\"about\">\n    <p>A GUI for the Android OTA generating.</p>\n  </div>\n</template>\n","import { render } from \"./About.vue?vue&type=template&id=3fc5473b\"\nconst script = {}\nscript.render = render\n\nexport default script","import { createRouter, createWebHistory } from 'vue-router'\nimport PackageAnalysis from '@/views/PackageAnalysis.vue'\nimport About from '@/views/About.vue'\n\nconst routes = [\n  {\n    path: '/',\n    name: 'Analysis',\n    component: PackageAnalysis,\n    meta: {\n      title: 'Analyse OTA package - from AOSP'\n    }\n  },\n  {\n    path: '/About',\n    name: 'About',\n    component: About\n  }\n]\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n})\n\n// This callback runs before every route change, including on page load.\nrouter.beforeEach((to, from, next) => {\n  // This goes through the matched routes from last to first, finding the closest route with a title.\n  // e.g., if we have `/some/deep/nested/route` and `/some`, `/deep`, and `/nested` have titles,\n  // `/nested`'s will be chosen.\n  const nearestWithTitle = to.matched.slice().reverse().find(r => r.meta && r.meta.title);\n\n  // Find the nearest route element with meta tags.\n  const nearestWithMeta = to.matched.slice().reverse().find(r => r.meta && r.meta.metaTags);\n\n  const previousNearestWithMeta = from.matched.slice().reverse().find(r => r.meta && r.meta.metaTags);\n\n  // If a route with a title was found, set the document (page) title to that value.\n  if(nearestWithTitle) {\n    document.title = nearestWithTitle.meta.title;\n  } else if(previousNearestWithMeta) {\n    document.title = previousNearestWithMeta.meta.title;\n  }\n\n  // Remove any stale meta tags from the document using the key attribute we set below.\n  Array.from(document.querySelectorAll('[data-vue-router-controlled]')).map(el => el.parentNode.removeChild(el));\n\n  // Skip rendering meta tags if there are none.\n  if(!nearestWithMeta) return next();\n\n  // Turn the meta tag definitions into actual elements in the head.\n  nearestWithMeta.meta.metaTags.map(tagDef => {\n    const tag = document.createElement('meta');\n\n    Object.keys(tagDef).forEach(key => {\n      tag.setAttribute(key, tagDef[key]);\n    });\n\n    // We use this to track which meta tags we create so we don't interfere with other ones.\n    tag.setAttribute('data-vue-router-controlled', '');\n\n    return tag;\n  })\n  // Add the meta tags to the document head.\n    .forEach(tag => document.head.appendChild(tag));\n\n  next();\n});\n\nexport default router\n","import { createStore } from 'vuex'\n\nexport default createStore({\n  state: {},\n  mutations: {},\n  actions: {},\n  modules: {}\n})\n","import { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\ncreateApp(App)\n  .use(store)\n  .use(router)\n  .mount('#app')\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./PayloadDetail.vue?vue&type=style&index=0&id=df69c15a&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./BaseFile.vue?vue&type=style&index=0&id=b6697dfa&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./PartialCheckbox.vue?vue&type=style&index=0&id=749e9611&scoped=true&lang=css\""],"sourceRoot":""}