{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/BasicInfo.vue?12f9","webpack:///./src/components/PieChart.vue?f5d6","webpack:///./src/views/NotFound.vue?8244","webpack:///./src/plugins/vuetify.js","webpack:///./src/App.vue","webpack:///./src/App.vue?dfb6","webpack:///./src/views/PackageAnalysis.vue","webpack:///./src/components/BaseFile.vue","webpack:///./src/components/BaseFile.vue?0a43","webpack:///./src/components/PayloadDetail.vue","webpack:///./src/components/PartitionDetail.vue","webpack:///./src/services/update_metadata_pb.js","webpack:///./src/services/payload_nonab.js","webpack:///./src/services/payload.js","webpack:///./src/components/OperationDetail.vue","webpack:///./src/services/echarts_data.js","webpack:///./src/services/map_parser.js","webpack:///./src/services/payload_composition.js","webpack:///./src/components/OperationDetail.vue?78ae","webpack:///./src/components/PartitionDetail.vue?39ae","webpack:///./src/components/BasicInfo.vue","webpack:///./src/components/BasicInfo.vue?4aaa","webpack:///./src/components/PayloadDetail.vue?5065","webpack:///./src/components/PayloadComposition.vue","webpack:///./src/components/PartialCheckbox.vue","webpack:///./src/components/PartialCheckbox.vue?7829","webpack:///./src/components/PieChart.vue","webpack:///./src/components/PieChart.vue?c4e9","webpack:///./src/components/PayloadComposition.vue?c966","webpack:///./src/views/PackageAnalysis.vue?c891","webpack:///./src/views/Demo.vue","webpack:///./src/views/Demo.vue?3004","webpack:///./src/views/About.vue","webpack:///./src/views/About.vue?008a","webpack:///./src/views/NotFound.vue","webpack:///./src/views/NotFound.vue?8fd3","webpack:///./src/router/index.js","webpack:///./src/store/index.js","webpack:///./src/main.js","webpack:///./src/components/BaseFile.vue?8287","webpack:///./src/components/PartialCheckbox.vue?6fe9","webpack:///./src/components/PayloadDetail.vue?f5ff","webpack:///./src/components/OperationDetail.vue?0919","webpack:///./src/App.vue?bd65","webpack:///./src/components/PartitionDetail.vue?1bae","webpack:///./src/components/PayloadComposition.vue?e5b8"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","createVuetify","components","directives","rounded","color","links","link","to","class","fluid","render","cols","md","label","unpackOTA","zipFile","payload","vertical","manifest","dragover","dragleave","drop","fileName","ref","type","accept","handleFileChange","props","String","default","methods","event","this","$emit","$refs","file","files","preventDefault","currentTarget","classList","contains","add","remove","dataTransfer","__scopeId","style","partitions","partition","partitionName","elevation","hover","shaped","metadata_signature","nonAB","octToHex","signatures","estimateCowSize","toggle","showInfo","oldPartitionInfo","size","hash","newPartitionInfo","operations","showOPs","operation","dataSha256Hash","mapType","opType","$Reader","$protobuf","$Writer","$util","$root","chromeos_update_engine","Extent","properties","keys","startBlock","Long","fromBits","numBlocks","encode","message","writer","uint32","uint64","encodeDelimited","ldelim","decode","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","isInteger","low","high","fromObject","fromValue","unsigned","parseInt","LongBits","toNumber","toObject","options","defaults","long","longs","toString","Number","toJSON","constructor","toJSONOptions","Signatures","emptyArray","Signature","fork","Array","isArray","error","TypeError","arrays","version","newBuffer","unpaddedSignatureSize","bytes","fixed32","isString","base64","PartitionInfo","ImageInfo","board","channel","buildChannel","buildVersion","string","InstallOperation","srcExtents","dstExtents","xorMap","dataOffset","dataLength","srcLength","dstLength","srcSha256Hash","emptyObject","int32","end2","tag2","ProtocolError","instance","isObject","key32Re","test","keys2","objects","enums","Type","valuesById","values","CowMergeOperation","srcExtent","dstExtent","srcOffset","PartitionUpdate","newPartitionSignature","mergeOperations","runPostinstall","postinstallPath","filesystemType","postinstallOptional","hashTreeDataExtent","hashTreeExtent","hashTreeAlgorithm","hashTreeSalt","fecDataExtent","fecExtent","fecRoots","bool","Boolean","DynamicPartitionGroup","partitionNames","DynamicPartitionMetadata","groups","snapshotEnabled","vabcEnabled","vabcCompressionParam","cowVersion","ApexInfo","packageName","isCompressed","decompressedSize","int64","ApexMetadata","apexInfo","DeltaArchiveManifest","installOperations","kernelInstallOperations","blockSize","signaturesOffset","signaturesSize","oldKernelInfo","newKernelInfo","oldRootfsInfo","newRootfsInfo","oldImageInfo","newImageInfo","minorVersion","maxTimestamp","dynamicPartitionMetadata","partialUpdate","PayloadNonAB","packedFile","Blocksize","regexName","getEntries","entries","entry","filename","match","newPartition","getData","zip","rawText","parseTransferList","lines","split","totalBlocks","entryStashed","maxStashed","sizeNewData","newDataSize","line","op","elements","reduce","parseRange","RegExp","uncompressedSize","extents","rangeset","regexRange","extent","_MAGIC","_VERSION_SIZE","_MANIFEST_LEN_SIZE","_METADATA_SIGNATURE_LEN_SIZE","_PAYLOAD_HEADER_SIZE","_BRILLO_MAJOR_PAYLOAD_VERSION","MetadataFormat","prefix","StopIteration","Error","OTAPayloadBlobWriter","contentType","offset","blob","Blob","prefixLength","array","buffer","readHeader","manifest_len","metadata_signature_len","console","log","readManifest","readSignature","Payload","cursor","metadata","init","alert","view","DataView","getBigUint64","a","BigInt","getUint32","b","bigNumber","getUInt16","arrayBuffer","decoder","TextDecoder","magic","header_version","readInt","update_metadata_pb","Uint8Array","formatter","regex","trimEntry","unzip","parseMetadata","DefaultMap","has","Map","OpType","types","set","MergeOpType","bufferArray","space","maxLine","hex_table","getWithDefault","srcTotalBlocks","srcBlocks","dstTotalBlocks","dstBlocks","EchartsData","statisticData","title","unit","maximumEntries","table","trimMap","option","text","left","tooltip","trigger","legend","orient","top","from","series","radius","center","map","pair","emphasis","itemStyle","shadowBlur","shadowOffsetX","shadowColor","new_map","curr","currKey","restTotal","MapParser","targetFile","build","mapFiles","maps","regexPath","forEach","totalLength","regexNumber","mapText","fileEntries","right","InsertMap","names","ext","queryMap","addNumberToMap","operatedBlockStatistics","operatedBlocks","operationType","mergeOperationStatistics","Math","ceil","operatedPayloadStatistics","operatedExtensionStatistics","operatedExtensions","buildMap","operatedFileNames","query","extentDataLength","distributeExtensions","analysePartitions","metrics","statisticsData","echartsData","exts","accumulator","total","displayBlocks","filenames","distributedLengths","name2Extension","round","required","mounted","OperationDetail","created","$attrs","lastModifiedDate","preBuild","File","PartitionDetail","BasicInfo","partitionInclude","labels","updatePartitions","block","updateChart","disabled","demo","selectBuild","revertAllSelection","selectAllText","selectAll","checked","modelValue","updateSelected","$event","target","newSelect","getEchartsOption","VChart","provide","computed","PartialCheckbox","PieChart","BaseFile","listData","responseType","download","partitionSelected","filter","PayloadDetail","PayloadComposition","script","href","routes","path","component","PackageAnalysis","meta","Demo","About","NotFound","router","createRouter","history","createWebHistory","process","beforeEach","next","nearestWithTitle","matched","reverse","find","nearestWithMeta","metaTags","previousNearestWithMeta","document","querySelectorAll","el","parentNode","removeChild","tagDef","createElement","setAttribute","head","appendChild","createStore","state","mutations","actions","app","createApp","App","use","store","vuetify","mount"],"mappings":"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","file":"js/app.f527e5d9.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/analyseOTA/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./BasicInfo.vue?vue&type=style&index=0&id=0e858ace&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./PieChart.vue?vue&type=style&index=0&id=6d824429&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./NotFound.vue?vue&type=style&index=0&id=1eaf2b4c&scoped=true&lang=css\"","import '@mdi/font/css/materialdesignicons.css'\nimport 'vuetify/lib/styles/main.sass'\nimport { createVuetify } from 'vuetify'\nimport * as components from 'vuetify/lib/components'\nimport * as directives from 'vuetify/lib/directives'\n\nexport default createVuetify({\n  components,\n  directives,\n})\n","<template>\n  <v-app>\n    <v-app-bar\n      rounded\n      color=\"primary\"\n    >\n      <v-app-bar-title> OTA Analyzer </v-app-bar-title>\n      <v-spacer />\n      <v-btn\n        v-for=\"link in links\"\n        :key=\"`${link}-header-link`\"\n        :to=\"{ name: link }\"\n        class=\"ml-5\"\n        color=\"primary\"\n      >\n        {{ link }}\n      </v-btn>\n    </v-app-bar>\n    <v-main>\n      <v-container fluid>\n        <router-view />\n      </v-container>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      links: ['Analysis', 'Demo', 'About'],\n    }\n  },\n}\n</script>\n\n<style>\nh3 {\n  text-align: center;\n}\n</style>","import { render } from \"./App.vue?vue&type=template&id=720154ec\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=720154ec&lang=css\"\nscript.render = render\n\nexport default script","<template>\n  <v-row>\n    <v-col\n      cols=\"12\"\n      md=\"6\"\n    >\n      <BaseFile\n        label=\"Please drag and drop an OTA package or Select one\"\n        @file-select=\"unpackOTA\"\n      />\n      <PayloadDetail\n        v-if=\"zipFile && payload\"\n        :zipFile=\"zipFile\"\n        :payload=\"payload\"\n      />\n    </v-col>\n    <v-divider\n      vertical\n    />\n    <v-col\n      cols=\"12\"\n      md=\"6\"\n    >\n      <PayloadComposition\n        v-if=\"zipFile && payload.manifest\"\n        :manifest=\"payload.manifest\"\n      />\n    </v-col>\n  </v-row>\n</template>\n\n<script>\nimport BaseFile from '@/components/BaseFile.vue'\nimport PayloadDetail from '@/components/PayloadDetail.vue'\nimport PayloadComposition from '@/components/PayloadComposition.vue'\nimport { Payload } from '@/services/payload.js'\n\nexport default {\n  components: {\n    BaseFile,\n    PayloadDetail,\n    PayloadComposition,\n  },\n  data() {\n    return {\n      zipFile: null,\n      payload: null,\n    }\n  },\n  methods: {\n    async unpackOTA(files) {\n      this.zipFile = files[0]\n      try {\n        this.payload = new Payload(this.zipFile)\n        await this.payload.init()\n      } catch (err) {\n        alert('Please check if this is a correct OTA package (.zip).')\n        console.log(err)\n      }\n    },\n  },\n}\n</script>\n","<template>\n  <label class=\"file-select ma-5\">\n    <div\n      class=\"select-button\"\n      @dragover=\"dragover\"\n      @dragleave=\"dragleave\"\n      @drop=\"drop\"\n    >\n      <span v-if=\"label\">{{ !fileName ? label : '' }}</span>\n      <span v-else>Select File</span>\n      <div v-if=\"fileName\"> File selected: {{ fileName }}</div>\n    </div>\n    <input\n      ref=\"file\"\n      type=\"file\"\n      accept=\".zip\"\n      @change=\"handleFileChange\"\n    >\n  </label>\n</template>\n\n<script>\nexport default {\n  props: {\n    label: {\n      type: String,\n      default: '',\n    },\n  },\n  data() {\n    return {\n      fileName: '',\n    }\n  },\n  methods: {\n    handleFileChange(event) {\n      this.$emit('file-select', this.$refs.file.files)\n      this.fileName = this.$refs.file.files[0].name\n    },\n    dragover(event) {\n      event.preventDefault()\n      if (!event.currentTarget.classList.contains('file-hover')) {\n        event.currentTarget.classList.add('file-hover')\n      }\n    },\n    dragleave(event) {\n      event.currentTarget.classList.remove('file-hover')\n    },\n    drop(event) {\n      event.preventDefault()\n      this.$refs.file.files = event.dataTransfer.files\n      this.handleFileChange(event)\n      event.currentTarget.classList.remove('file-hover')\n    },\n  },\n}\n</script>\n\n<style scoped>\n.file-select > .select-button {\n  padding: 3rem;\n  border-radius: 0.3rem;\n  border: 4px dashed #eaebec;\n  text-align: center;\n  font-weight: bold;\n  cursor: pointer;\n}\n\n.file-select > input[type='file'] {\n  display: none;\n}\n\n.file-hover {\n  background-color: #95e995;\n}\n</style>","import { render } from \"./BaseFile.vue?vue&type=template&id=6b3bd7f8&scoped=true\"\nimport script from \"./BaseFile.vue?vue&type=script&lang=js\"\nexport * from \"./BaseFile.vue?vue&type=script&lang=js\"\n\nimport \"./BaseFile.vue?vue&type=style&index=0&id=6b3bd7f8&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-6b3bd7f8\"\n\nexport default script","<template>\n  <BasicInfo\n    :zipFile=\"zipFile\"\n    :payload=\"payload\"\n    class=\"mb-5\"\n  />\n  <v-divider />\n  <div v-if=\"payload\">\n    <h3>Partition List</h3>\n    <v-row\n      v-if=\"payload.manifest\"\n      class=\"mb-5\"\n    >\n      <v-col\n        v-for=\"partition in payload.manifest.partitions\"\n        :key=\"partition.partitionName\"\n        cols=\"12\"\n        md=\"4\"\n      >\n        <v-card\n          elevation=\"5\"\n          hover\n          shaped\n          class=\"partial-info\"\n        >\n          <PartitionDetail :partition=\"partition\" />\n        </v-card>\n      </v-col>\n    </v-row>\n    <v-divider />\n    <div\n      v-if=\"payload.metadata_signature && !payload.manifest.nonAB\"\n      class=\"signature\"\n    >\n      <h3>Metadata Signature</h3>\n      <span style=\"white-space: pre-wrap\">\n        {{ octToHex(payload.metadata_signature.signatures[0].data) }}\n      </span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport PartitionDetail from './PartitionDetail.vue'\nimport BasicInfo from '@/components/BasicInfo.vue'\nimport { Payload, octToHex } from '@/services/payload.js'\n\nexport default {\n  components: {\n    PartitionDetail,\n    BasicInfo,\n  },\n  props: {\n    zipFile: {\n      type: File,\n      default: null,\n    },\n    payload: {\n      type: Payload,\n      default: null,\n    },\n  },\n  methods: {\n    octToHex: octToHex,\n  },\n}\n</script>\n\n<style scoped>\n.signature {\n  overflow: scroll;\n  height: 200px;\n  width: 100%;\n  word-break: break-all;\n  text-align: center;\n}\n\n.partial-info {\n  padding: 5px;\n}\n</style>","<template>\n  <h4> {{ partition.partitionName }} </h4>\n  <p v-if=\"partition.estimateCowSize\">\n    <strong> Estimate COW Size: </strong> {{ partition.estimateCowSize }} Bytes\n  </p>\n  <div\n    class=\"toggle\"\n    @click=\"toggle('showInfo')\"\n  >\n    <h4> Partition Infos </h4>\n    <ul v-if=\"showInfo\">\n      <li v-if=\"partition.oldPartitionInfo\">\n        <strong>\n          Old Partition Size:\n        </strong>\n        {{ partition.oldPartitionInfo.size }} Bytes\n      </li>\n      <li v-if=\"partition.oldPartitionInfo\">\n        <strong>\n          Old Partition Hash:\n        </strong>\n        {{ octToHex(partition.oldPartitionInfo.hash, false, 16) }}\n      </li>\n      <li>\n        <strong>\n          New Partition Size:\n        </strong>\n        {{ partition.newPartitionInfo.size }} Bytes\n      </li>\n      <li v-if=\"partition.newPartitionInfo.hash\">\n        <strong>\n          New Partition Hash:\n        </strong>\n        {{ octToHex(partition.newPartitionInfo.hash, false, 16) }}\n      </li>\n    </ul>\n  </div>\n  <div\n    class=\"toggle\"\n    @click=\"toggle('showOPs')\"\n  >\n    <h4> Total Operations: {{ partition.operations.length }} </h4>\n    <ul\n      v-if=\"showOPs\"\n    >\n      <li\n        v-for=\"operation in partition.operations\"\n        :key=\"operation.dataSha256Hash\"\n      >\n        <OperationDetail\n          :operation=\"operation\"\n          :mapType=\"opType.mapType\"\n        />\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport { OpType, octToHex } from '@/services/payload.js'\nimport OperationDetail from '@/components/OperationDetail.vue'\n\nexport default {\n  components: {\n    OperationDetail,\n  },\n  props: {\n    partition: {\n      type: Object,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      showOPs: false,\n      showInfo: false,\n      opType: null,\n    }\n  },\n  created() {\n    this.opType = new OpType()\n  },\n  methods: {\n    toggle(key) {\n      this[key] = !this[key]\n    },\n    octToHex: octToHex,\n  },\n}\n</script>\n\n<style scoped>\n.toggle {\n  display: block;\n  cursor: pointer;\n  color: #762ace;\n}\n\nli {\n  list-style-type: none;\n}\n</style>","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\nimport * as $protobuf from \"protobufjs/minimal\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const chromeos_update_engine = $root.chromeos_update_engine = (() => {\n\n    /**\n     * Namespace chromeos_update_engine.\n     * @exports chromeos_update_engine\n     * @namespace\n     */\n    const chromeos_update_engine = {};\n\n    chromeos_update_engine.Extent = (function() {\n\n        /**\n         * Properties of an Extent.\n         * @memberof chromeos_update_engine\n         * @interface IExtent\n         * @property {number|Long|null} [startBlock] Extent startBlock\n         * @property {number|Long|null} [numBlocks] Extent numBlocks\n         */\n\n        /**\n         * Constructs a new Extent.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents an Extent.\n         * @implements IExtent\n         * @constructor\n         * @param {chromeos_update_engine.IExtent=} [properties] Properties to set\n         */\n        function Extent(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Extent startBlock.\n         * @member {number|Long} startBlock\n         * @memberof chromeos_update_engine.Extent\n         * @instance\n         */\n        Extent.prototype.startBlock = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Extent numBlocks.\n         * @member {number|Long} numBlocks\n         * @memberof chromeos_update_engine.Extent\n         * @instance\n         */\n        Extent.prototype.numBlocks = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new Extent instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {chromeos_update_engine.IExtent=} [properties] Properties to set\n         * @returns {chromeos_update_engine.Extent} Extent instance\n         */\n        Extent.create = function create(properties) {\n            return new Extent(properties);\n        };\n\n        /**\n         * Encodes the specified Extent message. Does not implicitly {@link chromeos_update_engine.Extent.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {chromeos_update_engine.IExtent} message Extent message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Extent.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.startBlock != null && Object.hasOwnProperty.call(message, \"startBlock\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.startBlock);\n            if (message.numBlocks != null && Object.hasOwnProperty.call(message, \"numBlocks\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.numBlocks);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Extent message, length delimited. Does not implicitly {@link chromeos_update_engine.Extent.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {chromeos_update_engine.IExtent} message Extent message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Extent.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Extent message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.Extent} Extent\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Extent.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.Extent();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.startBlock = reader.uint64();\n                    break;\n                case 2:\n                    message.numBlocks = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Extent message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.Extent} Extent\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Extent.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Extent message.\n         * @function verify\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Extent.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.startBlock != null && message.hasOwnProperty(\"startBlock\"))\n                if (!$util.isInteger(message.startBlock) && !(message.startBlock && $util.isInteger(message.startBlock.low) && $util.isInteger(message.startBlock.high)))\n                    return \"startBlock: integer|Long expected\";\n            if (message.numBlocks != null && message.hasOwnProperty(\"numBlocks\"))\n                if (!$util.isInteger(message.numBlocks) && !(message.numBlocks && $util.isInteger(message.numBlocks.low) && $util.isInteger(message.numBlocks.high)))\n                    return \"numBlocks: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an Extent message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.Extent} Extent\n         */\n        Extent.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.Extent)\n                return object;\n            let message = new $root.chromeos_update_engine.Extent();\n            if (object.startBlock != null)\n                if ($util.Long)\n                    (message.startBlock = $util.Long.fromValue(object.startBlock)).unsigned = true;\n                else if (typeof object.startBlock === \"string\")\n                    message.startBlock = parseInt(object.startBlock, 10);\n                else if (typeof object.startBlock === \"number\")\n                    message.startBlock = object.startBlock;\n                else if (typeof object.startBlock === \"object\")\n                    message.startBlock = new $util.LongBits(object.startBlock.low >>> 0, object.startBlock.high >>> 0).toNumber(true);\n            if (object.numBlocks != null)\n                if ($util.Long)\n                    (message.numBlocks = $util.Long.fromValue(object.numBlocks)).unsigned = true;\n                else if (typeof object.numBlocks === \"string\")\n                    message.numBlocks = parseInt(object.numBlocks, 10);\n                else if (typeof object.numBlocks === \"number\")\n                    message.numBlocks = object.numBlocks;\n                else if (typeof object.numBlocks === \"object\")\n                    message.numBlocks = new $util.LongBits(object.numBlocks.low >>> 0, object.numBlocks.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Extent message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {chromeos_update_engine.Extent} message Extent\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Extent.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.startBlock = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.startBlock = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.numBlocks = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.numBlocks = options.longs === String ? \"0\" : 0;\n            }\n            if (message.startBlock != null && message.hasOwnProperty(\"startBlock\"))\n                if (typeof message.startBlock === \"number\")\n                    object.startBlock = options.longs === String ? String(message.startBlock) : message.startBlock;\n                else\n                    object.startBlock = options.longs === String ? $util.Long.prototype.toString.call(message.startBlock) : options.longs === Number ? new $util.LongBits(message.startBlock.low >>> 0, message.startBlock.high >>> 0).toNumber(true) : message.startBlock;\n            if (message.numBlocks != null && message.hasOwnProperty(\"numBlocks\"))\n                if (typeof message.numBlocks === \"number\")\n                    object.numBlocks = options.longs === String ? String(message.numBlocks) : message.numBlocks;\n                else\n                    object.numBlocks = options.longs === String ? $util.Long.prototype.toString.call(message.numBlocks) : options.longs === Number ? new $util.LongBits(message.numBlocks.low >>> 0, message.numBlocks.high >>> 0).toNumber(true) : message.numBlocks;\n            return object;\n        };\n\n        /**\n         * Converts this Extent to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.Extent\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Extent.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Extent;\n    })();\n\n    chromeos_update_engine.Signatures = (function() {\n\n        /**\n         * Properties of a Signatures.\n         * @memberof chromeos_update_engine\n         * @interface ISignatures\n         * @property {Array.<chromeos_update_engine.Signatures.ISignature>|null} [signatures] Signatures signatures\n         */\n\n        /**\n         * Constructs a new Signatures.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a Signatures.\n         * @implements ISignatures\n         * @constructor\n         * @param {chromeos_update_engine.ISignatures=} [properties] Properties to set\n         */\n        function Signatures(properties) {\n            this.signatures = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Signatures signatures.\n         * @member {Array.<chromeos_update_engine.Signatures.ISignature>} signatures\n         * @memberof chromeos_update_engine.Signatures\n         * @instance\n         */\n        Signatures.prototype.signatures = $util.emptyArray;\n\n        /**\n         * Creates a new Signatures instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {chromeos_update_engine.ISignatures=} [properties] Properties to set\n         * @returns {chromeos_update_engine.Signatures} Signatures instance\n         */\n        Signatures.create = function create(properties) {\n            return new Signatures(properties);\n        };\n\n        /**\n         * Encodes the specified Signatures message. Does not implicitly {@link chromeos_update_engine.Signatures.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {chromeos_update_engine.ISignatures} message Signatures message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Signatures.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.signatures != null && message.signatures.length)\n                for (let i = 0; i < message.signatures.length; ++i)\n                    $root.chromeos_update_engine.Signatures.Signature.encode(message.signatures[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Signatures message, length delimited. Does not implicitly {@link chromeos_update_engine.Signatures.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {chromeos_update_engine.ISignatures} message Signatures message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Signatures.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Signatures message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.Signatures} Signatures\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Signatures.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.Signatures();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.signatures && message.signatures.length))\n                        message.signatures = [];\n                    message.signatures.push($root.chromeos_update_engine.Signatures.Signature.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Signatures message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.Signatures} Signatures\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Signatures.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Signatures message.\n         * @function verify\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Signatures.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.signatures != null && message.hasOwnProperty(\"signatures\")) {\n                if (!Array.isArray(message.signatures))\n                    return \"signatures: array expected\";\n                for (let i = 0; i < message.signatures.length; ++i) {\n                    let error = $root.chromeos_update_engine.Signatures.Signature.verify(message.signatures[i]);\n                    if (error)\n                        return \"signatures.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Signatures message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.Signatures} Signatures\n         */\n        Signatures.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.Signatures)\n                return object;\n            let message = new $root.chromeos_update_engine.Signatures();\n            if (object.signatures) {\n                if (!Array.isArray(object.signatures))\n                    throw TypeError(\".chromeos_update_engine.Signatures.signatures: array expected\");\n                message.signatures = [];\n                for (let i = 0; i < object.signatures.length; ++i) {\n                    if (typeof object.signatures[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.Signatures.signatures: object expected\");\n                    message.signatures[i] = $root.chromeos_update_engine.Signatures.Signature.fromObject(object.signatures[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Signatures message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {chromeos_update_engine.Signatures} message Signatures\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Signatures.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.signatures = [];\n            if (message.signatures && message.signatures.length) {\n                object.signatures = [];\n                for (let j = 0; j < message.signatures.length; ++j)\n                    object.signatures[j] = $root.chromeos_update_engine.Signatures.Signature.toObject(message.signatures[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Signatures to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.Signatures\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Signatures.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        Signatures.Signature = (function() {\n\n            /**\n             * Properties of a Signature.\n             * @memberof chromeos_update_engine.Signatures\n             * @interface ISignature\n             * @property {number|null} [version] Signature version\n             * @property {Uint8Array|null} [data] Signature data\n             * @property {number|null} [unpaddedSignatureSize] Signature unpaddedSignatureSize\n             */\n\n            /**\n             * Constructs a new Signature.\n             * @memberof chromeos_update_engine.Signatures\n             * @classdesc Represents a Signature.\n             * @implements ISignature\n             * @constructor\n             * @param {chromeos_update_engine.Signatures.ISignature=} [properties] Properties to set\n             */\n            function Signature(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Signature version.\n             * @member {number} version\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @instance\n             */\n            Signature.prototype.version = 0;\n\n            /**\n             * Signature data.\n             * @member {Uint8Array} data\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @instance\n             */\n            Signature.prototype.data = $util.newBuffer([]);\n\n            /**\n             * Signature unpaddedSignatureSize.\n             * @member {number} unpaddedSignatureSize\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @instance\n             */\n            Signature.prototype.unpaddedSignatureSize = 0;\n\n            /**\n             * Creates a new Signature instance using the specified properties.\n             * @function create\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {chromeos_update_engine.Signatures.ISignature=} [properties] Properties to set\n             * @returns {chromeos_update_engine.Signatures.Signature} Signature instance\n             */\n            Signature.create = function create(properties) {\n                return new Signature(properties);\n            };\n\n            /**\n             * Encodes the specified Signature message. Does not implicitly {@link chromeos_update_engine.Signatures.Signature.verify|verify} messages.\n             * @function encode\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {chromeos_update_engine.Signatures.ISignature} message Signature message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Signature.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.version);\n                if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);\n                if (message.unpaddedSignatureSize != null && Object.hasOwnProperty.call(message, \"unpaddedSignatureSize\"))\n                    writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.unpaddedSignatureSize);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Signature message, length delimited. Does not implicitly {@link chromeos_update_engine.Signatures.Signature.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {chromeos_update_engine.Signatures.ISignature} message Signature message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Signature.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Signature message from the specified reader or buffer.\n             * @function decode\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {chromeos_update_engine.Signatures.Signature} Signature\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Signature.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.Signatures.Signature();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.version = reader.uint32();\n                        break;\n                    case 2:\n                        message.data = reader.bytes();\n                        break;\n                    case 3:\n                        message.unpaddedSignatureSize = reader.fixed32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Signature message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {chromeos_update_engine.Signatures.Signature} Signature\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Signature.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Signature message.\n             * @function verify\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Signature.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.version != null && message.hasOwnProperty(\"version\"))\n                    if (!$util.isInteger(message.version))\n                        return \"version: integer expected\";\n                if (message.data != null && message.hasOwnProperty(\"data\"))\n                    if (!(message.data && typeof message.data.length === \"number\" || $util.isString(message.data)))\n                        return \"data: buffer expected\";\n                if (message.unpaddedSignatureSize != null && message.hasOwnProperty(\"unpaddedSignatureSize\"))\n                    if (!$util.isInteger(message.unpaddedSignatureSize))\n                        return \"unpaddedSignatureSize: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Signature message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {chromeos_update_engine.Signatures.Signature} Signature\n             */\n            Signature.fromObject = function fromObject(object) {\n                if (object instanceof $root.chromeos_update_engine.Signatures.Signature)\n                    return object;\n                let message = new $root.chromeos_update_engine.Signatures.Signature();\n                if (object.version != null)\n                    message.version = object.version >>> 0;\n                if (object.data != null)\n                    if (typeof object.data === \"string\")\n                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);\n                    else if (object.data.length)\n                        message.data = object.data;\n                if (object.unpaddedSignatureSize != null)\n                    message.unpaddedSignatureSize = object.unpaddedSignatureSize >>> 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Signature message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {chromeos_update_engine.Signatures.Signature} message Signature\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Signature.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.version = 0;\n                    if (options.bytes === String)\n                        object.data = \"\";\n                    else {\n                        object.data = [];\n                        if (options.bytes !== Array)\n                            object.data = $util.newBuffer(object.data);\n                    }\n                    object.unpaddedSignatureSize = 0;\n                }\n                if (message.version != null && message.hasOwnProperty(\"version\"))\n                    object.version = message.version;\n                if (message.data != null && message.hasOwnProperty(\"data\"))\n                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;\n                if (message.unpaddedSignatureSize != null && message.hasOwnProperty(\"unpaddedSignatureSize\"))\n                    object.unpaddedSignatureSize = message.unpaddedSignatureSize;\n                return object;\n            };\n\n            /**\n             * Converts this Signature to JSON.\n             * @function toJSON\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Signature.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Signature;\n        })();\n\n        return Signatures;\n    })();\n\n    chromeos_update_engine.PartitionInfo = (function() {\n\n        /**\n         * Properties of a PartitionInfo.\n         * @memberof chromeos_update_engine\n         * @interface IPartitionInfo\n         * @property {number|Long|null} [size] PartitionInfo size\n         * @property {Uint8Array|null} [hash] PartitionInfo hash\n         */\n\n        /**\n         * Constructs a new PartitionInfo.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a PartitionInfo.\n         * @implements IPartitionInfo\n         * @constructor\n         * @param {chromeos_update_engine.IPartitionInfo=} [properties] Properties to set\n         */\n        function PartitionInfo(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PartitionInfo size.\n         * @member {number|Long} size\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @instance\n         */\n        PartitionInfo.prototype.size = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * PartitionInfo hash.\n         * @member {Uint8Array} hash\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @instance\n         */\n        PartitionInfo.prototype.hash = $util.newBuffer([]);\n\n        /**\n         * Creates a new PartitionInfo instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {chromeos_update_engine.IPartitionInfo=} [properties] Properties to set\n         * @returns {chromeos_update_engine.PartitionInfo} PartitionInfo instance\n         */\n        PartitionInfo.create = function create(properties) {\n            return new PartitionInfo(properties);\n        };\n\n        /**\n         * Encodes the specified PartitionInfo message. Does not implicitly {@link chromeos_update_engine.PartitionInfo.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {chromeos_update_engine.IPartitionInfo} message PartitionInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PartitionInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.size != null && Object.hasOwnProperty.call(message, \"size\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.size);\n            if (message.hash != null && Object.hasOwnProperty.call(message, \"hash\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.hash);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified PartitionInfo message, length delimited. Does not implicitly {@link chromeos_update_engine.PartitionInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {chromeos_update_engine.IPartitionInfo} message PartitionInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PartitionInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PartitionInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.PartitionInfo} PartitionInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PartitionInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.PartitionInfo();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.size = reader.uint64();\n                    break;\n                case 2:\n                    message.hash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a PartitionInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.PartitionInfo} PartitionInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PartitionInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PartitionInfo message.\n         * @function verify\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PartitionInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))\n                    return \"size: integer|Long expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                if (!(message.hash && typeof message.hash.length === \"number\" || $util.isString(message.hash)))\n                    return \"hash: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a PartitionInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.PartitionInfo} PartitionInfo\n         */\n        PartitionInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.PartitionInfo)\n                return object;\n            let message = new $root.chromeos_update_engine.PartitionInfo();\n            if (object.size != null)\n                if ($util.Long)\n                    (message.size = $util.Long.fromValue(object.size)).unsigned = true;\n                else if (typeof object.size === \"string\")\n                    message.size = parseInt(object.size, 10);\n                else if (typeof object.size === \"number\")\n                    message.size = object.size;\n                else if (typeof object.size === \"object\")\n                    message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber(true);\n            if (object.hash != null)\n                if (typeof object.hash === \"string\")\n                    $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);\n                else if (object.hash.length)\n                    message.hash = object.hash;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a PartitionInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {chromeos_update_engine.PartitionInfo} message PartitionInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PartitionInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.size = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.hash = \"\";\n                else {\n                    object.hash = [];\n                    if (options.bytes !== Array)\n                        object.hash = $util.newBuffer(object.hash);\n                }\n            }\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (typeof message.size === \"number\")\n                    object.size = options.longs === String ? String(message.size) : message.size;\n                else\n                    object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber(true) : message.size;\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;\n            return object;\n        };\n\n        /**\n         * Converts this PartitionInfo to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PartitionInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return PartitionInfo;\n    })();\n\n    chromeos_update_engine.ImageInfo = (function() {\n\n        /**\n         * Properties of an ImageInfo.\n         * @memberof chromeos_update_engine\n         * @interface IImageInfo\n         * @property {string|null} [board] ImageInfo board\n         * @property {string|null} [key] ImageInfo key\n         * @property {string|null} [channel] ImageInfo channel\n         * @property {string|null} [version] ImageInfo version\n         * @property {string|null} [buildChannel] ImageInfo buildChannel\n         * @property {string|null} [buildVersion] ImageInfo buildVersion\n         */\n\n        /**\n         * Constructs a new ImageInfo.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents an ImageInfo.\n         * @implements IImageInfo\n         * @constructor\n         * @param {chromeos_update_engine.IImageInfo=} [properties] Properties to set\n         */\n        function ImageInfo(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ImageInfo board.\n         * @member {string} board\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         */\n        ImageInfo.prototype.board = \"\";\n\n        /**\n         * ImageInfo key.\n         * @member {string} key\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         */\n        ImageInfo.prototype.key = \"\";\n\n        /**\n         * ImageInfo channel.\n         * @member {string} channel\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         */\n        ImageInfo.prototype.channel = \"\";\n\n        /**\n         * ImageInfo version.\n         * @member {string} version\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         */\n        ImageInfo.prototype.version = \"\";\n\n        /**\n         * ImageInfo buildChannel.\n         * @member {string} buildChannel\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         */\n        ImageInfo.prototype.buildChannel = \"\";\n\n        /**\n         * ImageInfo buildVersion.\n         * @member {string} buildVersion\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         */\n        ImageInfo.prototype.buildVersion = \"\";\n\n        /**\n         * Creates a new ImageInfo instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {chromeos_update_engine.IImageInfo=} [properties] Properties to set\n         * @returns {chromeos_update_engine.ImageInfo} ImageInfo instance\n         */\n        ImageInfo.create = function create(properties) {\n            return new ImageInfo(properties);\n        };\n\n        /**\n         * Encodes the specified ImageInfo message. Does not implicitly {@link chromeos_update_engine.ImageInfo.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {chromeos_update_engine.IImageInfo} message ImageInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ImageInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.board != null && Object.hasOwnProperty.call(message, \"board\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.board);\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.key);\n            if (message.channel != null && Object.hasOwnProperty.call(message, \"channel\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.channel);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.version);\n            if (message.buildChannel != null && Object.hasOwnProperty.call(message, \"buildChannel\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.buildChannel);\n            if (message.buildVersion != null && Object.hasOwnProperty.call(message, \"buildVersion\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.buildVersion);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ImageInfo message, length delimited. Does not implicitly {@link chromeos_update_engine.ImageInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {chromeos_update_engine.IImageInfo} message ImageInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ImageInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ImageInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.ImageInfo} ImageInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ImageInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.ImageInfo();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.board = reader.string();\n                    break;\n                case 2:\n                    message.key = reader.string();\n                    break;\n                case 3:\n                    message.channel = reader.string();\n                    break;\n                case 4:\n                    message.version = reader.string();\n                    break;\n                case 5:\n                    message.buildChannel = reader.string();\n                    break;\n                case 6:\n                    message.buildVersion = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an ImageInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.ImageInfo} ImageInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ImageInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ImageInfo message.\n         * @function verify\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ImageInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.board != null && message.hasOwnProperty(\"board\"))\n                if (!$util.isString(message.board))\n                    return \"board: string expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.channel != null && message.hasOwnProperty(\"channel\"))\n                if (!$util.isString(message.channel))\n                    return \"channel: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isString(message.version))\n                    return \"version: string expected\";\n            if (message.buildChannel != null && message.hasOwnProperty(\"buildChannel\"))\n                if (!$util.isString(message.buildChannel))\n                    return \"buildChannel: string expected\";\n            if (message.buildVersion != null && message.hasOwnProperty(\"buildVersion\"))\n                if (!$util.isString(message.buildVersion))\n                    return \"buildVersion: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an ImageInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.ImageInfo} ImageInfo\n         */\n        ImageInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.ImageInfo)\n                return object;\n            let message = new $root.chromeos_update_engine.ImageInfo();\n            if (object.board != null)\n                message.board = String(object.board);\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.channel != null)\n                message.channel = String(object.channel);\n            if (object.version != null)\n                message.version = String(object.version);\n            if (object.buildChannel != null)\n                message.buildChannel = String(object.buildChannel);\n            if (object.buildVersion != null)\n                message.buildVersion = String(object.buildVersion);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ImageInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {chromeos_update_engine.ImageInfo} message ImageInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ImageInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.board = \"\";\n                object.key = \"\";\n                object.channel = \"\";\n                object.version = \"\";\n                object.buildChannel = \"\";\n                object.buildVersion = \"\";\n            }\n            if (message.board != null && message.hasOwnProperty(\"board\"))\n                object.board = message.board;\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.channel != null && message.hasOwnProperty(\"channel\"))\n                object.channel = message.channel;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                object.version = message.version;\n            if (message.buildChannel != null && message.hasOwnProperty(\"buildChannel\"))\n                object.buildChannel = message.buildChannel;\n            if (message.buildVersion != null && message.hasOwnProperty(\"buildVersion\"))\n                object.buildVersion = message.buildVersion;\n            return object;\n        };\n\n        /**\n         * Converts this ImageInfo to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ImageInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ImageInfo;\n    })();\n\n    chromeos_update_engine.InstallOperation = (function() {\n\n        /**\n         * Properties of an InstallOperation.\n         * @memberof chromeos_update_engine\n         * @interface IInstallOperation\n         * @property {chromeos_update_engine.InstallOperation.Type} type InstallOperation type\n         * @property {number|Long|null} [dataOffset] InstallOperation dataOffset\n         * @property {number|Long|null} [dataLength] InstallOperation dataLength\n         * @property {Array.<chromeos_update_engine.IExtent>|null} [srcExtents] InstallOperation srcExtents\n         * @property {number|Long|null} [srcLength] InstallOperation srcLength\n         * @property {Array.<chromeos_update_engine.IExtent>|null} [dstExtents] InstallOperation dstExtents\n         * @property {number|Long|null} [dstLength] InstallOperation dstLength\n         * @property {Uint8Array|null} [dataSha256Hash] InstallOperation dataSha256Hash\n         * @property {Uint8Array|null} [srcSha256Hash] InstallOperation srcSha256Hash\n         * @property {Object.<string,number>|null} [xorMap] InstallOperation xorMap\n         */\n\n        /**\n         * Constructs a new InstallOperation.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents an InstallOperation.\n         * @implements IInstallOperation\n         * @constructor\n         * @param {chromeos_update_engine.IInstallOperation=} [properties] Properties to set\n         */\n        function InstallOperation(properties) {\n            this.srcExtents = [];\n            this.dstExtents = [];\n            this.xorMap = {};\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * InstallOperation type.\n         * @member {chromeos_update_engine.InstallOperation.Type} type\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.type = 0;\n\n        /**\n         * InstallOperation dataOffset.\n         * @member {number|Long} dataOffset\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dataOffset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * InstallOperation dataLength.\n         * @member {number|Long} dataLength\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dataLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * InstallOperation srcExtents.\n         * @member {Array.<chromeos_update_engine.IExtent>} srcExtents\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.srcExtents = $util.emptyArray;\n\n        /**\n         * InstallOperation srcLength.\n         * @member {number|Long} srcLength\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.srcLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * InstallOperation dstExtents.\n         * @member {Array.<chromeos_update_engine.IExtent>} dstExtents\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dstExtents = $util.emptyArray;\n\n        /**\n         * InstallOperation dstLength.\n         * @member {number|Long} dstLength\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dstLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * InstallOperation dataSha256Hash.\n         * @member {Uint8Array} dataSha256Hash\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dataSha256Hash = $util.newBuffer([]);\n\n        /**\n         * InstallOperation srcSha256Hash.\n         * @member {Uint8Array} srcSha256Hash\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.srcSha256Hash = $util.newBuffer([]);\n\n        /**\n         * InstallOperation xorMap.\n         * @member {Object.<string,number>} xorMap\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.xorMap = $util.emptyObject;\n\n        /**\n         * Creates a new InstallOperation instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {chromeos_update_engine.IInstallOperation=} [properties] Properties to set\n         * @returns {chromeos_update_engine.InstallOperation} InstallOperation instance\n         */\n        InstallOperation.create = function create(properties) {\n            return new InstallOperation(properties);\n        };\n\n        /**\n         * Encodes the specified InstallOperation message. Does not implicitly {@link chromeos_update_engine.InstallOperation.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {chromeos_update_engine.IInstallOperation} message InstallOperation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InstallOperation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);\n            if (message.dataOffset != null && Object.hasOwnProperty.call(message, \"dataOffset\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.dataOffset);\n            if (message.dataLength != null && Object.hasOwnProperty.call(message, \"dataLength\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.dataLength);\n            if (message.srcExtents != null && message.srcExtents.length)\n                for (let i = 0; i < message.srcExtents.length; ++i)\n                    $root.chromeos_update_engine.Extent.encode(message.srcExtents[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.srcLength != null && Object.hasOwnProperty.call(message, \"srcLength\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.srcLength);\n            if (message.dstExtents != null && message.dstExtents.length)\n                for (let i = 0; i < message.dstExtents.length; ++i)\n                    $root.chromeos_update_engine.Extent.encode(message.dstExtents[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.dstLength != null && Object.hasOwnProperty.call(message, \"dstLength\"))\n                writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.dstLength);\n            if (message.dataSha256Hash != null && Object.hasOwnProperty.call(message, \"dataSha256Hash\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.dataSha256Hash);\n            if (message.srcSha256Hash != null && Object.hasOwnProperty.call(message, \"srcSha256Hash\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.srcSha256Hash);\n            if (message.xorMap != null && Object.hasOwnProperty.call(message, \"xorMap\"))\n                for (let keys = Object.keys(message.xorMap), i = 0; i < keys.length; ++i)\n                    writer.uint32(/* id 10, wireType 2 =*/82).fork().uint32(/* id 1, wireType 0 =*/8).uint32(keys[i]).uint32(/* id 2, wireType 0 =*/16).uint32(message.xorMap[keys[i]]).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified InstallOperation message, length delimited. Does not implicitly {@link chromeos_update_engine.InstallOperation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {chromeos_update_engine.IInstallOperation} message InstallOperation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InstallOperation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an InstallOperation message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.InstallOperation} InstallOperation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InstallOperation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.InstallOperation(), key, value;\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.dataOffset = reader.uint64();\n                    break;\n                case 3:\n                    message.dataLength = reader.uint64();\n                    break;\n                case 4:\n                    if (!(message.srcExtents && message.srcExtents.length))\n                        message.srcExtents = [];\n                    message.srcExtents.push($root.chromeos_update_engine.Extent.decode(reader, reader.uint32()));\n                    break;\n                case 5:\n                    message.srcLength = reader.uint64();\n                    break;\n                case 6:\n                    if (!(message.dstExtents && message.dstExtents.length))\n                        message.dstExtents = [];\n                    message.dstExtents.push($root.chromeos_update_engine.Extent.decode(reader, reader.uint32()));\n                    break;\n                case 7:\n                    message.dstLength = reader.uint64();\n                    break;\n                case 8:\n                    message.dataSha256Hash = reader.bytes();\n                    break;\n                case 9:\n                    message.srcSha256Hash = reader.bytes();\n                    break;\n                case 10:\n                    if (message.xorMap === $util.emptyObject)\n                        message.xorMap = {};\n                    let end2 = reader.uint32() + reader.pos;\n                    key = 0;\n                    value = 0;\n                    while (reader.pos < end2) {\n                        let tag2 = reader.uint32();\n                        switch (tag2 >>> 3) {\n                        case 1:\n                            key = reader.uint32();\n                            break;\n                        case 2:\n                            value = reader.uint32();\n                            break;\n                        default:\n                            reader.skipType(tag2 & 7);\n                            break;\n                        }\n                    }\n                    message.xorMap[key] = value;\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            if (!message.hasOwnProperty(\"type\"))\n                throw $util.ProtocolError(\"missing required 'type'\", { instance: message });\n            return message;\n        };\n\n        /**\n         * Decodes an InstallOperation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.InstallOperation} InstallOperation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InstallOperation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an InstallOperation message.\n         * @function verify\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        InstallOperation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            switch (message.type) {\n            default:\n                return \"type: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 8:\n            case 6:\n            case 7:\n            case 10:\n            case 9:\n                break;\n            }\n            if (message.dataOffset != null && message.hasOwnProperty(\"dataOffset\"))\n                if (!$util.isInteger(message.dataOffset) && !(message.dataOffset && $util.isInteger(message.dataOffset.low) && $util.isInteger(message.dataOffset.high)))\n                    return \"dataOffset: integer|Long expected\";\n            if (message.dataLength != null && message.hasOwnProperty(\"dataLength\"))\n                if (!$util.isInteger(message.dataLength) && !(message.dataLength && $util.isInteger(message.dataLength.low) && $util.isInteger(message.dataLength.high)))\n                    return \"dataLength: integer|Long expected\";\n            if (message.srcExtents != null && message.hasOwnProperty(\"srcExtents\")) {\n                if (!Array.isArray(message.srcExtents))\n                    return \"srcExtents: array expected\";\n                for (let i = 0; i < message.srcExtents.length; ++i) {\n                    let error = $root.chromeos_update_engine.Extent.verify(message.srcExtents[i]);\n                    if (error)\n                        return \"srcExtents.\" + error;\n                }\n            }\n            if (message.srcLength != null && message.hasOwnProperty(\"srcLength\"))\n                if (!$util.isInteger(message.srcLength) && !(message.srcLength && $util.isInteger(message.srcLength.low) && $util.isInteger(message.srcLength.high)))\n                    return \"srcLength: integer|Long expected\";\n            if (message.dstExtents != null && message.hasOwnProperty(\"dstExtents\")) {\n                if (!Array.isArray(message.dstExtents))\n                    return \"dstExtents: array expected\";\n                for (let i = 0; i < message.dstExtents.length; ++i) {\n                    let error = $root.chromeos_update_engine.Extent.verify(message.dstExtents[i]);\n                    if (error)\n                        return \"dstExtents.\" + error;\n                }\n            }\n            if (message.dstLength != null && message.hasOwnProperty(\"dstLength\"))\n                if (!$util.isInteger(message.dstLength) && !(message.dstLength && $util.isInteger(message.dstLength.low) && $util.isInteger(message.dstLength.high)))\n                    return \"dstLength: integer|Long expected\";\n            if (message.dataSha256Hash != null && message.hasOwnProperty(\"dataSha256Hash\"))\n                if (!(message.dataSha256Hash && typeof message.dataSha256Hash.length === \"number\" || $util.isString(message.dataSha256Hash)))\n                    return \"dataSha256Hash: buffer expected\";\n            if (message.srcSha256Hash != null && message.hasOwnProperty(\"srcSha256Hash\"))\n                if (!(message.srcSha256Hash && typeof message.srcSha256Hash.length === \"number\" || $util.isString(message.srcSha256Hash)))\n                    return \"srcSha256Hash: buffer expected\";\n            if (message.xorMap != null && message.hasOwnProperty(\"xorMap\")) {\n                if (!$util.isObject(message.xorMap))\n                    return \"xorMap: object expected\";\n                let key = Object.keys(message.xorMap);\n                for (let i = 0; i < key.length; ++i) {\n                    if (!$util.key32Re.test(key[i]))\n                        return \"xorMap: integer key{k:uint32} expected\";\n                    if (!$util.isInteger(message.xorMap[key[i]]))\n                        return \"xorMap: integer{k:uint32} expected\";\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an InstallOperation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.InstallOperation} InstallOperation\n         */\n        InstallOperation.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.InstallOperation)\n                return object;\n            let message = new $root.chromeos_update_engine.InstallOperation();\n            switch (object.type) {\n            case \"REPLACE\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"REPLACE_BZ\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"MOVE\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"BSDIFF\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"SOURCE_COPY\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"SOURCE_BSDIFF\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"REPLACE_XZ\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"ZERO\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"DISCARD\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"BROTLI_BSDIFF\":\n            case 10:\n                message.type = 10;\n                break;\n            case \"PUFFDIFF\":\n            case 9:\n                message.type = 9;\n                break;\n            }\n            if (object.dataOffset != null)\n                if ($util.Long)\n                    (message.dataOffset = $util.Long.fromValue(object.dataOffset)).unsigned = true;\n                else if (typeof object.dataOffset === \"string\")\n                    message.dataOffset = parseInt(object.dataOffset, 10);\n                else if (typeof object.dataOffset === \"number\")\n                    message.dataOffset = object.dataOffset;\n                else if (typeof object.dataOffset === \"object\")\n                    message.dataOffset = new $util.LongBits(object.dataOffset.low >>> 0, object.dataOffset.high >>> 0).toNumber(true);\n            if (object.dataLength != null)\n                if ($util.Long)\n                    (message.dataLength = $util.Long.fromValue(object.dataLength)).unsigned = true;\n                else if (typeof object.dataLength === \"string\")\n                    message.dataLength = parseInt(object.dataLength, 10);\n                else if (typeof object.dataLength === \"number\")\n                    message.dataLength = object.dataLength;\n                else if (typeof object.dataLength === \"object\")\n                    message.dataLength = new $util.LongBits(object.dataLength.low >>> 0, object.dataLength.high >>> 0).toNumber(true);\n            if (object.srcExtents) {\n                if (!Array.isArray(object.srcExtents))\n                    throw TypeError(\".chromeos_update_engine.InstallOperation.srcExtents: array expected\");\n                message.srcExtents = [];\n                for (let i = 0; i < object.srcExtents.length; ++i) {\n                    if (typeof object.srcExtents[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.InstallOperation.srcExtents: object expected\");\n                    message.srcExtents[i] = $root.chromeos_update_engine.Extent.fromObject(object.srcExtents[i]);\n                }\n            }\n            if (object.srcLength != null)\n                if ($util.Long)\n                    (message.srcLength = $util.Long.fromValue(object.srcLength)).unsigned = true;\n                else if (typeof object.srcLength === \"string\")\n                    message.srcLength = parseInt(object.srcLength, 10);\n                else if (typeof object.srcLength === \"number\")\n                    message.srcLength = object.srcLength;\n                else if (typeof object.srcLength === \"object\")\n                    message.srcLength = new $util.LongBits(object.srcLength.low >>> 0, object.srcLength.high >>> 0).toNumber(true);\n            if (object.dstExtents) {\n                if (!Array.isArray(object.dstExtents))\n                    throw TypeError(\".chromeos_update_engine.InstallOperation.dstExtents: array expected\");\n                message.dstExtents = [];\n                for (let i = 0; i < object.dstExtents.length; ++i) {\n                    if (typeof object.dstExtents[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.InstallOperation.dstExtents: object expected\");\n                    message.dstExtents[i] = $root.chromeos_update_engine.Extent.fromObject(object.dstExtents[i]);\n                }\n            }\n            if (object.dstLength != null)\n                if ($util.Long)\n                    (message.dstLength = $util.Long.fromValue(object.dstLength)).unsigned = true;\n                else if (typeof object.dstLength === \"string\")\n                    message.dstLength = parseInt(object.dstLength, 10);\n                else if (typeof object.dstLength === \"number\")\n                    message.dstLength = object.dstLength;\n                else if (typeof object.dstLength === \"object\")\n                    message.dstLength = new $util.LongBits(object.dstLength.low >>> 0, object.dstLength.high >>> 0).toNumber(true);\n            if (object.dataSha256Hash != null)\n                if (typeof object.dataSha256Hash === \"string\")\n                    $util.base64.decode(object.dataSha256Hash, message.dataSha256Hash = $util.newBuffer($util.base64.length(object.dataSha256Hash)), 0);\n                else if (object.dataSha256Hash.length)\n                    message.dataSha256Hash = object.dataSha256Hash;\n            if (object.srcSha256Hash != null)\n                if (typeof object.srcSha256Hash === \"string\")\n                    $util.base64.decode(object.srcSha256Hash, message.srcSha256Hash = $util.newBuffer($util.base64.length(object.srcSha256Hash)), 0);\n                else if (object.srcSha256Hash.length)\n                    message.srcSha256Hash = object.srcSha256Hash;\n            if (object.xorMap) {\n                if (typeof object.xorMap !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.InstallOperation.xorMap: object expected\");\n                message.xorMap = {};\n                for (let keys = Object.keys(object.xorMap), i = 0; i < keys.length; ++i)\n                    message.xorMap[keys[i]] = object.xorMap[keys[i]] >>> 0;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an InstallOperation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {chromeos_update_engine.InstallOperation} message InstallOperation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        InstallOperation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.srcExtents = [];\n                object.dstExtents = [];\n            }\n            if (options.objects || options.defaults)\n                object.xorMap = {};\n            if (options.defaults) {\n                object.type = options.enums === String ? \"REPLACE\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.dataOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.dataOffset = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.dataLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.dataLength = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.srcLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.srcLength = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.dstLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.dstLength = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.dataSha256Hash = \"\";\n                else {\n                    object.dataSha256Hash = [];\n                    if (options.bytes !== Array)\n                        object.dataSha256Hash = $util.newBuffer(object.dataSha256Hash);\n                }\n                if (options.bytes === String)\n                    object.srcSha256Hash = \"\";\n                else {\n                    object.srcSha256Hash = [];\n                    if (options.bytes !== Array)\n                        object.srcSha256Hash = $util.newBuffer(object.srcSha256Hash);\n                }\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.chromeos_update_engine.InstallOperation.Type[message.type] : message.type;\n            if (message.dataOffset != null && message.hasOwnProperty(\"dataOffset\"))\n                if (typeof message.dataOffset === \"number\")\n                    object.dataOffset = options.longs === String ? String(message.dataOffset) : message.dataOffset;\n                else\n                    object.dataOffset = options.longs === String ? $util.Long.prototype.toString.call(message.dataOffset) : options.longs === Number ? new $util.LongBits(message.dataOffset.low >>> 0, message.dataOffset.high >>> 0).toNumber(true) : message.dataOffset;\n            if (message.dataLength != null && message.hasOwnProperty(\"dataLength\"))\n                if (typeof message.dataLength === \"number\")\n                    object.dataLength = options.longs === String ? String(message.dataLength) : message.dataLength;\n                else\n                    object.dataLength = options.longs === String ? $util.Long.prototype.toString.call(message.dataLength) : options.longs === Number ? new $util.LongBits(message.dataLength.low >>> 0, message.dataLength.high >>> 0).toNumber(true) : message.dataLength;\n            if (message.srcExtents && message.srcExtents.length) {\n                object.srcExtents = [];\n                for (let j = 0; j < message.srcExtents.length; ++j)\n                    object.srcExtents[j] = $root.chromeos_update_engine.Extent.toObject(message.srcExtents[j], options);\n            }\n            if (message.srcLength != null && message.hasOwnProperty(\"srcLength\"))\n                if (typeof message.srcLength === \"number\")\n                    object.srcLength = options.longs === String ? String(message.srcLength) : message.srcLength;\n                else\n                    object.srcLength = options.longs === String ? $util.Long.prototype.toString.call(message.srcLength) : options.longs === Number ? new $util.LongBits(message.srcLength.low >>> 0, message.srcLength.high >>> 0).toNumber(true) : message.srcLength;\n            if (message.dstExtents && message.dstExtents.length) {\n                object.dstExtents = [];\n                for (let j = 0; j < message.dstExtents.length; ++j)\n                    object.dstExtents[j] = $root.chromeos_update_engine.Extent.toObject(message.dstExtents[j], options);\n            }\n            if (message.dstLength != null && message.hasOwnProperty(\"dstLength\"))\n                if (typeof message.dstLength === \"number\")\n                    object.dstLength = options.longs === String ? String(message.dstLength) : message.dstLength;\n                else\n                    object.dstLength = options.longs === String ? $util.Long.prototype.toString.call(message.dstLength) : options.longs === Number ? new $util.LongBits(message.dstLength.low >>> 0, message.dstLength.high >>> 0).toNumber(true) : message.dstLength;\n            if (message.dataSha256Hash != null && message.hasOwnProperty(\"dataSha256Hash\"))\n                object.dataSha256Hash = options.bytes === String ? $util.base64.encode(message.dataSha256Hash, 0, message.dataSha256Hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.dataSha256Hash) : message.dataSha256Hash;\n            if (message.srcSha256Hash != null && message.hasOwnProperty(\"srcSha256Hash\"))\n                object.srcSha256Hash = options.bytes === String ? $util.base64.encode(message.srcSha256Hash, 0, message.srcSha256Hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.srcSha256Hash) : message.srcSha256Hash;\n            let keys2;\n            if (message.xorMap && (keys2 = Object.keys(message.xorMap)).length) {\n                object.xorMap = {};\n                for (let j = 0; j < keys2.length; ++j)\n                    object.xorMap[keys2[j]] = message.xorMap[keys2[j]];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this InstallOperation to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        InstallOperation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Type enum.\n         * @name chromeos_update_engine.InstallOperation.Type\n         * @enum {number}\n         * @property {number} REPLACE=0 REPLACE value\n         * @property {number} REPLACE_BZ=1 REPLACE_BZ value\n         * @property {number} MOVE=2 MOVE value\n         * @property {number} BSDIFF=3 BSDIFF value\n         * @property {number} SOURCE_COPY=4 SOURCE_COPY value\n         * @property {number} SOURCE_BSDIFF=5 SOURCE_BSDIFF value\n         * @property {number} REPLACE_XZ=8 REPLACE_XZ value\n         * @property {number} ZERO=6 ZERO value\n         * @property {number} DISCARD=7 DISCARD value\n         * @property {number} BROTLI_BSDIFF=10 BROTLI_BSDIFF value\n         * @property {number} PUFFDIFF=9 PUFFDIFF value\n         */\n        InstallOperation.Type = (function() {\n            const valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"REPLACE\"] = 0;\n            values[valuesById[1] = \"REPLACE_BZ\"] = 1;\n            values[valuesById[2] = \"MOVE\"] = 2;\n            values[valuesById[3] = \"BSDIFF\"] = 3;\n            values[valuesById[4] = \"SOURCE_COPY\"] = 4;\n            values[valuesById[5] = \"SOURCE_BSDIFF\"] = 5;\n            values[valuesById[8] = \"REPLACE_XZ\"] = 8;\n            values[valuesById[6] = \"ZERO\"] = 6;\n            values[valuesById[7] = \"DISCARD\"] = 7;\n            values[valuesById[10] = \"BROTLI_BSDIFF\"] = 10;\n            values[valuesById[9] = \"PUFFDIFF\"] = 9;\n            return values;\n        })();\n\n        return InstallOperation;\n    })();\n\n    chromeos_update_engine.CowMergeOperation = (function() {\n\n        /**\n         * Properties of a CowMergeOperation.\n         * @memberof chromeos_update_engine\n         * @interface ICowMergeOperation\n         * @property {chromeos_update_engine.CowMergeOperation.Type|null} [type] CowMergeOperation type\n         * @property {chromeos_update_engine.IExtent|null} [srcExtent] CowMergeOperation srcExtent\n         * @property {chromeos_update_engine.IExtent|null} [dstExtent] CowMergeOperation dstExtent\n         * @property {number|Long|null} [srcOffset] CowMergeOperation srcOffset\n         */\n\n        /**\n         * Constructs a new CowMergeOperation.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a CowMergeOperation.\n         * @implements ICowMergeOperation\n         * @constructor\n         * @param {chromeos_update_engine.ICowMergeOperation=} [properties] Properties to set\n         */\n        function CowMergeOperation(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CowMergeOperation type.\n         * @member {chromeos_update_engine.CowMergeOperation.Type} type\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         */\n        CowMergeOperation.prototype.type = 0;\n\n        /**\n         * CowMergeOperation srcExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} srcExtent\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         */\n        CowMergeOperation.prototype.srcExtent = null;\n\n        /**\n         * CowMergeOperation dstExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} dstExtent\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         */\n        CowMergeOperation.prototype.dstExtent = null;\n\n        /**\n         * CowMergeOperation srcOffset.\n         * @member {number|Long} srcOffset\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         */\n        CowMergeOperation.prototype.srcOffset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new CowMergeOperation instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {chromeos_update_engine.ICowMergeOperation=} [properties] Properties to set\n         * @returns {chromeos_update_engine.CowMergeOperation} CowMergeOperation instance\n         */\n        CowMergeOperation.create = function create(properties) {\n            return new CowMergeOperation(properties);\n        };\n\n        /**\n         * Encodes the specified CowMergeOperation message. Does not implicitly {@link chromeos_update_engine.CowMergeOperation.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {chromeos_update_engine.ICowMergeOperation} message CowMergeOperation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CowMergeOperation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);\n            if (message.srcExtent != null && Object.hasOwnProperty.call(message, \"srcExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.srcExtent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.dstExtent != null && Object.hasOwnProperty.call(message, \"dstExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.dstExtent, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.srcOffset != null && Object.hasOwnProperty.call(message, \"srcOffset\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.srcOffset);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CowMergeOperation message, length delimited. Does not implicitly {@link chromeos_update_engine.CowMergeOperation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {chromeos_update_engine.ICowMergeOperation} message CowMergeOperation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CowMergeOperation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CowMergeOperation message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.CowMergeOperation} CowMergeOperation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CowMergeOperation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.CowMergeOperation();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.srcExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.dstExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.srcOffset = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CowMergeOperation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.CowMergeOperation} CowMergeOperation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CowMergeOperation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CowMergeOperation message.\n         * @function verify\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CowMergeOperation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n                }\n            if (message.srcExtent != null && message.hasOwnProperty(\"srcExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.srcExtent);\n                if (error)\n                    return \"srcExtent.\" + error;\n            }\n            if (message.dstExtent != null && message.hasOwnProperty(\"dstExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.dstExtent);\n                if (error)\n                    return \"dstExtent.\" + error;\n            }\n            if (message.srcOffset != null && message.hasOwnProperty(\"srcOffset\"))\n                if (!$util.isInteger(message.srcOffset) && !(message.srcOffset && $util.isInteger(message.srcOffset.low) && $util.isInteger(message.srcOffset.high)))\n                    return \"srcOffset: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a CowMergeOperation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.CowMergeOperation} CowMergeOperation\n         */\n        CowMergeOperation.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.CowMergeOperation)\n                return object;\n            let message = new $root.chromeos_update_engine.CowMergeOperation();\n            switch (object.type) {\n            case \"COW_COPY\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"COW_XOR\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"COW_REPLACE\":\n            case 2:\n                message.type = 2;\n                break;\n            }\n            if (object.srcExtent != null) {\n                if (typeof object.srcExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.CowMergeOperation.srcExtent: object expected\");\n                message.srcExtent = $root.chromeos_update_engine.Extent.fromObject(object.srcExtent);\n            }\n            if (object.dstExtent != null) {\n                if (typeof object.dstExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.CowMergeOperation.dstExtent: object expected\");\n                message.dstExtent = $root.chromeos_update_engine.Extent.fromObject(object.dstExtent);\n            }\n            if (object.srcOffset != null)\n                if ($util.Long)\n                    (message.srcOffset = $util.Long.fromValue(object.srcOffset)).unsigned = true;\n                else if (typeof object.srcOffset === \"string\")\n                    message.srcOffset = parseInt(object.srcOffset, 10);\n                else if (typeof object.srcOffset === \"number\")\n                    message.srcOffset = object.srcOffset;\n                else if (typeof object.srcOffset === \"object\")\n                    message.srcOffset = new $util.LongBits(object.srcOffset.low >>> 0, object.srcOffset.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CowMergeOperation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {chromeos_update_engine.CowMergeOperation} message CowMergeOperation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CowMergeOperation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.type = options.enums === String ? \"COW_COPY\" : 0;\n                object.srcExtent = null;\n                object.dstExtent = null;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.srcOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.srcOffset = options.longs === String ? \"0\" : 0;\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.chromeos_update_engine.CowMergeOperation.Type[message.type] : message.type;\n            if (message.srcExtent != null && message.hasOwnProperty(\"srcExtent\"))\n                object.srcExtent = $root.chromeos_update_engine.Extent.toObject(message.srcExtent, options);\n            if (message.dstExtent != null && message.hasOwnProperty(\"dstExtent\"))\n                object.dstExtent = $root.chromeos_update_engine.Extent.toObject(message.dstExtent, options);\n            if (message.srcOffset != null && message.hasOwnProperty(\"srcOffset\"))\n                if (typeof message.srcOffset === \"number\")\n                    object.srcOffset = options.longs === String ? String(message.srcOffset) : message.srcOffset;\n                else\n                    object.srcOffset = options.longs === String ? $util.Long.prototype.toString.call(message.srcOffset) : options.longs === Number ? new $util.LongBits(message.srcOffset.low >>> 0, message.srcOffset.high >>> 0).toNumber(true) : message.srcOffset;\n            return object;\n        };\n\n        /**\n         * Converts this CowMergeOperation to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CowMergeOperation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Type enum.\n         * @name chromeos_update_engine.CowMergeOperation.Type\n         * @enum {number}\n         * @property {number} COW_COPY=0 COW_COPY value\n         * @property {number} COW_XOR=1 COW_XOR value\n         * @property {number} COW_REPLACE=2 COW_REPLACE value\n         */\n        CowMergeOperation.Type = (function() {\n            const valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"COW_COPY\"] = 0;\n            values[valuesById[1] = \"COW_XOR\"] = 1;\n            values[valuesById[2] = \"COW_REPLACE\"] = 2;\n            return values;\n        })();\n\n        return CowMergeOperation;\n    })();\n\n    chromeos_update_engine.PartitionUpdate = (function() {\n\n        /**\n         * Properties of a PartitionUpdate.\n         * @memberof chromeos_update_engine\n         * @interface IPartitionUpdate\n         * @property {string} partitionName PartitionUpdate partitionName\n         * @property {boolean|null} [runPostinstall] PartitionUpdate runPostinstall\n         * @property {string|null} [postinstallPath] PartitionUpdate postinstallPath\n         * @property {string|null} [filesystemType] PartitionUpdate filesystemType\n         * @property {Array.<chromeos_update_engine.Signatures.ISignature>|null} [newPartitionSignature] PartitionUpdate newPartitionSignature\n         * @property {chromeos_update_engine.IPartitionInfo|null} [oldPartitionInfo] PartitionUpdate oldPartitionInfo\n         * @property {chromeos_update_engine.IPartitionInfo|null} [newPartitionInfo] PartitionUpdate newPartitionInfo\n         * @property {Array.<chromeos_update_engine.IInstallOperation>|null} [operations] PartitionUpdate operations\n         * @property {boolean|null} [postinstallOptional] PartitionUpdate postinstallOptional\n         * @property {chromeos_update_engine.IExtent|null} [hashTreeDataExtent] PartitionUpdate hashTreeDataExtent\n         * @property {chromeos_update_engine.IExtent|null} [hashTreeExtent] PartitionUpdate hashTreeExtent\n         * @property {string|null} [hashTreeAlgorithm] PartitionUpdate hashTreeAlgorithm\n         * @property {Uint8Array|null} [hashTreeSalt] PartitionUpdate hashTreeSalt\n         * @property {chromeos_update_engine.IExtent|null} [fecDataExtent] PartitionUpdate fecDataExtent\n         * @property {chromeos_update_engine.IExtent|null} [fecExtent] PartitionUpdate fecExtent\n         * @property {number|null} [fecRoots] PartitionUpdate fecRoots\n         * @property {string|null} [version] PartitionUpdate version\n         * @property {Array.<chromeos_update_engine.ICowMergeOperation>|null} [mergeOperations] PartitionUpdate mergeOperations\n         * @property {number|Long|null} [estimateCowSize] PartitionUpdate estimateCowSize\n         */\n\n        /**\n         * Constructs a new PartitionUpdate.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a PartitionUpdate.\n         * @implements IPartitionUpdate\n         * @constructor\n         * @param {chromeos_update_engine.IPartitionUpdate=} [properties] Properties to set\n         */\n        function PartitionUpdate(properties) {\n            this.newPartitionSignature = [];\n            this.operations = [];\n            this.mergeOperations = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PartitionUpdate partitionName.\n         * @member {string} partitionName\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.partitionName = \"\";\n\n        /**\n         * PartitionUpdate runPostinstall.\n         * @member {boolean} runPostinstall\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.runPostinstall = false;\n\n        /**\n         * PartitionUpdate postinstallPath.\n         * @member {string} postinstallPath\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.postinstallPath = \"\";\n\n        /**\n         * PartitionUpdate filesystemType.\n         * @member {string} filesystemType\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.filesystemType = \"\";\n\n        /**\n         * PartitionUpdate newPartitionSignature.\n         * @member {Array.<chromeos_update_engine.Signatures.ISignature>} newPartitionSignature\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.newPartitionSignature = $util.emptyArray;\n\n        /**\n         * PartitionUpdate oldPartitionInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} oldPartitionInfo\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.oldPartitionInfo = null;\n\n        /**\n         * PartitionUpdate newPartitionInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} newPartitionInfo\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.newPartitionInfo = null;\n\n        /**\n         * PartitionUpdate operations.\n         * @member {Array.<chromeos_update_engine.IInstallOperation>} operations\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.operations = $util.emptyArray;\n\n        /**\n         * PartitionUpdate postinstallOptional.\n         * @member {boolean} postinstallOptional\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.postinstallOptional = false;\n\n        /**\n         * PartitionUpdate hashTreeDataExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} hashTreeDataExtent\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.hashTreeDataExtent = null;\n\n        /**\n         * PartitionUpdate hashTreeExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} hashTreeExtent\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.hashTreeExtent = null;\n\n        /**\n         * PartitionUpdate hashTreeAlgorithm.\n         * @member {string} hashTreeAlgorithm\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.hashTreeAlgorithm = \"\";\n\n        /**\n         * PartitionUpdate hashTreeSalt.\n         * @member {Uint8Array} hashTreeSalt\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.hashTreeSalt = $util.newBuffer([]);\n\n        /**\n         * PartitionUpdate fecDataExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} fecDataExtent\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.fecDataExtent = null;\n\n        /**\n         * PartitionUpdate fecExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} fecExtent\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.fecExtent = null;\n\n        /**\n         * PartitionUpdate fecRoots.\n         * @member {number} fecRoots\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.fecRoots = 2;\n\n        /**\n         * PartitionUpdate version.\n         * @member {string} version\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.version = \"\";\n\n        /**\n         * PartitionUpdate mergeOperations.\n         * @member {Array.<chromeos_update_engine.ICowMergeOperation>} mergeOperations\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.mergeOperations = $util.emptyArray;\n\n        /**\n         * PartitionUpdate estimateCowSize.\n         * @member {number|Long} estimateCowSize\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.estimateCowSize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new PartitionUpdate instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {chromeos_update_engine.IPartitionUpdate=} [properties] Properties to set\n         * @returns {chromeos_update_engine.PartitionUpdate} PartitionUpdate instance\n         */\n        PartitionUpdate.create = function create(properties) {\n            return new PartitionUpdate(properties);\n        };\n\n        /**\n         * Encodes the specified PartitionUpdate message. Does not implicitly {@link chromeos_update_engine.PartitionUpdate.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {chromeos_update_engine.IPartitionUpdate} message PartitionUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PartitionUpdate.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.partitionName);\n            if (message.runPostinstall != null && Object.hasOwnProperty.call(message, \"runPostinstall\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.runPostinstall);\n            if (message.postinstallPath != null && Object.hasOwnProperty.call(message, \"postinstallPath\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.postinstallPath);\n            if (message.filesystemType != null && Object.hasOwnProperty.call(message, \"filesystemType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.filesystemType);\n            if (message.newPartitionSignature != null && message.newPartitionSignature.length)\n                for (let i = 0; i < message.newPartitionSignature.length; ++i)\n                    $root.chromeos_update_engine.Signatures.Signature.encode(message.newPartitionSignature[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.oldPartitionInfo != null && Object.hasOwnProperty.call(message, \"oldPartitionInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.oldPartitionInfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.newPartitionInfo != null && Object.hasOwnProperty.call(message, \"newPartitionInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.newPartitionInfo, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.operations != null && message.operations.length)\n                for (let i = 0; i < message.operations.length; ++i)\n                    $root.chromeos_update_engine.InstallOperation.encode(message.operations[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.postinstallOptional != null && Object.hasOwnProperty.call(message, \"postinstallOptional\"))\n                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.postinstallOptional);\n            if (message.hashTreeDataExtent != null && Object.hasOwnProperty.call(message, \"hashTreeDataExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.hashTreeDataExtent, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.hashTreeExtent != null && Object.hasOwnProperty.call(message, \"hashTreeExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.hashTreeExtent, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.hashTreeAlgorithm != null && Object.hasOwnProperty.call(message, \"hashTreeAlgorithm\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.hashTreeAlgorithm);\n            if (message.hashTreeSalt != null && Object.hasOwnProperty.call(message, \"hashTreeSalt\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).bytes(message.hashTreeSalt);\n            if (message.fecDataExtent != null && Object.hasOwnProperty.call(message, \"fecDataExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.fecDataExtent, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.fecExtent != null && Object.hasOwnProperty.call(message, \"fecExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.fecExtent, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.fecRoots != null && Object.hasOwnProperty.call(message, \"fecRoots\"))\n                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.fecRoots);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 17, wireType 2 =*/138).string(message.version);\n            if (message.mergeOperations != null && message.mergeOperations.length)\n                for (let i = 0; i < message.mergeOperations.length; ++i)\n                    $root.chromeos_update_engine.CowMergeOperation.encode(message.mergeOperations[i], writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n            if (message.estimateCowSize != null && Object.hasOwnProperty.call(message, \"estimateCowSize\"))\n                writer.uint32(/* id 19, wireType 0 =*/152).uint64(message.estimateCowSize);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified PartitionUpdate message, length delimited. Does not implicitly {@link chromeos_update_engine.PartitionUpdate.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {chromeos_update_engine.IPartitionUpdate} message PartitionUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PartitionUpdate.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PartitionUpdate message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.PartitionUpdate} PartitionUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PartitionUpdate.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.PartitionUpdate();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.partitionName = reader.string();\n                    break;\n                case 2:\n                    message.runPostinstall = reader.bool();\n                    break;\n                case 3:\n                    message.postinstallPath = reader.string();\n                    break;\n                case 4:\n                    message.filesystemType = reader.string();\n                    break;\n                case 5:\n                    if (!(message.newPartitionSignature && message.newPartitionSignature.length))\n                        message.newPartitionSignature = [];\n                    message.newPartitionSignature.push($root.chromeos_update_engine.Signatures.Signature.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.oldPartitionInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.newPartitionInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    if (!(message.operations && message.operations.length))\n                        message.operations = [];\n                    message.operations.push($root.chromeos_update_engine.InstallOperation.decode(reader, reader.uint32()));\n                    break;\n                case 9:\n                    message.postinstallOptional = reader.bool();\n                    break;\n                case 10:\n                    message.hashTreeDataExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.hashTreeExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.hashTreeAlgorithm = reader.string();\n                    break;\n                case 13:\n                    message.hashTreeSalt = reader.bytes();\n                    break;\n                case 14:\n                    message.fecDataExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 15:\n                    message.fecExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 16:\n                    message.fecRoots = reader.uint32();\n                    break;\n                case 17:\n                    message.version = reader.string();\n                    break;\n                case 18:\n                    if (!(message.mergeOperations && message.mergeOperations.length))\n                        message.mergeOperations = [];\n                    message.mergeOperations.push($root.chromeos_update_engine.CowMergeOperation.decode(reader, reader.uint32()));\n                    break;\n                case 19:\n                    message.estimateCowSize = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            if (!message.hasOwnProperty(\"partitionName\"))\n                throw $util.ProtocolError(\"missing required 'partitionName'\", { instance: message });\n            return message;\n        };\n\n        /**\n         * Decodes a PartitionUpdate message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.PartitionUpdate} PartitionUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PartitionUpdate.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PartitionUpdate message.\n         * @function verify\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PartitionUpdate.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (!$util.isString(message.partitionName))\n                return \"partitionName: string expected\";\n            if (message.runPostinstall != null && message.hasOwnProperty(\"runPostinstall\"))\n                if (typeof message.runPostinstall !== \"boolean\")\n                    return \"runPostinstall: boolean expected\";\n            if (message.postinstallPath != null && message.hasOwnProperty(\"postinstallPath\"))\n                if (!$util.isString(message.postinstallPath))\n                    return \"postinstallPath: string expected\";\n            if (message.filesystemType != null && message.hasOwnProperty(\"filesystemType\"))\n                if (!$util.isString(message.filesystemType))\n                    return \"filesystemType: string expected\";\n            if (message.newPartitionSignature != null && message.hasOwnProperty(\"newPartitionSignature\")) {\n                if (!Array.isArray(message.newPartitionSignature))\n                    return \"newPartitionSignature: array expected\";\n                for (let i = 0; i < message.newPartitionSignature.length; ++i) {\n                    let error = $root.chromeos_update_engine.Signatures.Signature.verify(message.newPartitionSignature[i]);\n                    if (error)\n                        return \"newPartitionSignature.\" + error;\n                }\n            }\n            if (message.oldPartitionInfo != null && message.hasOwnProperty(\"oldPartitionInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.oldPartitionInfo);\n                if (error)\n                    return \"oldPartitionInfo.\" + error;\n            }\n            if (message.newPartitionInfo != null && message.hasOwnProperty(\"newPartitionInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.newPartitionInfo);\n                if (error)\n                    return \"newPartitionInfo.\" + error;\n            }\n            if (message.operations != null && message.hasOwnProperty(\"operations\")) {\n                if (!Array.isArray(message.operations))\n                    return \"operations: array expected\";\n                for (let i = 0; i < message.operations.length; ++i) {\n                    let error = $root.chromeos_update_engine.InstallOperation.verify(message.operations[i]);\n                    if (error)\n                        return \"operations.\" + error;\n                }\n            }\n            if (message.postinstallOptional != null && message.hasOwnProperty(\"postinstallOptional\"))\n                if (typeof message.postinstallOptional !== \"boolean\")\n                    return \"postinstallOptional: boolean expected\";\n            if (message.hashTreeDataExtent != null && message.hasOwnProperty(\"hashTreeDataExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.hashTreeDataExtent);\n                if (error)\n                    return \"hashTreeDataExtent.\" + error;\n            }\n            if (message.hashTreeExtent != null && message.hasOwnProperty(\"hashTreeExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.hashTreeExtent);\n                if (error)\n                    return \"hashTreeExtent.\" + error;\n            }\n            if (message.hashTreeAlgorithm != null && message.hasOwnProperty(\"hashTreeAlgorithm\"))\n                if (!$util.isString(message.hashTreeAlgorithm))\n                    return \"hashTreeAlgorithm: string expected\";\n            if (message.hashTreeSalt != null && message.hasOwnProperty(\"hashTreeSalt\"))\n                if (!(message.hashTreeSalt && typeof message.hashTreeSalt.length === \"number\" || $util.isString(message.hashTreeSalt)))\n                    return \"hashTreeSalt: buffer expected\";\n            if (message.fecDataExtent != null && message.hasOwnProperty(\"fecDataExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.fecDataExtent);\n                if (error)\n                    return \"fecDataExtent.\" + error;\n            }\n            if (message.fecExtent != null && message.hasOwnProperty(\"fecExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.fecExtent);\n                if (error)\n                    return \"fecExtent.\" + error;\n            }\n            if (message.fecRoots != null && message.hasOwnProperty(\"fecRoots\"))\n                if (!$util.isInteger(message.fecRoots))\n                    return \"fecRoots: integer expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isString(message.version))\n                    return \"version: string expected\";\n            if (message.mergeOperations != null && message.hasOwnProperty(\"mergeOperations\")) {\n                if (!Array.isArray(message.mergeOperations))\n                    return \"mergeOperations: array expected\";\n                for (let i = 0; i < message.mergeOperations.length; ++i) {\n                    let error = $root.chromeos_update_engine.CowMergeOperation.verify(message.mergeOperations[i]);\n                    if (error)\n                        return \"mergeOperations.\" + error;\n                }\n            }\n            if (message.estimateCowSize != null && message.hasOwnProperty(\"estimateCowSize\"))\n                if (!$util.isInteger(message.estimateCowSize) && !(message.estimateCowSize && $util.isInteger(message.estimateCowSize.low) && $util.isInteger(message.estimateCowSize.high)))\n                    return \"estimateCowSize: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a PartitionUpdate message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.PartitionUpdate} PartitionUpdate\n         */\n        PartitionUpdate.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.PartitionUpdate)\n                return object;\n            let message = new $root.chromeos_update_engine.PartitionUpdate();\n            if (object.partitionName != null)\n                message.partitionName = String(object.partitionName);\n            if (object.runPostinstall != null)\n                message.runPostinstall = Boolean(object.runPostinstall);\n            if (object.postinstallPath != null)\n                message.postinstallPath = String(object.postinstallPath);\n            if (object.filesystemType != null)\n                message.filesystemType = String(object.filesystemType);\n            if (object.newPartitionSignature) {\n                if (!Array.isArray(object.newPartitionSignature))\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.newPartitionSignature: array expected\");\n                message.newPartitionSignature = [];\n                for (let i = 0; i < object.newPartitionSignature.length; ++i) {\n                    if (typeof object.newPartitionSignature[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.PartitionUpdate.newPartitionSignature: object expected\");\n                    message.newPartitionSignature[i] = $root.chromeos_update_engine.Signatures.Signature.fromObject(object.newPartitionSignature[i]);\n                }\n            }\n            if (object.oldPartitionInfo != null) {\n                if (typeof object.oldPartitionInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.oldPartitionInfo: object expected\");\n                message.oldPartitionInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.oldPartitionInfo);\n            }\n            if (object.newPartitionInfo != null) {\n                if (typeof object.newPartitionInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.newPartitionInfo: object expected\");\n                message.newPartitionInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.newPartitionInfo);\n            }\n            if (object.operations) {\n                if (!Array.isArray(object.operations))\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.operations: array expected\");\n                message.operations = [];\n                for (let i = 0; i < object.operations.length; ++i) {\n                    if (typeof object.operations[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.PartitionUpdate.operations: object expected\");\n                    message.operations[i] = $root.chromeos_update_engine.InstallOperation.fromObject(object.operations[i]);\n                }\n            }\n            if (object.postinstallOptional != null)\n                message.postinstallOptional = Boolean(object.postinstallOptional);\n            if (object.hashTreeDataExtent != null) {\n                if (typeof object.hashTreeDataExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.hashTreeDataExtent: object expected\");\n                message.hashTreeDataExtent = $root.chromeos_update_engine.Extent.fromObject(object.hashTreeDataExtent);\n            }\n            if (object.hashTreeExtent != null) {\n                if (typeof object.hashTreeExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.hashTreeExtent: object expected\");\n                message.hashTreeExtent = $root.chromeos_update_engine.Extent.fromObject(object.hashTreeExtent);\n            }\n            if (object.hashTreeAlgorithm != null)\n                message.hashTreeAlgorithm = String(object.hashTreeAlgorithm);\n            if (object.hashTreeSalt != null)\n                if (typeof object.hashTreeSalt === \"string\")\n                    $util.base64.decode(object.hashTreeSalt, message.hashTreeSalt = $util.newBuffer($util.base64.length(object.hashTreeSalt)), 0);\n                else if (object.hashTreeSalt.length)\n                    message.hashTreeSalt = object.hashTreeSalt;\n            if (object.fecDataExtent != null) {\n                if (typeof object.fecDataExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.fecDataExtent: object expected\");\n                message.fecDataExtent = $root.chromeos_update_engine.Extent.fromObject(object.fecDataExtent);\n            }\n            if (object.fecExtent != null) {\n                if (typeof object.fecExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.fecExtent: object expected\");\n                message.fecExtent = $root.chromeos_update_engine.Extent.fromObject(object.fecExtent);\n            }\n            if (object.fecRoots != null)\n                message.fecRoots = object.fecRoots >>> 0;\n            if (object.version != null)\n                message.version = String(object.version);\n            if (object.mergeOperations) {\n                if (!Array.isArray(object.mergeOperations))\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.mergeOperations: array expected\");\n                message.mergeOperations = [];\n                for (let i = 0; i < object.mergeOperations.length; ++i) {\n                    if (typeof object.mergeOperations[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.PartitionUpdate.mergeOperations: object expected\");\n                    message.mergeOperations[i] = $root.chromeos_update_engine.CowMergeOperation.fromObject(object.mergeOperations[i]);\n                }\n            }\n            if (object.estimateCowSize != null)\n                if ($util.Long)\n                    (message.estimateCowSize = $util.Long.fromValue(object.estimateCowSize)).unsigned = true;\n                else if (typeof object.estimateCowSize === \"string\")\n                    message.estimateCowSize = parseInt(object.estimateCowSize, 10);\n                else if (typeof object.estimateCowSize === \"number\")\n                    message.estimateCowSize = object.estimateCowSize;\n                else if (typeof object.estimateCowSize === \"object\")\n                    message.estimateCowSize = new $util.LongBits(object.estimateCowSize.low >>> 0, object.estimateCowSize.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a PartitionUpdate message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {chromeos_update_engine.PartitionUpdate} message PartitionUpdate\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PartitionUpdate.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.newPartitionSignature = [];\n                object.operations = [];\n                object.mergeOperations = [];\n            }\n            if (options.defaults) {\n                object.partitionName = \"\";\n                object.runPostinstall = false;\n                object.postinstallPath = \"\";\n                object.filesystemType = \"\";\n                object.oldPartitionInfo = null;\n                object.newPartitionInfo = null;\n                object.postinstallOptional = false;\n                object.hashTreeDataExtent = null;\n                object.hashTreeExtent = null;\n                object.hashTreeAlgorithm = \"\";\n                if (options.bytes === String)\n                    object.hashTreeSalt = \"\";\n                else {\n                    object.hashTreeSalt = [];\n                    if (options.bytes !== Array)\n                        object.hashTreeSalt = $util.newBuffer(object.hashTreeSalt);\n                }\n                object.fecDataExtent = null;\n                object.fecExtent = null;\n                object.fecRoots = 2;\n                object.version = \"\";\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.estimateCowSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.estimateCowSize = options.longs === String ? \"0\" : 0;\n            }\n            if (message.partitionName != null && message.hasOwnProperty(\"partitionName\"))\n                object.partitionName = message.partitionName;\n            if (message.runPostinstall != null && message.hasOwnProperty(\"runPostinstall\"))\n                object.runPostinstall = message.runPostinstall;\n            if (message.postinstallPath != null && message.hasOwnProperty(\"postinstallPath\"))\n                object.postinstallPath = message.postinstallPath;\n            if (message.filesystemType != null && message.hasOwnProperty(\"filesystemType\"))\n                object.filesystemType = message.filesystemType;\n            if (message.newPartitionSignature && message.newPartitionSignature.length) {\n                object.newPartitionSignature = [];\n                for (let j = 0; j < message.newPartitionSignature.length; ++j)\n                    object.newPartitionSignature[j] = $root.chromeos_update_engine.Signatures.Signature.toObject(message.newPartitionSignature[j], options);\n            }\n            if (message.oldPartitionInfo != null && message.hasOwnProperty(\"oldPartitionInfo\"))\n                object.oldPartitionInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.oldPartitionInfo, options);\n            if (message.newPartitionInfo != null && message.hasOwnProperty(\"newPartitionInfo\"))\n                object.newPartitionInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.newPartitionInfo, options);\n            if (message.operations && message.operations.length) {\n                object.operations = [];\n                for (let j = 0; j < message.operations.length; ++j)\n                    object.operations[j] = $root.chromeos_update_engine.InstallOperation.toObject(message.operations[j], options);\n            }\n            if (message.postinstallOptional != null && message.hasOwnProperty(\"postinstallOptional\"))\n                object.postinstallOptional = message.postinstallOptional;\n            if (message.hashTreeDataExtent != null && message.hasOwnProperty(\"hashTreeDataExtent\"))\n                object.hashTreeDataExtent = $root.chromeos_update_engine.Extent.toObject(message.hashTreeDataExtent, options);\n            if (message.hashTreeExtent != null && message.hasOwnProperty(\"hashTreeExtent\"))\n                object.hashTreeExtent = $root.chromeos_update_engine.Extent.toObject(message.hashTreeExtent, options);\n            if (message.hashTreeAlgorithm != null && message.hasOwnProperty(\"hashTreeAlgorithm\"))\n                object.hashTreeAlgorithm = message.hashTreeAlgorithm;\n            if (message.hashTreeSalt != null && message.hasOwnProperty(\"hashTreeSalt\"))\n                object.hashTreeSalt = options.bytes === String ? $util.base64.encode(message.hashTreeSalt, 0, message.hashTreeSalt.length) : options.bytes === Array ? Array.prototype.slice.call(message.hashTreeSalt) : message.hashTreeSalt;\n            if (message.fecDataExtent != null && message.hasOwnProperty(\"fecDataExtent\"))\n                object.fecDataExtent = $root.chromeos_update_engine.Extent.toObject(message.fecDataExtent, options);\n            if (message.fecExtent != null && message.hasOwnProperty(\"fecExtent\"))\n                object.fecExtent = $root.chromeos_update_engine.Extent.toObject(message.fecExtent, options);\n            if (message.fecRoots != null && message.hasOwnProperty(\"fecRoots\"))\n                object.fecRoots = message.fecRoots;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                object.version = message.version;\n            if (message.mergeOperations && message.mergeOperations.length) {\n                object.mergeOperations = [];\n                for (let j = 0; j < message.mergeOperations.length; ++j)\n                    object.mergeOperations[j] = $root.chromeos_update_engine.CowMergeOperation.toObject(message.mergeOperations[j], options);\n            }\n            if (message.estimateCowSize != null && message.hasOwnProperty(\"estimateCowSize\"))\n                if (typeof message.estimateCowSize === \"number\")\n                    object.estimateCowSize = options.longs === String ? String(message.estimateCowSize) : message.estimateCowSize;\n                else\n                    object.estimateCowSize = options.longs === String ? $util.Long.prototype.toString.call(message.estimateCowSize) : options.longs === Number ? new $util.LongBits(message.estimateCowSize.low >>> 0, message.estimateCowSize.high >>> 0).toNumber(true) : message.estimateCowSize;\n            return object;\n        };\n\n        /**\n         * Converts this PartitionUpdate to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PartitionUpdate.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return PartitionUpdate;\n    })();\n\n    chromeos_update_engine.DynamicPartitionGroup = (function() {\n\n        /**\n         * Properties of a DynamicPartitionGroup.\n         * @memberof chromeos_update_engine\n         * @interface IDynamicPartitionGroup\n         * @property {string} name DynamicPartitionGroup name\n         * @property {number|Long|null} [size] DynamicPartitionGroup size\n         * @property {Array.<string>|null} [partitionNames] DynamicPartitionGroup partitionNames\n         */\n\n        /**\n         * Constructs a new DynamicPartitionGroup.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a DynamicPartitionGroup.\n         * @implements IDynamicPartitionGroup\n         * @constructor\n         * @param {chromeos_update_engine.IDynamicPartitionGroup=} [properties] Properties to set\n         */\n        function DynamicPartitionGroup(properties) {\n            this.partitionNames = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DynamicPartitionGroup name.\n         * @member {string} name\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @instance\n         */\n        DynamicPartitionGroup.prototype.name = \"\";\n\n        /**\n         * DynamicPartitionGroup size.\n         * @member {number|Long} size\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @instance\n         */\n        DynamicPartitionGroup.prototype.size = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * DynamicPartitionGroup partitionNames.\n         * @member {Array.<string>} partitionNames\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @instance\n         */\n        DynamicPartitionGroup.prototype.partitionNames = $util.emptyArray;\n\n        /**\n         * Creates a new DynamicPartitionGroup instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionGroup=} [properties] Properties to set\n         * @returns {chromeos_update_engine.DynamicPartitionGroup} DynamicPartitionGroup instance\n         */\n        DynamicPartitionGroup.create = function create(properties) {\n            return new DynamicPartitionGroup(properties);\n        };\n\n        /**\n         * Encodes the specified DynamicPartitionGroup message. Does not implicitly {@link chromeos_update_engine.DynamicPartitionGroup.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionGroup} message DynamicPartitionGroup message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DynamicPartitionGroup.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.size != null && Object.hasOwnProperty.call(message, \"size\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.size);\n            if (message.partitionNames != null && message.partitionNames.length)\n                for (let i = 0; i < message.partitionNames.length; ++i)\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.partitionNames[i]);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified DynamicPartitionGroup message, length delimited. Does not implicitly {@link chromeos_update_engine.DynamicPartitionGroup.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionGroup} message DynamicPartitionGroup message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DynamicPartitionGroup.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DynamicPartitionGroup message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.DynamicPartitionGroup} DynamicPartitionGroup\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DynamicPartitionGroup.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.DynamicPartitionGroup();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.size = reader.uint64();\n                    break;\n                case 3:\n                    if (!(message.partitionNames && message.partitionNames.length))\n                        message.partitionNames = [];\n                    message.partitionNames.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            if (!message.hasOwnProperty(\"name\"))\n                throw $util.ProtocolError(\"missing required 'name'\", { instance: message });\n            return message;\n        };\n\n        /**\n         * Decodes a DynamicPartitionGroup message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.DynamicPartitionGroup} DynamicPartitionGroup\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DynamicPartitionGroup.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DynamicPartitionGroup message.\n         * @function verify\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DynamicPartitionGroup.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))\n                    return \"size: integer|Long expected\";\n            if (message.partitionNames != null && message.hasOwnProperty(\"partitionNames\")) {\n                if (!Array.isArray(message.partitionNames))\n                    return \"partitionNames: array expected\";\n                for (let i = 0; i < message.partitionNames.length; ++i)\n                    if (!$util.isString(message.partitionNames[i]))\n                        return \"partitionNames: string[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a DynamicPartitionGroup message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.DynamicPartitionGroup} DynamicPartitionGroup\n         */\n        DynamicPartitionGroup.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.DynamicPartitionGroup)\n                return object;\n            let message = new $root.chromeos_update_engine.DynamicPartitionGroup();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.size != null)\n                if ($util.Long)\n                    (message.size = $util.Long.fromValue(object.size)).unsigned = true;\n                else if (typeof object.size === \"string\")\n                    message.size = parseInt(object.size, 10);\n                else if (typeof object.size === \"number\")\n                    message.size = object.size;\n                else if (typeof object.size === \"object\")\n                    message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber(true);\n            if (object.partitionNames) {\n                if (!Array.isArray(object.partitionNames))\n                    throw TypeError(\".chromeos_update_engine.DynamicPartitionGroup.partitionNames: array expected\");\n                message.partitionNames = [];\n                for (let i = 0; i < object.partitionNames.length; ++i)\n                    message.partitionNames[i] = String(object.partitionNames[i]);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a DynamicPartitionGroup message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {chromeos_update_engine.DynamicPartitionGroup} message DynamicPartitionGroup\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DynamicPartitionGroup.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.partitionNames = [];\n            if (options.defaults) {\n                object.name = \"\";\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.size = options.longs === String ? \"0\" : 0;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (typeof message.size === \"number\")\n                    object.size = options.longs === String ? String(message.size) : message.size;\n                else\n                    object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber(true) : message.size;\n            if (message.partitionNames && message.partitionNames.length) {\n                object.partitionNames = [];\n                for (let j = 0; j < message.partitionNames.length; ++j)\n                    object.partitionNames[j] = message.partitionNames[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this DynamicPartitionGroup to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DynamicPartitionGroup.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DynamicPartitionGroup;\n    })();\n\n    chromeos_update_engine.DynamicPartitionMetadata = (function() {\n\n        /**\n         * Properties of a DynamicPartitionMetadata.\n         * @memberof chromeos_update_engine\n         * @interface IDynamicPartitionMetadata\n         * @property {Array.<chromeos_update_engine.IDynamicPartitionGroup>|null} [groups] DynamicPartitionMetadata groups\n         * @property {boolean|null} [snapshotEnabled] DynamicPartitionMetadata snapshotEnabled\n         * @property {boolean|null} [vabcEnabled] DynamicPartitionMetadata vabcEnabled\n         * @property {string|null} [vabcCompressionParam] DynamicPartitionMetadata vabcCompressionParam\n         * @property {number|null} [cowVersion] DynamicPartitionMetadata cowVersion\n         */\n\n        /**\n         * Constructs a new DynamicPartitionMetadata.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a DynamicPartitionMetadata.\n         * @implements IDynamicPartitionMetadata\n         * @constructor\n         * @param {chromeos_update_engine.IDynamicPartitionMetadata=} [properties] Properties to set\n         */\n        function DynamicPartitionMetadata(properties) {\n            this.groups = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DynamicPartitionMetadata groups.\n         * @member {Array.<chromeos_update_engine.IDynamicPartitionGroup>} groups\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.groups = $util.emptyArray;\n\n        /**\n         * DynamicPartitionMetadata snapshotEnabled.\n         * @member {boolean} snapshotEnabled\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.snapshotEnabled = false;\n\n        /**\n         * DynamicPartitionMetadata vabcEnabled.\n         * @member {boolean} vabcEnabled\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.vabcEnabled = false;\n\n        /**\n         * DynamicPartitionMetadata vabcCompressionParam.\n         * @member {string} vabcCompressionParam\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.vabcCompressionParam = \"\";\n\n        /**\n         * DynamicPartitionMetadata cowVersion.\n         * @member {number} cowVersion\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.cowVersion = 0;\n\n        /**\n         * Creates a new DynamicPartitionMetadata instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionMetadata=} [properties] Properties to set\n         * @returns {chromeos_update_engine.DynamicPartitionMetadata} DynamicPartitionMetadata instance\n         */\n        DynamicPartitionMetadata.create = function create(properties) {\n            return new DynamicPartitionMetadata(properties);\n        };\n\n        /**\n         * Encodes the specified DynamicPartitionMetadata message. Does not implicitly {@link chromeos_update_engine.DynamicPartitionMetadata.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionMetadata} message DynamicPartitionMetadata message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DynamicPartitionMetadata.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.groups != null && message.groups.length)\n                for (let i = 0; i < message.groups.length; ++i)\n                    $root.chromeos_update_engine.DynamicPartitionGroup.encode(message.groups[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.snapshotEnabled != null && Object.hasOwnProperty.call(message, \"snapshotEnabled\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.snapshotEnabled);\n            if (message.vabcEnabled != null && Object.hasOwnProperty.call(message, \"vabcEnabled\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.vabcEnabled);\n            if (message.vabcCompressionParam != null && Object.hasOwnProperty.call(message, \"vabcCompressionParam\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.vabcCompressionParam);\n            if (message.cowVersion != null && Object.hasOwnProperty.call(message, \"cowVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.cowVersion);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified DynamicPartitionMetadata message, length delimited. Does not implicitly {@link chromeos_update_engine.DynamicPartitionMetadata.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionMetadata} message DynamicPartitionMetadata message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DynamicPartitionMetadata.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DynamicPartitionMetadata message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.DynamicPartitionMetadata} DynamicPartitionMetadata\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DynamicPartitionMetadata.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.DynamicPartitionMetadata();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.groups && message.groups.length))\n                        message.groups = [];\n                    message.groups.push($root.chromeos_update_engine.DynamicPartitionGroup.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.snapshotEnabled = reader.bool();\n                    break;\n                case 3:\n                    message.vabcEnabled = reader.bool();\n                    break;\n                case 4:\n                    message.vabcCompressionParam = reader.string();\n                    break;\n                case 5:\n                    message.cowVersion = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a DynamicPartitionMetadata message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.DynamicPartitionMetadata} DynamicPartitionMetadata\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DynamicPartitionMetadata.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DynamicPartitionMetadata message.\n         * @function verify\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DynamicPartitionMetadata.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.groups != null && message.hasOwnProperty(\"groups\")) {\n                if (!Array.isArray(message.groups))\n                    return \"groups: array expected\";\n                for (let i = 0; i < message.groups.length; ++i) {\n                    let error = $root.chromeos_update_engine.DynamicPartitionGroup.verify(message.groups[i]);\n                    if (error)\n                        return \"groups.\" + error;\n                }\n            }\n            if (message.snapshotEnabled != null && message.hasOwnProperty(\"snapshotEnabled\"))\n                if (typeof message.snapshotEnabled !== \"boolean\")\n                    return \"snapshotEnabled: boolean expected\";\n            if (message.vabcEnabled != null && message.hasOwnProperty(\"vabcEnabled\"))\n                if (typeof message.vabcEnabled !== \"boolean\")\n                    return \"vabcEnabled: boolean expected\";\n            if (message.vabcCompressionParam != null && message.hasOwnProperty(\"vabcCompressionParam\"))\n                if (!$util.isString(message.vabcCompressionParam))\n                    return \"vabcCompressionParam: string expected\";\n            if (message.cowVersion != null && message.hasOwnProperty(\"cowVersion\"))\n                if (!$util.isInteger(message.cowVersion))\n                    return \"cowVersion: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a DynamicPartitionMetadata message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.DynamicPartitionMetadata} DynamicPartitionMetadata\n         */\n        DynamicPartitionMetadata.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.DynamicPartitionMetadata)\n                return object;\n            let message = new $root.chromeos_update_engine.DynamicPartitionMetadata();\n            if (object.groups) {\n                if (!Array.isArray(object.groups))\n                    throw TypeError(\".chromeos_update_engine.DynamicPartitionMetadata.groups: array expected\");\n                message.groups = [];\n                for (let i = 0; i < object.groups.length; ++i) {\n                    if (typeof object.groups[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.DynamicPartitionMetadata.groups: object expected\");\n                    message.groups[i] = $root.chromeos_update_engine.DynamicPartitionGroup.fromObject(object.groups[i]);\n                }\n            }\n            if (object.snapshotEnabled != null)\n                message.snapshotEnabled = Boolean(object.snapshotEnabled);\n            if (object.vabcEnabled != null)\n                message.vabcEnabled = Boolean(object.vabcEnabled);\n            if (object.vabcCompressionParam != null)\n                message.vabcCompressionParam = String(object.vabcCompressionParam);\n            if (object.cowVersion != null)\n                message.cowVersion = object.cowVersion >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a DynamicPartitionMetadata message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {chromeos_update_engine.DynamicPartitionMetadata} message DynamicPartitionMetadata\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DynamicPartitionMetadata.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.groups = [];\n            if (options.defaults) {\n                object.snapshotEnabled = false;\n                object.vabcEnabled = false;\n                object.vabcCompressionParam = \"\";\n                object.cowVersion = 0;\n            }\n            if (message.groups && message.groups.length) {\n                object.groups = [];\n                for (let j = 0; j < message.groups.length; ++j)\n                    object.groups[j] = $root.chromeos_update_engine.DynamicPartitionGroup.toObject(message.groups[j], options);\n            }\n            if (message.snapshotEnabled != null && message.hasOwnProperty(\"snapshotEnabled\"))\n                object.snapshotEnabled = message.snapshotEnabled;\n            if (message.vabcEnabled != null && message.hasOwnProperty(\"vabcEnabled\"))\n                object.vabcEnabled = message.vabcEnabled;\n            if (message.vabcCompressionParam != null && message.hasOwnProperty(\"vabcCompressionParam\"))\n                object.vabcCompressionParam = message.vabcCompressionParam;\n            if (message.cowVersion != null && message.hasOwnProperty(\"cowVersion\"))\n                object.cowVersion = message.cowVersion;\n            return object;\n        };\n\n        /**\n         * Converts this DynamicPartitionMetadata to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DynamicPartitionMetadata.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DynamicPartitionMetadata;\n    })();\n\n    chromeos_update_engine.ApexInfo = (function() {\n\n        /**\n         * Properties of an ApexInfo.\n         * @memberof chromeos_update_engine\n         * @interface IApexInfo\n         * @property {string|null} [packageName] ApexInfo packageName\n         * @property {number|Long|null} [version] ApexInfo version\n         * @property {boolean|null} [isCompressed] ApexInfo isCompressed\n         * @property {number|Long|null} [decompressedSize] ApexInfo decompressedSize\n         */\n\n        /**\n         * Constructs a new ApexInfo.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents an ApexInfo.\n         * @implements IApexInfo\n         * @constructor\n         * @param {chromeos_update_engine.IApexInfo=} [properties] Properties to set\n         */\n        function ApexInfo(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ApexInfo packageName.\n         * @member {string} packageName\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         */\n        ApexInfo.prototype.packageName = \"\";\n\n        /**\n         * ApexInfo version.\n         * @member {number|Long} version\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         */\n        ApexInfo.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ApexInfo isCompressed.\n         * @member {boolean} isCompressed\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         */\n        ApexInfo.prototype.isCompressed = false;\n\n        /**\n         * ApexInfo decompressedSize.\n         * @member {number|Long} decompressedSize\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         */\n        ApexInfo.prototype.decompressedSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new ApexInfo instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {chromeos_update_engine.IApexInfo=} [properties] Properties to set\n         * @returns {chromeos_update_engine.ApexInfo} ApexInfo instance\n         */\n        ApexInfo.create = function create(properties) {\n            return new ApexInfo(properties);\n        };\n\n        /**\n         * Encodes the specified ApexInfo message. Does not implicitly {@link chromeos_update_engine.ApexInfo.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {chromeos_update_engine.IApexInfo} message ApexInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApexInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.packageName != null && Object.hasOwnProperty.call(message, \"packageName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.packageName);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            if (message.isCompressed != null && Object.hasOwnProperty.call(message, \"isCompressed\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isCompressed);\n            if (message.decompressedSize != null && Object.hasOwnProperty.call(message, \"decompressedSize\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.decompressedSize);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ApexInfo message, length delimited. Does not implicitly {@link chromeos_update_engine.ApexInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {chromeos_update_engine.IApexInfo} message ApexInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApexInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ApexInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.ApexInfo} ApexInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApexInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.ApexInfo();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.packageName = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                case 3:\n                    message.isCompressed = reader.bool();\n                    break;\n                case 4:\n                    message.decompressedSize = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an ApexInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.ApexInfo} ApexInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApexInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ApexInfo message.\n         * @function verify\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ApexInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.packageName != null && message.hasOwnProperty(\"packageName\"))\n                if (!$util.isString(message.packageName))\n                    return \"packageName: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            if (message.isCompressed != null && message.hasOwnProperty(\"isCompressed\"))\n                if (typeof message.isCompressed !== \"boolean\")\n                    return \"isCompressed: boolean expected\";\n            if (message.decompressedSize != null && message.hasOwnProperty(\"decompressedSize\"))\n                if (!$util.isInteger(message.decompressedSize) && !(message.decompressedSize && $util.isInteger(message.decompressedSize.low) && $util.isInteger(message.decompressedSize.high)))\n                    return \"decompressedSize: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an ApexInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.ApexInfo} ApexInfo\n         */\n        ApexInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.ApexInfo)\n                return object;\n            let message = new $root.chromeos_update_engine.ApexInfo();\n            if (object.packageName != null)\n                message.packageName = String(object.packageName);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            if (object.isCompressed != null)\n                message.isCompressed = Boolean(object.isCompressed);\n            if (object.decompressedSize != null)\n                if ($util.Long)\n                    (message.decompressedSize = $util.Long.fromValue(object.decompressedSize)).unsigned = false;\n                else if (typeof object.decompressedSize === \"string\")\n                    message.decompressedSize = parseInt(object.decompressedSize, 10);\n                else if (typeof object.decompressedSize === \"number\")\n                    message.decompressedSize = object.decompressedSize;\n                else if (typeof object.decompressedSize === \"object\")\n                    message.decompressedSize = new $util.LongBits(object.decompressedSize.low >>> 0, object.decompressedSize.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ApexInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {chromeos_update_engine.ApexInfo} message ApexInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ApexInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.packageName = \"\";\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n                object.isCompressed = false;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.decompressedSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.decompressedSize = options.longs === String ? \"0\" : 0;\n            }\n            if (message.packageName != null && message.hasOwnProperty(\"packageName\"))\n                object.packageName = message.packageName;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            if (message.isCompressed != null && message.hasOwnProperty(\"isCompressed\"))\n                object.isCompressed = message.isCompressed;\n            if (message.decompressedSize != null && message.hasOwnProperty(\"decompressedSize\"))\n                if (typeof message.decompressedSize === \"number\")\n                    object.decompressedSize = options.longs === String ? String(message.decompressedSize) : message.decompressedSize;\n                else\n                    object.decompressedSize = options.longs === String ? $util.Long.prototype.toString.call(message.decompressedSize) : options.longs === Number ? new $util.LongBits(message.decompressedSize.low >>> 0, message.decompressedSize.high >>> 0).toNumber() : message.decompressedSize;\n            return object;\n        };\n\n        /**\n         * Converts this ApexInfo to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ApexInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ApexInfo;\n    })();\n\n    chromeos_update_engine.ApexMetadata = (function() {\n\n        /**\n         * Properties of an ApexMetadata.\n         * @memberof chromeos_update_engine\n         * @interface IApexMetadata\n         * @property {Array.<chromeos_update_engine.IApexInfo>|null} [apexInfo] ApexMetadata apexInfo\n         */\n\n        /**\n         * Constructs a new ApexMetadata.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents an ApexMetadata.\n         * @implements IApexMetadata\n         * @constructor\n         * @param {chromeos_update_engine.IApexMetadata=} [properties] Properties to set\n         */\n        function ApexMetadata(properties) {\n            this.apexInfo = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ApexMetadata apexInfo.\n         * @member {Array.<chromeos_update_engine.IApexInfo>} apexInfo\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @instance\n         */\n        ApexMetadata.prototype.apexInfo = $util.emptyArray;\n\n        /**\n         * Creates a new ApexMetadata instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {chromeos_update_engine.IApexMetadata=} [properties] Properties to set\n         * @returns {chromeos_update_engine.ApexMetadata} ApexMetadata instance\n         */\n        ApexMetadata.create = function create(properties) {\n            return new ApexMetadata(properties);\n        };\n\n        /**\n         * Encodes the specified ApexMetadata message. Does not implicitly {@link chromeos_update_engine.ApexMetadata.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {chromeos_update_engine.IApexMetadata} message ApexMetadata message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApexMetadata.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.apexInfo != null && message.apexInfo.length)\n                for (let i = 0; i < message.apexInfo.length; ++i)\n                    $root.chromeos_update_engine.ApexInfo.encode(message.apexInfo[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ApexMetadata message, length delimited. Does not implicitly {@link chromeos_update_engine.ApexMetadata.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {chromeos_update_engine.IApexMetadata} message ApexMetadata message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApexMetadata.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ApexMetadata message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.ApexMetadata} ApexMetadata\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApexMetadata.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.ApexMetadata();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.apexInfo && message.apexInfo.length))\n                        message.apexInfo = [];\n                    message.apexInfo.push($root.chromeos_update_engine.ApexInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an ApexMetadata message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.ApexMetadata} ApexMetadata\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApexMetadata.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ApexMetadata message.\n         * @function verify\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ApexMetadata.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.apexInfo != null && message.hasOwnProperty(\"apexInfo\")) {\n                if (!Array.isArray(message.apexInfo))\n                    return \"apexInfo: array expected\";\n                for (let i = 0; i < message.apexInfo.length; ++i) {\n                    let error = $root.chromeos_update_engine.ApexInfo.verify(message.apexInfo[i]);\n                    if (error)\n                        return \"apexInfo.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an ApexMetadata message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.ApexMetadata} ApexMetadata\n         */\n        ApexMetadata.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.ApexMetadata)\n                return object;\n            let message = new $root.chromeos_update_engine.ApexMetadata();\n            if (object.apexInfo) {\n                if (!Array.isArray(object.apexInfo))\n                    throw TypeError(\".chromeos_update_engine.ApexMetadata.apexInfo: array expected\");\n                message.apexInfo = [];\n                for (let i = 0; i < object.apexInfo.length; ++i) {\n                    if (typeof object.apexInfo[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.ApexMetadata.apexInfo: object expected\");\n                    message.apexInfo[i] = $root.chromeos_update_engine.ApexInfo.fromObject(object.apexInfo[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ApexMetadata message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {chromeos_update_engine.ApexMetadata} message ApexMetadata\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ApexMetadata.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.apexInfo = [];\n            if (message.apexInfo && message.apexInfo.length) {\n                object.apexInfo = [];\n                for (let j = 0; j < message.apexInfo.length; ++j)\n                    object.apexInfo[j] = $root.chromeos_update_engine.ApexInfo.toObject(message.apexInfo[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ApexMetadata to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ApexMetadata.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ApexMetadata;\n    })();\n\n    chromeos_update_engine.DeltaArchiveManifest = (function() {\n\n        /**\n         * Properties of a DeltaArchiveManifest.\n         * @memberof chromeos_update_engine\n         * @interface IDeltaArchiveManifest\n         * @property {Array.<chromeos_update_engine.IInstallOperation>|null} [installOperations] DeltaArchiveManifest installOperations\n         * @property {Array.<chromeos_update_engine.IInstallOperation>|null} [kernelInstallOperations] DeltaArchiveManifest kernelInstallOperations\n         * @property {number|null} [blockSize] DeltaArchiveManifest blockSize\n         * @property {number|Long|null} [signaturesOffset] DeltaArchiveManifest signaturesOffset\n         * @property {number|Long|null} [signaturesSize] DeltaArchiveManifest signaturesSize\n         * @property {chromeos_update_engine.IPartitionInfo|null} [oldKernelInfo] DeltaArchiveManifest oldKernelInfo\n         * @property {chromeos_update_engine.IPartitionInfo|null} [newKernelInfo] DeltaArchiveManifest newKernelInfo\n         * @property {chromeos_update_engine.IPartitionInfo|null} [oldRootfsInfo] DeltaArchiveManifest oldRootfsInfo\n         * @property {chromeos_update_engine.IPartitionInfo|null} [newRootfsInfo] DeltaArchiveManifest newRootfsInfo\n         * @property {chromeos_update_engine.IImageInfo|null} [oldImageInfo] DeltaArchiveManifest oldImageInfo\n         * @property {chromeos_update_engine.IImageInfo|null} [newImageInfo] DeltaArchiveManifest newImageInfo\n         * @property {number|null} [minorVersion] DeltaArchiveManifest minorVersion\n         * @property {Array.<chromeos_update_engine.IPartitionUpdate>|null} [partitions] DeltaArchiveManifest partitions\n         * @property {number|Long|null} [maxTimestamp] DeltaArchiveManifest maxTimestamp\n         * @property {chromeos_update_engine.IDynamicPartitionMetadata|null} [dynamicPartitionMetadata] DeltaArchiveManifest dynamicPartitionMetadata\n         * @property {boolean|null} [partialUpdate] DeltaArchiveManifest partialUpdate\n         * @property {Array.<chromeos_update_engine.IApexInfo>|null} [apexInfo] DeltaArchiveManifest apexInfo\n         */\n\n        /**\n         * Constructs a new DeltaArchiveManifest.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a DeltaArchiveManifest.\n         * @implements IDeltaArchiveManifest\n         * @constructor\n         * @param {chromeos_update_engine.IDeltaArchiveManifest=} [properties] Properties to set\n         */\n        function DeltaArchiveManifest(properties) {\n            this.installOperations = [];\n            this.kernelInstallOperations = [];\n            this.partitions = [];\n            this.apexInfo = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DeltaArchiveManifest installOperations.\n         * @member {Array.<chromeos_update_engine.IInstallOperation>} installOperations\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.installOperations = $util.emptyArray;\n\n        /**\n         * DeltaArchiveManifest kernelInstallOperations.\n         * @member {Array.<chromeos_update_engine.IInstallOperation>} kernelInstallOperations\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.kernelInstallOperations = $util.emptyArray;\n\n        /**\n         * DeltaArchiveManifest blockSize.\n         * @member {number} blockSize\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.blockSize = 4096;\n\n        /**\n         * DeltaArchiveManifest signaturesOffset.\n         * @member {number|Long} signaturesOffset\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.signaturesOffset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * DeltaArchiveManifest signaturesSize.\n         * @member {number|Long} signaturesSize\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.signaturesSize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * DeltaArchiveManifest oldKernelInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} oldKernelInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.oldKernelInfo = null;\n\n        /**\n         * DeltaArchiveManifest newKernelInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} newKernelInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.newKernelInfo = null;\n\n        /**\n         * DeltaArchiveManifest oldRootfsInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} oldRootfsInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.oldRootfsInfo = null;\n\n        /**\n         * DeltaArchiveManifest newRootfsInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} newRootfsInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.newRootfsInfo = null;\n\n        /**\n         * DeltaArchiveManifest oldImageInfo.\n         * @member {chromeos_update_engine.IImageInfo|null|undefined} oldImageInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.oldImageInfo = null;\n\n        /**\n         * DeltaArchiveManifest newImageInfo.\n         * @member {chromeos_update_engine.IImageInfo|null|undefined} newImageInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.newImageInfo = null;\n\n        /**\n         * DeltaArchiveManifest minorVersion.\n         * @member {number} minorVersion\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.minorVersion = 0;\n\n        /**\n         * DeltaArchiveManifest partitions.\n         * @member {Array.<chromeos_update_engine.IPartitionUpdate>} partitions\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.partitions = $util.emptyArray;\n\n        /**\n         * DeltaArchiveManifest maxTimestamp.\n         * @member {number|Long} maxTimestamp\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.maxTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * DeltaArchiveManifest dynamicPartitionMetadata.\n         * @member {chromeos_update_engine.IDynamicPartitionMetadata|null|undefined} dynamicPartitionMetadata\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.dynamicPartitionMetadata = null;\n\n        /**\n         * DeltaArchiveManifest partialUpdate.\n         * @member {boolean} partialUpdate\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.partialUpdate = false;\n\n        /**\n         * DeltaArchiveManifest apexInfo.\n         * @member {Array.<chromeos_update_engine.IApexInfo>} apexInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.apexInfo = $util.emptyArray;\n\n        /**\n         * Creates a new DeltaArchiveManifest instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {chromeos_update_engine.IDeltaArchiveManifest=} [properties] Properties to set\n         * @returns {chromeos_update_engine.DeltaArchiveManifest} DeltaArchiveManifest instance\n         */\n        DeltaArchiveManifest.create = function create(properties) {\n            return new DeltaArchiveManifest(properties);\n        };\n\n        /**\n         * Encodes the specified DeltaArchiveManifest message. Does not implicitly {@link chromeos_update_engine.DeltaArchiveManifest.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {chromeos_update_engine.IDeltaArchiveManifest} message DeltaArchiveManifest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DeltaArchiveManifest.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.installOperations != null && message.installOperations.length)\n                for (let i = 0; i < message.installOperations.length; ++i)\n                    $root.chromeos_update_engine.InstallOperation.encode(message.installOperations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.kernelInstallOperations != null && message.kernelInstallOperations.length)\n                for (let i = 0; i < message.kernelInstallOperations.length; ++i)\n                    $root.chromeos_update_engine.InstallOperation.encode(message.kernelInstallOperations[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.blockSize != null && Object.hasOwnProperty.call(message, \"blockSize\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.blockSize);\n            if (message.signaturesOffset != null && Object.hasOwnProperty.call(message, \"signaturesOffset\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.signaturesOffset);\n            if (message.signaturesSize != null && Object.hasOwnProperty.call(message, \"signaturesSize\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.signaturesSize);\n            if (message.oldKernelInfo != null && Object.hasOwnProperty.call(message, \"oldKernelInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.oldKernelInfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.newKernelInfo != null && Object.hasOwnProperty.call(message, \"newKernelInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.newKernelInfo, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.oldRootfsInfo != null && Object.hasOwnProperty.call(message, \"oldRootfsInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.oldRootfsInfo, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.newRootfsInfo != null && Object.hasOwnProperty.call(message, \"newRootfsInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.newRootfsInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.oldImageInfo != null && Object.hasOwnProperty.call(message, \"oldImageInfo\"))\n                $root.chromeos_update_engine.ImageInfo.encode(message.oldImageInfo, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.newImageInfo != null && Object.hasOwnProperty.call(message, \"newImageInfo\"))\n                $root.chromeos_update_engine.ImageInfo.encode(message.newImageInfo, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.minorVersion != null && Object.hasOwnProperty.call(message, \"minorVersion\"))\n                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.minorVersion);\n            if (message.partitions != null && message.partitions.length)\n                for (let i = 0; i < message.partitions.length; ++i)\n                    $root.chromeos_update_engine.PartitionUpdate.encode(message.partitions[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.maxTimestamp != null && Object.hasOwnProperty.call(message, \"maxTimestamp\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int64(message.maxTimestamp);\n            if (message.dynamicPartitionMetadata != null && Object.hasOwnProperty.call(message, \"dynamicPartitionMetadata\"))\n                $root.chromeos_update_engine.DynamicPartitionMetadata.encode(message.dynamicPartitionMetadata, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.partialUpdate != null && Object.hasOwnProperty.call(message, \"partialUpdate\"))\n                writer.uint32(/* id 16, wireType 0 =*/128).bool(message.partialUpdate);\n            if (message.apexInfo != null && message.apexInfo.length)\n                for (let i = 0; i < message.apexInfo.length; ++i)\n                    $root.chromeos_update_engine.ApexInfo.encode(message.apexInfo[i], writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified DeltaArchiveManifest message, length delimited. Does not implicitly {@link chromeos_update_engine.DeltaArchiveManifest.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {chromeos_update_engine.IDeltaArchiveManifest} message DeltaArchiveManifest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DeltaArchiveManifest.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DeltaArchiveManifest message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.DeltaArchiveManifest} DeltaArchiveManifest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DeltaArchiveManifest.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.DeltaArchiveManifest();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.installOperations && message.installOperations.length))\n                        message.installOperations = [];\n                    message.installOperations.push($root.chromeos_update_engine.InstallOperation.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    if (!(message.kernelInstallOperations && message.kernelInstallOperations.length))\n                        message.kernelInstallOperations = [];\n                    message.kernelInstallOperations.push($root.chromeos_update_engine.InstallOperation.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.blockSize = reader.uint32();\n                    break;\n                case 4:\n                    message.signaturesOffset = reader.uint64();\n                    break;\n                case 5:\n                    message.signaturesSize = reader.uint64();\n                    break;\n                case 6:\n                    message.oldKernelInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.newKernelInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.oldRootfsInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.newRootfsInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.oldImageInfo = $root.chromeos_update_engine.ImageInfo.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.newImageInfo = $root.chromeos_update_engine.ImageInfo.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.minorVersion = reader.uint32();\n                    break;\n                case 13:\n                    if (!(message.partitions && message.partitions.length))\n                        message.partitions = [];\n                    message.partitions.push($root.chromeos_update_engine.PartitionUpdate.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.maxTimestamp = reader.int64();\n                    break;\n                case 15:\n                    message.dynamicPartitionMetadata = $root.chromeos_update_engine.DynamicPartitionMetadata.decode(reader, reader.uint32());\n                    break;\n                case 16:\n                    message.partialUpdate = reader.bool();\n                    break;\n                case 17:\n                    if (!(message.apexInfo && message.apexInfo.length))\n                        message.apexInfo = [];\n                    message.apexInfo.push($root.chromeos_update_engine.ApexInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a DeltaArchiveManifest message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.DeltaArchiveManifest} DeltaArchiveManifest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DeltaArchiveManifest.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DeltaArchiveManifest message.\n         * @function verify\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DeltaArchiveManifest.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.installOperations != null && message.hasOwnProperty(\"installOperations\")) {\n                if (!Array.isArray(message.installOperations))\n                    return \"installOperations: array expected\";\n                for (let i = 0; i < message.installOperations.length; ++i) {\n                    let error = $root.chromeos_update_engine.InstallOperation.verify(message.installOperations[i]);\n                    if (error)\n                        return \"installOperations.\" + error;\n                }\n            }\n            if (message.kernelInstallOperations != null && message.hasOwnProperty(\"kernelInstallOperations\")) {\n                if (!Array.isArray(message.kernelInstallOperations))\n                    return \"kernelInstallOperations: array expected\";\n                for (let i = 0; i < message.kernelInstallOperations.length; ++i) {\n                    let error = $root.chromeos_update_engine.InstallOperation.verify(message.kernelInstallOperations[i]);\n                    if (error)\n                        return \"kernelInstallOperations.\" + error;\n                }\n            }\n            if (message.blockSize != null && message.hasOwnProperty(\"blockSize\"))\n                if (!$util.isInteger(message.blockSize))\n                    return \"blockSize: integer expected\";\n            if (message.signaturesOffset != null && message.hasOwnProperty(\"signaturesOffset\"))\n                if (!$util.isInteger(message.signaturesOffset) && !(message.signaturesOffset && $util.isInteger(message.signaturesOffset.low) && $util.isInteger(message.signaturesOffset.high)))\n                    return \"signaturesOffset: integer|Long expected\";\n            if (message.signaturesSize != null && message.hasOwnProperty(\"signaturesSize\"))\n                if (!$util.isInteger(message.signaturesSize) && !(message.signaturesSize && $util.isInteger(message.signaturesSize.low) && $util.isInteger(message.signaturesSize.high)))\n                    return \"signaturesSize: integer|Long expected\";\n            if (message.oldKernelInfo != null && message.hasOwnProperty(\"oldKernelInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.oldKernelInfo);\n                if (error)\n                    return \"oldKernelInfo.\" + error;\n            }\n            if (message.newKernelInfo != null && message.hasOwnProperty(\"newKernelInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.newKernelInfo);\n                if (error)\n                    return \"newKernelInfo.\" + error;\n            }\n            if (message.oldRootfsInfo != null && message.hasOwnProperty(\"oldRootfsInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.oldRootfsInfo);\n                if (error)\n                    return \"oldRootfsInfo.\" + error;\n            }\n            if (message.newRootfsInfo != null && message.hasOwnProperty(\"newRootfsInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.newRootfsInfo);\n                if (error)\n                    return \"newRootfsInfo.\" + error;\n            }\n            if (message.oldImageInfo != null && message.hasOwnProperty(\"oldImageInfo\")) {\n                let error = $root.chromeos_update_engine.ImageInfo.verify(message.oldImageInfo);\n                if (error)\n                    return \"oldImageInfo.\" + error;\n            }\n            if (message.newImageInfo != null && message.hasOwnProperty(\"newImageInfo\")) {\n                let error = $root.chromeos_update_engine.ImageInfo.verify(message.newImageInfo);\n                if (error)\n                    return \"newImageInfo.\" + error;\n            }\n            if (message.minorVersion != null && message.hasOwnProperty(\"minorVersion\"))\n                if (!$util.isInteger(message.minorVersion))\n                    return \"minorVersion: integer expected\";\n            if (message.partitions != null && message.hasOwnProperty(\"partitions\")) {\n                if (!Array.isArray(message.partitions))\n                    return \"partitions: array expected\";\n                for (let i = 0; i < message.partitions.length; ++i) {\n                    let error = $root.chromeos_update_engine.PartitionUpdate.verify(message.partitions[i]);\n                    if (error)\n                        return \"partitions.\" + error;\n                }\n            }\n            if (message.maxTimestamp != null && message.hasOwnProperty(\"maxTimestamp\"))\n                if (!$util.isInteger(message.maxTimestamp) && !(message.maxTimestamp && $util.isInteger(message.maxTimestamp.low) && $util.isInteger(message.maxTimestamp.high)))\n                    return \"maxTimestamp: integer|Long expected\";\n            if (message.dynamicPartitionMetadata != null && message.hasOwnProperty(\"dynamicPartitionMetadata\")) {\n                let error = $root.chromeos_update_engine.DynamicPartitionMetadata.verify(message.dynamicPartitionMetadata);\n                if (error)\n                    return \"dynamicPartitionMetadata.\" + error;\n            }\n            if (message.partialUpdate != null && message.hasOwnProperty(\"partialUpdate\"))\n                if (typeof message.partialUpdate !== \"boolean\")\n                    return \"partialUpdate: boolean expected\";\n            if (message.apexInfo != null && message.hasOwnProperty(\"apexInfo\")) {\n                if (!Array.isArray(message.apexInfo))\n                    return \"apexInfo: array expected\";\n                for (let i = 0; i < message.apexInfo.length; ++i) {\n                    let error = $root.chromeos_update_engine.ApexInfo.verify(message.apexInfo[i]);\n                    if (error)\n                        return \"apexInfo.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a DeltaArchiveManifest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.DeltaArchiveManifest} DeltaArchiveManifest\n         */\n        DeltaArchiveManifest.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.DeltaArchiveManifest)\n                return object;\n            let message = new $root.chromeos_update_engine.DeltaArchiveManifest();\n            if (object.installOperations) {\n                if (!Array.isArray(object.installOperations))\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.installOperations: array expected\");\n                message.installOperations = [];\n                for (let i = 0; i < object.installOperations.length; ++i) {\n                    if (typeof object.installOperations[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.installOperations: object expected\");\n                    message.installOperations[i] = $root.chromeos_update_engine.InstallOperation.fromObject(object.installOperations[i]);\n                }\n            }\n            if (object.kernelInstallOperations) {\n                if (!Array.isArray(object.kernelInstallOperations))\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.kernelInstallOperations: array expected\");\n                message.kernelInstallOperations = [];\n                for (let i = 0; i < object.kernelInstallOperations.length; ++i) {\n                    if (typeof object.kernelInstallOperations[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.kernelInstallOperations: object expected\");\n                    message.kernelInstallOperations[i] = $root.chromeos_update_engine.InstallOperation.fromObject(object.kernelInstallOperations[i]);\n                }\n            }\n            if (object.blockSize != null)\n                message.blockSize = object.blockSize >>> 0;\n            if (object.signaturesOffset != null)\n                if ($util.Long)\n                    (message.signaturesOffset = $util.Long.fromValue(object.signaturesOffset)).unsigned = true;\n                else if (typeof object.signaturesOffset === \"string\")\n                    message.signaturesOffset = parseInt(object.signaturesOffset, 10);\n                else if (typeof object.signaturesOffset === \"number\")\n                    message.signaturesOffset = object.signaturesOffset;\n                else if (typeof object.signaturesOffset === \"object\")\n                    message.signaturesOffset = new $util.LongBits(object.signaturesOffset.low >>> 0, object.signaturesOffset.high >>> 0).toNumber(true);\n            if (object.signaturesSize != null)\n                if ($util.Long)\n                    (message.signaturesSize = $util.Long.fromValue(object.signaturesSize)).unsigned = true;\n                else if (typeof object.signaturesSize === \"string\")\n                    message.signaturesSize = parseInt(object.signaturesSize, 10);\n                else if (typeof object.signaturesSize === \"number\")\n                    message.signaturesSize = object.signaturesSize;\n                else if (typeof object.signaturesSize === \"object\")\n                    message.signaturesSize = new $util.LongBits(object.signaturesSize.low >>> 0, object.signaturesSize.high >>> 0).toNumber(true);\n            if (object.oldKernelInfo != null) {\n                if (typeof object.oldKernelInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.oldKernelInfo: object expected\");\n                message.oldKernelInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.oldKernelInfo);\n            }\n            if (object.newKernelInfo != null) {\n                if (typeof object.newKernelInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.newKernelInfo: object expected\");\n                message.newKernelInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.newKernelInfo);\n            }\n            if (object.oldRootfsInfo != null) {\n                if (typeof object.oldRootfsInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.oldRootfsInfo: object expected\");\n                message.oldRootfsInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.oldRootfsInfo);\n            }\n            if (object.newRootfsInfo != null) {\n                if (typeof object.newRootfsInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.newRootfsInfo: object expected\");\n                message.newRootfsInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.newRootfsInfo);\n            }\n            if (object.oldImageInfo != null) {\n                if (typeof object.oldImageInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.oldImageInfo: object expected\");\n                message.oldImageInfo = $root.chromeos_update_engine.ImageInfo.fromObject(object.oldImageInfo);\n            }\n            if (object.newImageInfo != null) {\n                if (typeof object.newImageInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.newImageInfo: object expected\");\n                message.newImageInfo = $root.chromeos_update_engine.ImageInfo.fromObject(object.newImageInfo);\n            }\n            if (object.minorVersion != null)\n                message.minorVersion = object.minorVersion >>> 0;\n            if (object.partitions) {\n                if (!Array.isArray(object.partitions))\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.partitions: array expected\");\n                message.partitions = [];\n                for (let i = 0; i < object.partitions.length; ++i) {\n                    if (typeof object.partitions[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.partitions: object expected\");\n                    message.partitions[i] = $root.chromeos_update_engine.PartitionUpdate.fromObject(object.partitions[i]);\n                }\n            }\n            if (object.maxTimestamp != null)\n                if ($util.Long)\n                    (message.maxTimestamp = $util.Long.fromValue(object.maxTimestamp)).unsigned = false;\n                else if (typeof object.maxTimestamp === \"string\")\n                    message.maxTimestamp = parseInt(object.maxTimestamp, 10);\n                else if (typeof object.maxTimestamp === \"number\")\n                    message.maxTimestamp = object.maxTimestamp;\n                else if (typeof object.maxTimestamp === \"object\")\n                    message.maxTimestamp = new $util.LongBits(object.maxTimestamp.low >>> 0, object.maxTimestamp.high >>> 0).toNumber();\n            if (object.dynamicPartitionMetadata != null) {\n                if (typeof object.dynamicPartitionMetadata !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.dynamicPartitionMetadata: object expected\");\n                message.dynamicPartitionMetadata = $root.chromeos_update_engine.DynamicPartitionMetadata.fromObject(object.dynamicPartitionMetadata);\n            }\n            if (object.partialUpdate != null)\n                message.partialUpdate = Boolean(object.partialUpdate);\n            if (object.apexInfo) {\n                if (!Array.isArray(object.apexInfo))\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.apexInfo: array expected\");\n                message.apexInfo = [];\n                for (let i = 0; i < object.apexInfo.length; ++i) {\n                    if (typeof object.apexInfo[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.apexInfo: object expected\");\n                    message.apexInfo[i] = $root.chromeos_update_engine.ApexInfo.fromObject(object.apexInfo[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a DeltaArchiveManifest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {chromeos_update_engine.DeltaArchiveManifest} message DeltaArchiveManifest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DeltaArchiveManifest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.installOperations = [];\n                object.kernelInstallOperations = [];\n                object.partitions = [];\n                object.apexInfo = [];\n            }\n            if (options.defaults) {\n                object.blockSize = 4096;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.signaturesOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.signaturesOffset = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.signaturesSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.signaturesSize = options.longs === String ? \"0\" : 0;\n                object.oldKernelInfo = null;\n                object.newKernelInfo = null;\n                object.oldRootfsInfo = null;\n                object.newRootfsInfo = null;\n                object.oldImageInfo = null;\n                object.newImageInfo = null;\n                object.minorVersion = 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.maxTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.maxTimestamp = options.longs === String ? \"0\" : 0;\n                object.dynamicPartitionMetadata = null;\n                object.partialUpdate = false;\n            }\n            if (message.installOperations && message.installOperations.length) {\n                object.installOperations = [];\n                for (let j = 0; j < message.installOperations.length; ++j)\n                    object.installOperations[j] = $root.chromeos_update_engine.InstallOperation.toObject(message.installOperations[j], options);\n            }\n            if (message.kernelInstallOperations && message.kernelInstallOperations.length) {\n                object.kernelInstallOperations = [];\n                for (let j = 0; j < message.kernelInstallOperations.length; ++j)\n                    object.kernelInstallOperations[j] = $root.chromeos_update_engine.InstallOperation.toObject(message.kernelInstallOperations[j], options);\n            }\n            if (message.blockSize != null && message.hasOwnProperty(\"blockSize\"))\n                object.blockSize = message.blockSize;\n            if (message.signaturesOffset != null && message.hasOwnProperty(\"signaturesOffset\"))\n                if (typeof message.signaturesOffset === \"number\")\n                    object.signaturesOffset = options.longs === String ? String(message.signaturesOffset) : message.signaturesOffset;\n                else\n                    object.signaturesOffset = options.longs === String ? $util.Long.prototype.toString.call(message.signaturesOffset) : options.longs === Number ? new $util.LongBits(message.signaturesOffset.low >>> 0, message.signaturesOffset.high >>> 0).toNumber(true) : message.signaturesOffset;\n            if (message.signaturesSize != null && message.hasOwnProperty(\"signaturesSize\"))\n                if (typeof message.signaturesSize === \"number\")\n                    object.signaturesSize = options.longs === String ? String(message.signaturesSize) : message.signaturesSize;\n                else\n                    object.signaturesSize = options.longs === String ? $util.Long.prototype.toString.call(message.signaturesSize) : options.longs === Number ? new $util.LongBits(message.signaturesSize.low >>> 0, message.signaturesSize.high >>> 0).toNumber(true) : message.signaturesSize;\n            if (message.oldKernelInfo != null && message.hasOwnProperty(\"oldKernelInfo\"))\n                object.oldKernelInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.oldKernelInfo, options);\n            if (message.newKernelInfo != null && message.hasOwnProperty(\"newKernelInfo\"))\n                object.newKernelInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.newKernelInfo, options);\n            if (message.oldRootfsInfo != null && message.hasOwnProperty(\"oldRootfsInfo\"))\n                object.oldRootfsInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.oldRootfsInfo, options);\n            if (message.newRootfsInfo != null && message.hasOwnProperty(\"newRootfsInfo\"))\n                object.newRootfsInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.newRootfsInfo, options);\n            if (message.oldImageInfo != null && message.hasOwnProperty(\"oldImageInfo\"))\n                object.oldImageInfo = $root.chromeos_update_engine.ImageInfo.toObject(message.oldImageInfo, options);\n            if (message.newImageInfo != null && message.hasOwnProperty(\"newImageInfo\"))\n                object.newImageInfo = $root.chromeos_update_engine.ImageInfo.toObject(message.newImageInfo, options);\n            if (message.minorVersion != null && message.hasOwnProperty(\"minorVersion\"))\n                object.minorVersion = message.minorVersion;\n            if (message.partitions && message.partitions.length) {\n                object.partitions = [];\n                for (let j = 0; j < message.partitions.length; ++j)\n                    object.partitions[j] = $root.chromeos_update_engine.PartitionUpdate.toObject(message.partitions[j], options);\n            }\n            if (message.maxTimestamp != null && message.hasOwnProperty(\"maxTimestamp\"))\n                if (typeof message.maxTimestamp === \"number\")\n                    object.maxTimestamp = options.longs === String ? String(message.maxTimestamp) : message.maxTimestamp;\n                else\n                    object.maxTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.maxTimestamp) : options.longs === Number ? new $util.LongBits(message.maxTimestamp.low >>> 0, message.maxTimestamp.high >>> 0).toNumber() : message.maxTimestamp;\n            if (message.dynamicPartitionMetadata != null && message.hasOwnProperty(\"dynamicPartitionMetadata\"))\n                object.dynamicPartitionMetadata = $root.chromeos_update_engine.DynamicPartitionMetadata.toObject(message.dynamicPartitionMetadata, options);\n            if (message.partialUpdate != null && message.hasOwnProperty(\"partialUpdate\"))\n                object.partialUpdate = message.partialUpdate;\n            if (message.apexInfo && message.apexInfo.length) {\n                object.apexInfo = [];\n                for (let j = 0; j < message.apexInfo.length; ++j)\n                    object.apexInfo[j] = $root.chromeos_update_engine.ApexInfo.toObject(message.apexInfo[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this DeltaArchiveManifest to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DeltaArchiveManifest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DeltaArchiveManifest;\n    })();\n\n    return chromeos_update_engine;\n})();\n\nexport { $root as default };\n","import * as zip from '@zip.js/zip.js/dist/zip-full.min.js'\nimport { chromeos_update_engine } from './update_metadata_pb.js'\n\n/**\n * Parse the non-A/B OTA package and return it as a DeltaArchiveManifest\n * @param {ZipReader} packedFile\n */\nexport class PayloadNonAB extends chromeos_update_engine.DeltaArchiveManifest{\n  constructor(packedFile) {\n    super()\n    this.packedFile = packedFile\n  }\n\n  async init() {\n    this.Blocksize = 4096\n    this.partialUpdate = false\n    this.dynamicPartitionMetadata =\n      new chromeos_update_engine.DynamicPartitionMetadata(\n        { snapshotEnabled: false, vabcEnabled: false }\n      )\n    this.partitions = []\n\n    const /** RegExp*/ regexName = /[\\w_]+(?=\\.transfer.list)/g\n    const /** Array<Entry> */ entries = await this.packedFile.getEntries()\n    for (const entry of entries) {\n      if (entry.filename.match(regexName)) {\n        let newPartition = new chromeos_update_engine.PartitionUpdate(\n          {partitionName: entry.filename.match(regexName)[0]}\n        )\n        newPartition.rawText = await entry.getData(new zip.TextWriter())\n        await this.parseTransferList(newPartition)\n        this.partitions.push(newPartition)\n      }\n    }\n  }\n\n  async parseTransferList(partition) {\n    let /** Array<String> */ lines = partition.rawText.split('\\n')\n    // First four line in header: version, total blocks,\n    // number of stashed entries, maximum used memory for stash\n    if (lines.length < 4) {\n      throw \"At least 4 lines in header should be provided.\"\n    }\n    partition.version = parseInt(lines[0])\n    partition.totalBlocks = parseInt(lines[1])\n    partition.entryStashed = parseInt(lines[2])\n    partition.maxStashed = parseInt(lines[3])\n    partition.newPartitionInfo = new chromeos_update_engine.PartitionInfo()\n    partition.newPartitionInfo.hash = ''\n    partition.newPartitionInfo.size = 'unknown'\n    /**\n    * The main body have 8 different ops:\n    * zero [rangeset] : fill zeros\n    * new [rangeset] : fill with new data from <partitionName.new.data>\n    * erase [rangeset] : mark given blocks as empty\n    * move <src_hash> <...>\n    * bsdiff <patchstart> <patchlen> <src_hash> <tgt_hash> <...>\n    * imgdiff <patchstart> <patchlen> <src_hash> <tgt_hash> <...> :\n    * Read the source blocks and apply (not for move op) to the target blocks\n    * stash <stash_id> <src_range> : load the given source range to memory\n    * free <stash_id> : free the given <stash_id>\n    * format:\n    * [rangeset]: <# of pairs>, <pair A start>, <pair A end>, ...\n    * <stash_id>: a hex number with length of 40\n    * <...>: We expect to parse the remainder of the parameter tokens as one of:\n    *   <tgt_range> <src_block_count> <src_range> (loads data from source image only)\n    *   <tgt_range> <src_block_count> - <[stash_id:stash_range] ...> (loads data from stashes only)\n    *   <tgt_range> <src_block_count> <src_range> <src_loc> <[stash_id:stash_range] ...>\n    *   (loads data from both source image and stashes)\n    */\n    partition.operations = new Array()\n    let newDataSize = await this.sizeNewData(partition.partitionName)\n    for (const line of lines.slice(4)) {\n      let op = new chromeos_update_engine.InstallOperation()\n      let elements = line.split(' ')\n      op.type = elements[0]\n      switch (op.type) {\n      case 'zero':\n        op.dstExtents = elements.slice(1).reduce(parseRange, [])\n        break\n      case 'new':\n        // unlike an A/B OTA, the payload only exists in the payload.bin,\n        // in an non-A/B OTA, the payload exists in both .new.data and .patch.data.\n        // The new ops do not have any information about data length.\n        // what we do here is: read in the size of .new.data, assume the first new\n        // op have the data length of the size of .new.data.\n        op.dataLength = newDataSize\n        newDataSize = 0\n        op.dstExtents = elements.slice(1).reduce(parseRange, [])\n        break\n      case 'erase':\n        op.dstExtents = elements.slice(1).reduce(parseRange, [])\n        break\n      case 'move':\n        op.dstExtents = parseRange([], elements[2])\n        break\n      case 'bsdiff':\n        op.dataOffset = parseInt(elements[1])\n        op.dataLength = parseInt(elements[2])\n        op.dstExtents = parseRange([], elements[5])\n        break\n      case 'imgdiff':\n        op.dataOffset = parseInt(elements[1])\n        op.dataLength = parseInt(elements[2])\n        op.dstExtents = parseRange([], elements[5])\n        break\n      case 'stash':\n        break\n      case 'free':\n        break\n      }\n      partition.operations.push(op)\n    }\n  }\n\n  /**\n   * Return the size of <partitionName>.new.data.*\n   * @param {String} partitionName\n   * @return {Number}\n   */\n  async sizeNewData(partitionName) {\n    const /** Array<Entry> */ entries = await this.packedFile.getEntries()\n    const /** RegExp */ regexName = new RegExp(partitionName + '.new.dat.*')\n    for (const entry of entries) {\n      if (entry.filename.match(regexName)) {\n        return entry.uncompressedSize\n      }\n    }\n  }\n}\n\n/**\n * Parse the range string and return it as an array of extents\n * @param {extents} Array<extents>\n * @param {String} rangeset\n * @return Array<extents>\n */\nfunction parseRange(extents, rangeset) {\n  const regexRange = new RegExp('[\\d,]+')\n  if (rangeset.match(regexRange)) {\n    let elements = rangeset.split(',')\n    for (let i=1; i<elements.length; i=i+2) {\n      let extent = new Object(\n        {\n          startBlock: parseInt(elements[i]),\n          numBlocks: parseInt(elements[i+1]) - parseInt(elements[i])\n        }\n      )\n      extents.push(extent)\n    }\n  }\n  return extents\n}","/**\n * @fileoverview Class paypload is used to read in and\n * parse the payload.bin file from a OTA.zip file.\n * Class OpType creates a Map that can resolve the\n * operation type.\n * @package zip.js\n * @package protobufjs\n */\n\nimport * as zip from '@zip.js/zip.js/dist/zip-full.min.js'\nimport { chromeos_update_engine as update_metadata_pb } from './update_metadata_pb.js'\nimport { PayloadNonAB } from './payload_nonab.js'\n\nconst /** String */ _MAGIC = 'CrAU'\nconst /** Number */ _VERSION_SIZE = 8\nconst /** Number */ _MANIFEST_LEN_SIZE = 8\nconst /** Number */ _METADATA_SIGNATURE_LEN_SIZE = 4\n\nconst /** Number */ _PAYLOAD_HEADER_SIZE =\n  _MAGIC.length + _VERSION_SIZE + _MANIFEST_LEN_SIZE + _METADATA_SIGNATURE_LEN_SIZE\n\nconst /** Number */ _BRILLO_MAJOR_PAYLOAD_VERSION = 2\nexport const /** Array<Object> */ MetadataFormat = [\n  {\n    prefix: 'pre-build',\n    key: 'preBuild',\n    name: 'Pre-build'\n  },\n  {\n    prefix: 'pre-build-incremental',\n    key: 'preBuildVersion',\n    name: 'Pre-build version'\n  },\n  {\n    prefix: 'post-build',\n    key: 'postBuild',\n    name: 'Post-build'\n  },\n  {\n    prefix: 'post-build-incremental',\n    key: 'postBuildVersion',\n    name: 'Post-build version'\n  }\n]\n\nclass StopIteration extends Error {\n\n}\n\nclass OTAPayloadBlobWriter extends zip.Writer {\n  /**\n   * A zip.Writer that is tailored for OTA payload.bin read-in.\n   * Instead of reading in all the contents in payload.bin, this writer will\n   * throw an 'StopIteration' error when the header is read in.\n   * The header will be stored into the <payload>.\n   * @param {Payload} payload\n   * @param {String} contentType\n   */\n  constructor(payload, contentType = \"\") {\n    super()\n    this.offset = 0\n    this.contentType = contentType\n    this.blob = new Blob([], { type: contentType })\n    this.prefixLength = 0\n    this.payload = payload\n  }\n\n  async writeUint8Array(/**  @type {Uint8Array} */ array) {\n    super.writeUint8Array(array)\n    this.blob = new Blob([this.blob, array.buffer], { type: this.contentType })\n    this.offset = this.blob.size\n    // Once the prefixLength is non-zero, the address of manifest and signature\n    // become known and can be read in. Otherwise the header needs to be read\n    // in first to determine the prefixLength.\n    if (this.offset >= _PAYLOAD_HEADER_SIZE) {\n      await this.payload.readHeader(this.blob)\n      this.prefixLength =\n        _PAYLOAD_HEADER_SIZE\n        + this.payload.manifest_len\n        + this.payload.metadata_signature_len\n      console.log(`Computed metadata length: ${this.prefixLength}`);\n    }\n    if (this.prefixLength > 0) {\n      console.log(`${this.offset}/${this.prefixLength}`);\n      if (this.offset >= this.prefixLength) {\n        await this.payload.readManifest(this.blob)\n        await this.payload.readSignature(this.blob)\n      }\n    }\n    // The prefix has everything we need (header, manifest, signature). Once\n    // the offset is beyond the prefix, no need to move on.\n    if (this.offset >= this.prefixLength) {\n      throw new StopIteration()\n    }\n  }\n\n  getData() {\n    return this.blob\n  }\n}\n\nexport class Payload {\n  /**\n   * This class parses the metadata of a OTA package.\n   * @param {File} file A OTA.zip file read from user's machine.\n   */\n  constructor(file) {\n    this.packedFile = new zip.ZipReader(new zip.BlobReader(file))\n    this.cursor = 0\n  }\n\n  /**\n   * Unzip the OTA package, get payload.bin and metadata\n   */\n  async unzip() {\n    let /** Array<Entry> */ entries = await this.packedFile.getEntries()\n    this.payload = null\n    for (let entry of entries) {\n      if (entry.filename == 'payload.bin') {\n        let writer = new OTAPayloadBlobWriter(this, \"\")\n        try {\n          await entry.getData(writer)\n        } catch (e) {\n          if (e instanceof StopIteration) {\n            // Exception used as a hack to stop reading from zip. NO need to do anything\n            // Ideally zip.js would provide an API to partialll read a zip\n            // entry, but they don't. So this is what we get\n          } else {\n            throw e\n          }\n        }\n        this.payload = writer.getData()\n        break\n      }\n      if (entry.filename == 'META-INF/com/android/metadata') {\n        this.metadata = await entry.getData(new zip.TextWriter())\n      }\n    }\n    if (!this.payload) {\n      try {\n        // The temporary variable manifest has to be used here, to prevent the html page\n        // being rendered before everything is read in properly\n        let manifest = new PayloadNonAB(this.packedFile)\n        await manifest.init()\n        manifest.nonAB = true\n        this.manifest = manifest\n      } catch (error) {\n        alert('Please select a legit OTA package')\n        return\n      }\n    }\n  }\n\n  /**\n   * Read in an integer from binary bufferArray.\n   * @param {Int} size the size of a integer being read in\n   * @return {Int} an integer.\n   */\n  readInt(size) {\n    let /** DataView */ view = new DataView(\n      this.buffer.slice(this.cursor, this.cursor + size))\n    if (typeof view.getBigUint64 !== \"function\") {\n      view.getBigUint64 =\n        function (offset) {\n          const a = BigInt(view.getUint32(offset))\n          const b = BigInt(view.getUint32(offset + 4))\n          const bigNumber = a * 4294967296n + b\n          return bigNumber\n        }\n    }\n    this.cursor += size\n    switch (size) {\n    case 2:\n      return view.getUInt16(0)\n    case 4:\n      return view.getUint32(0)\n    case 8:\n      return Number(view.getBigUint64(0))\n    default:\n      throw 'Cannot read this integer with size ' + size\n    }\n  }\n\n  /**\n   * Read the header of payload.bin, including the magic, header_version,\n   * manifest_len, metadata_signature_len.\n   */\n  async readHeader(/** @type {Blob} */buffer) {\n    this.buffer = await buffer.slice(0, _PAYLOAD_HEADER_SIZE).arrayBuffer()\n    let /** TextDecoder */ decoder = new TextDecoder()\n    try {\n      this.magic = decoder.decode(\n        this.buffer.slice(this.cursor, _MAGIC.length))\n      if (this.magic != _MAGIC) {\n        throw new Error('MAGIC is not correct, please double check.')\n      }\n      this.cursor += _MAGIC.length\n      this.header_version = this.readInt(_VERSION_SIZE)\n      this.manifest_len = this.readInt(_MANIFEST_LEN_SIZE)\n      if (this.header_version == _BRILLO_MAJOR_PAYLOAD_VERSION) {\n        this.metadata_signature_len = this.readInt(_METADATA_SIGNATURE_LEN_SIZE)\n      }\n      else {\n        throw new Error(`Unexpected major version number: ${this.header_version}`)\n      }\n    } catch (err) {\n      console.log(err)\n      return\n    }\n  }\n\n  /**\n   * Read in the manifest in an OTA.zip file.\n   * The structure of the manifest can be found in:\n   * aosp/system/update_engine/update_metadata.proto\n   */\n  async readManifest(/** @type {Blob} */buffer) {\n    buffer = await buffer.slice(\n      this.cursor, this.cursor + this.manifest_len).arrayBuffer()\n    this.cursor += this.manifest_len\n    this.manifest = update_metadata_pb.DeltaArchiveManifest\n      .decode(new Uint8Array(buffer))\n    this.manifest.nonAB = false\n  }\n\n  async readSignature(/** @type {Blob} */buffer) {\n    buffer = await buffer.slice(\n      this.cursor, this.cursor + this.metadata_signature_len).arrayBuffer()\n    this.cursor += this.metadata_signature_len\n    this.metadata_signature = update_metadata_pb.Signatures\n      .decode(new Uint8Array(buffer))\n  }\n\n  parseMetadata() {\n    for (let formatter of MetadataFormat) {\n      let regex = new RegExp(formatter.prefix + '.+')\n      if (this.metadata.match(regex)) {\n        this[formatter.key] =\n          trimEntry(this.metadata.match(regex)[0], formatter.prefix)\n      } else this[formatter.key] = ''\n    }\n  }\n\n  async init() {\n    await this.unzip()\n    this.parseMetadata()\n  }\n\n}\n\nexport class DefaultMap extends Map {\n  /** Reload the original get method. Return the original key value if\n   * the key does not exist.\n   * @param {Any} key\n   */\n  getWithDefault(key) {\n    if (!this.has(key)) return key\n    return this.get(key)\n  }\n}\n\nexport class OpType {\n  /**\n   * OpType.mapType create a map that could resolve the operation\n   * types. The operation types are encoded as numbers in\n   * update_metadata.proto and must be decoded before any usage.\n   */\n  constructor() {\n    let /** Array<{String: Number}>*/ types = update_metadata_pb.InstallOperation.Type\n    this.mapType = new DefaultMap()\n    for (let key of Object.keys(types)) {\n      this.mapType.set(types[key], key)\n    }\n  }\n}\n\nexport class MergeOpType {\n  /**\n   * MergeOpType create a map that could resolve the COW merge operation\n   * types. This is very similar to OpType class except that one is for\n   * installation operations.\n   */\n  constructor() {\n    let /** Array<{String: Number}>*/ types =\n      update_metadata_pb.CowMergeOperation.Type\n    this.mapType = new DefaultMap()\n    for (let key of Object.keys(types)) {\n      this.mapType.set(types[key], key)\n    }\n  }\n}\n\nexport function octToHex(bufferArray, space = true, maxLine = 16) {\n  let hex_table = ''\n  for (let i = 0; i < bufferArray.length; i++) {\n    if (bufferArray[i].toString(16).length === 2) {\n      hex_table += bufferArray[i].toString(16) + (space ? ' ' : '')\n    } else {\n      hex_table += '0' + bufferArray[i].toString(16) + (space ? ' ' : '')\n    }\n    if ((i + 1) % maxLine == 0) {\n      hex_table += '\\n'\n    }\n  }\n  return hex_table\n}\n\n/**\n * Trim the prefix in an entry. This is required because the lookbehind\n * regular expression is not supported in safari yet.\n * @param {String} entry\n * @param {String} prefix\n * @return String\n */\nfunction trimEntry(entry, prefix) {\n  return entry.slice(prefix.length + 1, entry.length)\n}","<template>\n  <ul>\n    <h5> {{ mapType.getWithDefault(operation.type) }} </h5>\n    <li v-if=\"operation.hasOwnProperty('dataOffset')\">\n      <strong> Data offset: </strong> {{ operation.dataOffset }}\n    </li>\n    <li v-if=\"operation.hasOwnProperty('dataLength')\">\n      <strong> Data length: </strong> {{ operation.dataLength }}\n    </li>\n    <li v-if=\"operation.hasOwnProperty('srcExtents')\">\n      <strong> Source: </strong> {{ operation.srcExtents.length }} extents ({{ srcTotalBlocks }}\n      blocks)\n      <br>\n      {{ srcBlocks }}\n    </li>\n    <li v-if=\"operation.hasOwnProperty('dstExtents')\">\n      <strong> Destination: </strong> {{ operation.dstExtents.length }} extents ({{ dstTotalBlocks }}\n      blocks)\n      <br>\n      {{ dstBlocks }}\n    </li>\n  </ul>\n  <v-divider />\n</template>\n\n<script>\nimport { numBlocks, displayBlocks } from '../services/payload_composition.js'\nimport { DefaultMap } from '../services/payload.js'\n\nexport default {\n  props: {\n    operation: {\n      type: Object,\n      required: true,\n    },\n    mapType: {\n      type: DefaultMap,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      srcTotalBlocks: null,\n      srcBlocks: null,\n      dstTotalBlocks: null,\n      dstBlocks: null,\n    }\n  },\n  mounted() {\n    if (this.operation.srcExtents) {\n      this.srcTotalBlocks = numBlocks(this.operation.srcExtents)\n      this.srcBlocks = displayBlocks(this.operation.srcExtents)\n    }\n    if (this.operation.dstExtents) {\n      this.dstTotalBlocks = numBlocks(this.operation.dstExtents)\n      this.dstBlocks = displayBlocks(this.operation.dstExtents)\n    }\n  },\n}\n</script>\n\n<style scoped>\nul {\n  padding: 5px;\n}\n\nli {\n  color: black;\n  list-style-type: none;\n}\n\n</style>","export class EchartsData {\n  /**\n   * Given a set of [key, value] pairs and title, create an object for further\n   * usage in Vue-Echarts.\n   * @param {Map} statisticData\n   * @param {String} title\n   * @param {String} unit\n   * @param {Number} maximumEntries\n   */\n  constructor(statisticData, title, unit, maximumEntries = 15) {\n    this.statisticData = statisticData\n    this.title = title\n    this.unit = unit\n    this.maximumEntries = maximumEntries\n  }\n\n  /**\n   * Convert the raw data into a string.\n   * @return {String} A list of [key, value].\n   */\n  listData() {\n    let /** String */ table = ''\n    for (let [key, value] of this.statisticData) {\n      table += key + ' : ' + value.toString() + ' Blocks' + '\\n'\n    }\n    return table\n  }\n\n  /**\n   * Generate necessary parameters (option) for vue-echarts.\n   * Format of the parameters can be found here:\n   * https://echarts.apache.org/en/option.html\n   * @param {String} unit\n   * @return {Object} an ECharts option object.\n   */\n  getEchartsOption() {\n    if (this.statisticData.size > this.maximumEntries) {\n      this.statisticData = trimMap(this.statisticData, this.maximumEntries)\n    }\n    let /** Object */ option = new Object()\n    option.title = {\n      text: this.title,\n      left: \"center\"\n    }\n    option.tooltip = {\n      trigger: \"item\",\n      formatter: \"{a} <br/>{b} : {c} \" + this.unit + \" ({d}%)\"\n    }\n    option.legend = {\n      orient: \"horizontal\",\n      left: \"top\",\n      top: \"10%\",\n      data: Array.from(this.statisticData.keys())\n    }\n    option.series = [\n      {\n        name: this.title,\n        type: \"pie\",\n        radius: \"55%\",\n        center: [\"50%\", \"60%\"],\n        data: Array.from(this.statisticData).map((pair) => {\n          return { value: pair[1], name: pair[0] }\n        }),\n        emphasis: {\n          itemStyle: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: \"rgba(0, 0, 0, 0.5)\"\n          }\n        }\n      }\n    ]\n    return option\n  }\n}\n\n/**\n * When there are too many entries in the map, the pie chart can be very\n * crowded. This function will return the entries that have high values.\n * Specifically, the top <maximumEntries> will be stored and the others\n * will be added into an entry called 'other'.\n * @param {Map} map\n * @param {Number} maximumEntries\n * @return {Map}\n */\nfunction trimMap(map, maximumEntries) {\n  if (map.size <= maximumEntries) return map\n  let /** Map */ new_map = new Map()\n  for (let i=0; i<maximumEntries; i++) {\n    let /** Number */ curr = 0\n    let /** String */ currKey = ''\n    for (let [key, value] of map) {\n      if (!new_map.get(key)) {\n        if (value > curr) {\n          curr = value\n          currKey = key\n        }\n      }\n    }\n    new_map.set(currKey, curr)\n  }\n  let /** Number */ restTotal = 0\n  for (let [key, value] of map) {\n    if (!new_map.get(key)) {\n      restTotal += value\n    }\n  }\n  new_map.set('other', restTotal)\n  return new_map\n}","/**\n * @fileoverview Class MapParser will take in a Android build and construct\n * several file name maps (physical address: file name) according to it.\n * The map of each partitions is added by calling MapParser.add(partitionName).\n * You can query the file name being operated by calling\n * MapParser.query(address, datalength).\n */\n\nimport * as zip from '@zip.js/zip.js/dist/zip-full.min.js'\n\nexport class MapParser {\n  /**\n   * This class will take in a .zip Android build and construct a file type map\n   * @param {File} targetFile\n   */\n  constructor(targetFile) {\n    this.build = new zip.ZipReader(new zip.BlobReader(targetFile))\n    this.mapFiles = new Map()\n    this.maps = new Map()\n  }\n\n  /**\n   * Find the .map entries in the .zip build file. Store them as a map with\n   * pairs of (partition name: zip.js entry).\n   */\n  async init() {\n    let /** Array<Entry> */ entries = await this.build.getEntries()\n    const /** RegExp*/ regexPath = /IMAGES\\/[a-z_]*\\.map/g;\n    const /** RegExp*/ regexName = /[\\w_]+(?=\\.map)/g\n    entries.forEach((entry) => {\n      if (entry.filename.match(regexPath)) {\n        this.mapFiles.set(entry.filename.match(regexName)[0], entry)\n      }\n    });\n  }\n\n  /**\n   * According to the .map in the build, build a map for later query.\n   * @param {String} partitionName\n   * @param {Number} totalLength\n   */\n  async add(partitionName, totalLength) {\n    let /** Array<String> */ map = []\n    const /** RegExp */ regexNumber = /\\d+/g\n    const /** Reg */ regexRange = /\\d+\\-\\d+/g\n    for (let i = 0; i < totalLength; i++) map[i] = 'unknown'\n    if (this.mapFiles.get(partitionName)) {\n      let /** String */mapText =\n        await this.mapFiles.get(partitionName).getData(\n          new zip.TextWriter()\n        )\n      let /** Array<String> */fileEntries = mapText.split('\\n')\n      // Each line of the .map file in Android build starts with the filename\n      // Followed by the block address, either a number or a range, for example:\n      // //system/apex/com.android.adbd.apex 54-66 66 66-2663\n      for (let entry of fileEntries) {\n        let /** Array<String> */ elements = entry.split(' ')\n        for (let j = 1; j < elements.length; j++) {\n          let /** Number */ left = 0\n          let /** Number */ right = 0\n          if (elements[j].match(regexRange)) {\n            left = parseInt(elements[j].match(/\\d+/g)[0])\n            right = parseInt(elements[j].match(/\\d+/g)[1])\n          } else {\n            left = parseInt(elements[j].match(regexNumber))\n            right = parseInt(elements[j].match(regexNumber))\n          }\n          InsertMap(map, elements[0], left, right)\n        }\n      }\n      this.maps.set(partitionName, map)\n    }\n    else {\n      this.maps.set(partitionName, map)\n    }\n  }\n\n  /**\n   * Return the filename of given address.\n   * @param {String} partitionName\n   * @param {Array<PartitionUpdate>} extents\n   * @return {Array<String>}\n   */\n  query(partitionName, extents) {\n    let /** Array<String> */ names = []\n    let /** Array<String> */ map = this.maps.get(partitionName)\n    for (let ext of extents) {\n      names.push(queryMap(map,\n        ext.startBlock,\n        ext.startBlock + ext.numBlocks))\n    }\n    return names\n  }\n}\n\n/**\n * Fill in the hashtable from <left> to <right> using <name>.\n * @param {Array<String>} map\n * @param {String} name\n * @param {Number} left\n * @param {Number} right\n */\nfunction InsertMap(map, name, left, right) {\n  for (let i = left; i <= right; i++) {\n    map[i] = name\n  }\n}\n\n/**\n * Query the hashtable <map> using index <address>.\n * @param {Array<String>} map\n * @param {Number} left\n * @param {Number} right\n */\nfunction queryMap(map, left, right) {\n  // Assuming the consecutive blocks belong to the same file\n  // Only the start block is queried here.\n  if (!map[left]) {\n    return 'unknown'\n  }\n  return map[left]\n}","/**\n * @fileoverview Offer functions that can be used to parse the partitionUpdate\n * and then do statistics over it. One can use analysePartitions to specify the\n * partitions been analysed and metrics.\n */\n\nimport { OpType, MergeOpType } from '@/services/payload.js'\nimport { EchartsData } from '@/services/echarts_data.js'\nimport { MapParser } from '@/services/map_parser.js'\n\n/**\n * Add a <value> to a element associated to <key>. If the element dose not\n * exists than its value will be initialized to zero.\n * @param {Map} map\n * @param {String} key\n * @param {Number} value\n */\nfunction addNumberToMap(map, key, value) {\n  if (!map.get(key)) {\n    map.set(key, 0)\n  }\n  map.set(key, map.get(key) + value)\n}\n\n/**\n * Return a statistics over the numbers of blocks (in destination) that are\n * being operated by different installation operation (e.g. REPLACE, BSDIFF).\n * Only partitions that are being passed in will be included.\n * @param {Array<PartitionUpdate>} partitions\n * @return {Map}\n */\nexport function operatedBlockStatistics(partitions) {\n  let /** Map */ operatedBlocks = new Map()\n  let /** OpType */ opType = new OpType()\n  for (let partition of partitions) {\n    for (let operation of partition.operations) {\n      let operationType = opType.mapType.getWithDefault(operation.type)\n      addNumberToMap(\n        operatedBlocks,\n        operationType,\n        numBlocks(operation.dstExtents))\n    }\n  }\n  return operatedBlocks\n}\n\nexport function mergeOperationStatistics(partitions, blockSize) {\n  let /** Map */ mergeOperations = new Map()\n  let /** MergeOpType */ opType = new MergeOpType()\n  let /** Number */ totalBlocks = 0\n  for (let partition of partitions) {\n    for (let operation of partition.mergeOperations) {\n      let operationType = opType.mapType.getWithDefault(operation.type)\n      addNumberToMap(\n        mergeOperations,\n        operationType,\n        operation.dstExtent.numBlocks)\n    }\n    // The total blocks number should be rounded up\n    totalBlocks += Math.ceil(partition.newPartitionInfo.size / blockSize)\n  }\n  // The COW merge operation is default to be COW_replace and not shown in\n  // the manifest info. We have to mannually add that part of operations,\n  // by subtracting the total blocks with other blocks.\n  mergeOperations.forEach((value, key) => totalBlocks -= value)\n  mergeOperations.set('COW_REPLACE', totalBlocks)\n  return mergeOperations\n}\n\n/**\n * Return a statistics over the disk usage of payload.bin, based on the type of\n * installation operations. Only partitions that are being passed in will be\n * included.\n * @param {Array<PartitionUpdate>} partitions\n * @return {Map}\n */\nexport function operatedPayloadStatistics(partitions) {\n  let /** Map */ operatedBlocks = new Map()\n  let /** OpType */ opType = new OpType()\n  for (let partition of partitions) {\n    for (let operation of partition.operations) {\n      let operationType = opType.mapType.getWithDefault(operation.type)\n      addNumberToMap(\n        operatedBlocks,\n        operationType,\n        operation.dataLength)\n    }\n  }\n  return operatedBlocks\n}\n\n/**\n * Return a statistics over the disk usage of each file types in a OTA package.\n * A target file has to be provided and address-filename maps will be built.\n * Only partitions that are being passed in will be included.\n * @param {Array<PartitionUpdate>} partitions\n * @param {Number} blockSize\n * @param {File} targetFile\n * @return {Map}\n */\nexport async function operatedExtensionStatistics(partitions, blockSize, targetFile) {\n  let /** Map */ operatedExtensions = new Map()\n  if (!targetFile) {\n    return operatedExtensions\n  }\n  let buildMap = new MapParser(targetFile)\n  await buildMap.init()\n  for (let partition of partitions) {\n    await buildMap.add(\n      partition.partitionName,\n      Math.ceil(partition.newPartitionInfo.size / blockSize))\n    for (let operation of partition.operations) {\n      if (!operation.hasOwnProperty('dataLength')) continue\n      let operatedFileNames = buildMap.query(\n        partition.partitionName,\n        operation.dstExtents)\n      let extentDataLength = distributeExtensions(\n        operatedFileNames,\n        operation.dstExtents,\n        operation.dataLength\n      )\n      extentDataLength.forEach((value, key) => {\n        addNumberToMap(\n          operatedExtensions,\n          key,\n          value\n        )\n      })\n    }\n  }\n  return operatedExtensions\n}\n\n/**\n * Analyse the given partitions using the given metrics.\n * @param {String} metrics\n * @param {Array<PartitionUpdate>} partitions\n * @return {EchartsData}\n */\nexport async function analysePartitions(metrics, partitions, blockSize = 4096, targetFile = null) {\n  let /** Map */statisticsData\n  let /** Echartsdata */ echartsData\n  switch (metrics) {\n  case 'blocks':\n    statisticsData = operatedBlockStatistics(partitions)\n    echartsData = new EchartsData(\n      statisticsData,\n      'Operated blocks in target build',\n      'blocks'\n    )\n    break\n  case 'payload':\n    statisticsData = operatedPayloadStatistics(partitions)\n    echartsData = new EchartsData(\n      statisticsData,\n      'Payload disk usage',\n      'bytes'\n    )\n    break\n  case 'COWmerge':\n    statisticsData = mergeOperationStatistics(partitions, blockSize)\n    echartsData = new EchartsData(\n      statisticsData,\n      'COW merge operations',\n      'blocks'\n    )\n    break\n  case 'extensions':\n    try {\n      statisticsData = await operatedExtensionStatistics(partitions, blockSize, targetFile)\n    }\n    catch (err) {\n      throw err\n    }\n    echartsData = new EchartsData(\n      statisticsData,\n      'Size of operated filename extensions',\n      'bytes'\n    )\n  }\n  if (echartsData) {\n    return echartsData\n  } else {\n    throw 'Please double check if this is a proper AB OTA package.'\n  }\n}\n\n/**\n * Calculate the number of blocks being operated\n * @param {Array<InstallOperations>} exts\n * @return {number}\n */\nexport function numBlocks(exts) {\n  const accumulator = (total, ext) => total + ext.numBlocks\n  return exts.reduce(accumulator, 0)\n}\n\n/**\n * Return a string that indicates the blocks being operated\n * in the manner of (start_block, block_length)\n * @param {Array<InstallOperations>} exts\n * @return {string}\n */\nexport function displayBlocks(exts) {\n  const accumulator = (total, ext) =>\n    total + '(' + ext.startBlock + ',' + ext.numBlocks + ')'\n  return exts.reduce(accumulator, '')\n}\n\n/**\n * Return a map with pairs of (file extension, data length used by this\n * extension). The total data length will be distributed by the blocks ratio\n * of each extent.\n * @param {Array<String>} filenames\n * @param {Array<InstallOperations>} exts\n * @param {Number} length\n * @return {Map}\n */\nexport function distributeExtensions(filenames, exts, length) {\n  let totalBlocks = numBlocks(exts)\n  let distributedLengths = new Map()\n  for (let i = 0; i < filenames.length; i++) {\n    addNumberToMap(\n      distributedLengths,\n      name2Extension(filenames[i]),\n      Math.round(length * exts[i].numBlocks / totalBlocks)\n    )\n  }\n  return distributedLengths\n}\n\n/**\n * convert a filename into extension, for example:\n * '//system/apex/com.android.adbd.apex' => 'apex'\n * @param {String} filename\n * @return {String}\n */\nexport function name2Extension(filename) {\n  let elements = filename.split('.')\n  if (elements.length>1) {\n    return elements[elements.length - 1]\n  } else if (elements[0]==='unknown') {\n    return 'unknown'\n  } else {\n    return 'no-extension'\n  }\n}","import { render } from \"./OperationDetail.vue?vue&type=template&id=567850ec&scoped=true\"\nimport script from \"./OperationDetail.vue?vue&type=script&lang=js\"\nexport * from \"./OperationDetail.vue?vue&type=script&lang=js\"\n\nimport \"./OperationDetail.vue?vue&type=style&index=0&id=567850ec&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-567850ec\"\n\nexport default script","import { render } from \"./PartitionDetail.vue?vue&type=template&id=0c9d3ada&scoped=true\"\nimport script from \"./PartitionDetail.vue?vue&type=script&lang=js\"\nexport * from \"./PartitionDetail.vue?vue&type=script&lang=js\"\n\nimport \"./PartitionDetail.vue?vue&type=style&index=0&id=0c9d3ada&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-0c9d3ada\"\n\nexport default script","<template>\n  <h3>Basic infos</h3>\n  <div\n    v-if=\"zipFile\"\n    v-bind=\"$attrs\"\n  >\n    <ul class=\"align\">\n      <li><strong> File name </strong> {{ zipFile.name }}</li>\n      <li><strong> File size </strong> {{ zipFile.size }} Bytes</li>\n      <li>\n        <strong> File last modified date </strong>\n        {{ zipFile.lastModifiedDate }}\n      </li>\n    </ul>\n  </div>\n  <div\n    v-if=\"payload && payload.metadata\"\n    v-bind=\"$attrs\"\n  >\n    <ul class=\"align\">\n      <li\n        v-for=\"formatter in MetadataFormat\"\n        :key=\"formatter.name\"\n      >\n        <strong> {{ formatter.name }} </strong>\n        <p class=\"wrap\">\n          {{ String(payload[formatter.key]) }}\n        </p>\n      </li>\n    </ul>\n  </div>\n  <div v-if=\"payload && payload.manifest\">\n    <ul class=\"align\">\n      <li>\n        <strong> Incremental </strong>\n        <!-- Check if the first partition is incremental or not -->\n        <span v-if=\"payload.preBuild\">\n          &#9989;\n        </span>\n        <span v-else> &#10060; </span>\n      </li>\n      <li>\n        <strong> Partial </strong>\n        <span v-if=\"payload.manifest.partialUpdate\"> &#9989; </span>\n        <span v-else> &#10060; </span>\n      </li>\n      <li>\n        <strong> A/B update </strong>\n        <span v-if=\"!payload.manifest.nonAB\">\n          &#9989;\n        </span>\n        <span v-else> &#10060; </span>\n      </li>\n      <li>\n        <strong> VAB </strong>\n        <span v-if=\"payload.manifest.dynamicPartitionMetadata.snapshotEnabled\">\n          &#9989;\n        </span>\n        <span v-else> &#10060; </span>\n      </li>\n      <li>\n        <strong> VABC </strong>\n        <span v-if=\"payload.manifest.dynamicPartitionMetadata.vabcEnabled\">\n          &#9989;\n        </span>\n        <span v-else> &#10060; </span>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport { Payload, MetadataFormat } from '@/services/payload.js'\n\nexport default {\n  props: {\n    zipFile: {\n      type: File,\n      required: true,\n    },\n    payload: {\n      type: Payload,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      MetadataFormat\n    }\n  }\n}\n</script>\n\n<style scoped>\n.align strong {\n  display: inline-block;\n  width: 50%;\n  position: relative;\n  padding-right: 10px; /* Ensures colon does not overlay the text */\n  text-align: right;\n}\n\n.align strong::after {\n  content: ':';\n}\n\nli {\n  list-style-type: none;\n}\n\n.wrap {\n  width: 50%;\n  display: inline-block;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  font-family: inherit;\n}\n</style>","import { render } from \"./BasicInfo.vue?vue&type=template&id=0e858ace&scoped=true\"\nimport script from \"./BasicInfo.vue?vue&type=script&lang=js\"\nexport * from \"./BasicInfo.vue?vue&type=script&lang=js\"\n\nimport \"./BasicInfo.vue?vue&type=style&index=0&id=0e858ace&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-0e858ace\"\n\nexport default script","import { render } from \"./PayloadDetail.vue?vue&type=template&id=d91280b0&scoped=true\"\nimport script from \"./PayloadDetail.vue?vue&type=script&lang=js\"\nexport * from \"./PayloadDetail.vue?vue&type=script&lang=js\"\n\nimport \"./PayloadDetail.vue?vue&type=style&index=0&id=d91280b0&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-d91280b0\"\n\nexport default script","<template>\n  <PartialCheckbox\n    v-model=\"partitionInclude\"\n    :labels=\"updatePartitions\"\n  />\n  <div v-if=\"echartsData\">\n    <PieChart :echartsData=\"echartsData\" />\n  </div>\n  <v-divider />\n  <v-row>\n    <v-col\n      cols=\"12\"\n      md=\"6\"\n    >\n      <v-btn\n        block\n        @click=\"updateChart('blocks')\"\n      >\n        Analyse Installed Blocks (in target build)\n      </v-btn>\n    </v-col>\n    <v-col\n      cols=\"12\"\n      md=\"6\"\n    >\n      <v-btn\n        block\n        @click=\"updateChart('payload')\"\n      >\n        Analyse Payload Composition\n      </v-btn>\n    </v-col>\n  </v-row>\n  <v-row>\n    <v-col\n      cols=\"12\"\n      md=\"6\"\n      class=\"tooltip\"\n    >\n      <v-btn\n        :disabled=\"manifest.nonAB\"\n        block\n        @click=\"updateChart('COWmerge')\"\n      >\n        Analyse COW Merge Operations\n      </v-btn>\n      <span\n        v-if=\"manifest.nonAB\"\n        class=\"tooltiptext\"\n      >\n        This function is only supported in A/B OTA\n      </span>\n    </v-col>\n    <v-col\n      cols=\"12\"\n      md=\"6\"\n    >\n      <v-btn\n        block\n        :disabled=\"!targetFile\"\n        @click=\"updateChart('extensions')\"\n      >\n        Analyse File Extensions\n      </v-btn>\n    </v-col>\n  </v-row>\n  <v-row>\n    <v-col\n      cols=\"12\"\n      md=\"6\"\n    />\n    <v-col\n      cols=\"12\"\n      md=\"6\"\n    >\n      <BaseFile\n        v-if=\"!demo\"\n        label=\"Drag and drop or Select The target Android build\"\n        @file-select=\"selectBuild\"\n      />\n    </v-col>\n  </v-row>\n</template>\n\n<script>\nimport axios from 'axios'\nimport PartialCheckbox from '@/components/PartialCheckbox.vue'\nimport PieChart from '@/components/PieChart.vue'\nimport BaseFile from '@/components/BaseFile.vue'\nimport { analysePartitions } from '../services/payload_composition.js'\nimport { chromeos_update_engine as update_metadata_pb } from '../services/update_metadata_pb.js'\n\nexport default {\n  components: {\n    PartialCheckbox,\n    PieChart,\n    BaseFile,\n  },\n  props: {\n    manifest: {\n      type: update_metadata_pb.DeltaArchiveManifest,\n      default: () => [],\n    },\n    demo: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      partitionInclude: new Map(),\n      echartsData: null,\n      listData: '',\n      targetFile: null,\n    }\n  },\n  computed: {\n    updatePartitions() {\n      return this.manifest.partitions.map((partition) => {\n        return partition.partitionName\n      })\n    },\n  },\n  async mounted() {\n    if (this.demo) {\n      try {\n        const download = await axios.get(\n          './files/cf_x86_target_file_demo.zip',\n          {responseType: 'blob'}\n        )\n        this.targetFile = new File([download.data], 'target_demo.zip')\n      } catch (err) {\n        console.log('Please put a proper example target file in /public/files/')\n      }\n    }\n  },\n  methods: {\n    async updateChart(metrics) {\n      let partitionSelected = this.manifest.partitions.filter((partition) =>\n        this.partitionInclude.get(partition.partitionName)\n      )\n      try {\n        this.echartsData = await analysePartitions(\n          metrics,\n          partitionSelected,\n          this.manifest.blockSize,\n          this.targetFile\n        )\n      } catch (err) {\n        alert('Cannot be processed for the following issue: ', err)\n      }\n    },\n    selectBuild(files) {\n      //TODO(lishutong) check the version of target file is same to the OTA target\n      this.targetFile = files[0]\n    },\n  },\n}\n</script>\n\n<style scoped>\n.list-data {\n  text-align: center;\n}\n.tooltip {\n  position: relative;\n  display: inline-block;\n}\n\n.tooltip .tooltiptext {\n  visibility: hidden;\n  width: 120px;\n  background-color: black;\n  color: #fff;\n  text-align: center;\n  border-radius: 6px;\n  padding: 5px 0;\n  position: absolute;\n  z-index: 1;\n}\n\n.tooltip:hover .tooltiptext {\n  visibility: visible;\n}\n</style>","<template>\n  <v-btn\n    block\n    type=\"button\"\n    class=\"my-5\"\n    @click=\"revertAllSelection\"\n  >\n    {{ selectAllText[selectAll] }}\n  </v-btn>\n  <v-row class=\"mb-5\">\n    <v-col\n      v-for=\"label in labels\"\n      :key=\"label\"\n      cols=\"12\"\n      md=\"4\"\n    >\n      <input\n        type=\"checkbox\"\n        :value=\"label\"\n        :checked=\"modelValue.get(label)\"\n        @change=\"updateSelected($event.target.value)\"\n      >\n      <label v-if=\"label\"> {{ label }} </label>\n    </v-col>\n  </v-row>\n</template>\n\n<script>\nexport default {\n  props: {\n    labels: {\n      type: Array,\n      default: new Array(),\n    },\n    modelValue: {\n      type: Map,\n      default: new Map(),\n    },\n  },\n  data() {\n    return {\n      selectAll: 1,\n      selectAllText: ['Select All', 'Unselect All'],\n    }\n  },\n  mounted() {\n    // Set the default value to be true once mounted\n    for (let key of this.labels) {\n      this.modelValue.set(key, true)\n    }\n  },\n  methods: {\n    updateSelected(newSelect) {\n      this.modelValue.set(newSelect, !this.modelValue.get(newSelect))\n      this.$emit('update:modelValue', this.modelValue)\n    },\n    revertAllSelection() {\n      this.selectAll = 1 - this.selectAll\n      for (let key of this.modelValue.keys()) {\n        this.modelValue.set(key, Boolean(this.selectAll))\n      }\n    },\n  },\n}\n</script>\n\n<style scoped>\nul > li {\n  display: inline-block;\n  list-style-type: none;\n  margin-left: 5%;\n  margin-right: 5%;\n  top: 0px;\n  height: 50px;\n}\n</style>","import { render } from \"./PartialCheckbox.vue?vue&type=template&id=2c8a15e8&scoped=true\"\nimport script from \"./PartialCheckbox.vue?vue&type=script&lang=js\"\nexport * from \"./PartialCheckbox.vue?vue&type=script&lang=js\"\n\nimport \"./PartialCheckbox.vue?vue&type=style&index=0&id=2c8a15e8&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-2c8a15e8\"\n\nexport default script","<template>\n  <v-chart\n    class=\"chart\"\n    :option=\"getEchartsOption\"\n  />\n</template>\n\n<script>\nimport { use } from 'echarts/core'\nimport { CanvasRenderer } from 'echarts/renderers'\nimport { PieChart } from 'echarts/charts'\nimport {\n  TitleComponent,\n  TooltipComponent,\n  LegendComponent,\n} from 'echarts/components'\nimport VChart, { THEME_KEY } from 'vue-echarts'\nimport { EchartsData } from '@/services/echarts_data.js'\n\nuse([\n  CanvasRenderer,\n  PieChart,\n  TitleComponent,\n  TooltipComponent,\n  LegendComponent,\n])\n\nexport default {\n  components: {\n    VChart,\n  },\n  provide: {\n    [THEME_KEY]: 'light',\n  },\n  props: {\n    echartsData: {\n      type: EchartsData,\n      required: true,\n    },\n  },\n  computed: {\n    getEchartsOption() {\n      return this.echartsData.getEchartsOption()\n    },\n  },\n}\n</script>\n\n<style scoped>\n.chart {\n  height: 400px;\n}\n</style>","import { render } from \"./PieChart.vue?vue&type=template&id=6d824429&scoped=true\"\nimport script from \"./PieChart.vue?vue&type=script&lang=js\"\nexport * from \"./PieChart.vue?vue&type=script&lang=js\"\n\nimport \"./PieChart.vue?vue&type=style&index=0&id=6d824429&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-6d824429\"\n\nexport default script","import { render } from \"./PayloadComposition.vue?vue&type=template&id=3683ab2c&scoped=true\"\nimport script from \"./PayloadComposition.vue?vue&type=script&lang=js\"\nexport * from \"./PayloadComposition.vue?vue&type=script&lang=js\"\n\nimport \"./PayloadComposition.vue?vue&type=style&index=0&id=3683ab2c&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-3683ab2c\"\n\nexport default script","import { render } from \"./PackageAnalysis.vue?vue&type=template&id=2c7b1b71\"\nimport script from \"./PackageAnalysis.vue?vue&type=script&lang=js\"\nexport * from \"./PackageAnalysis.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","<template>\n  <v-row>\n    <v-col\n      cols=\"12\"\n      md=\"6\"\n    >\n      <PayloadDetail\n        v-if=\"zipFile && payload\"\n        :zipFile=\"zipFile\"\n        :payload=\"payload\"\n      />\n    </v-col>\n    <v-divider\n      vertical\n    />\n    <v-col\n      cols=\"12\"\n      md=\"6\"\n    >\n      <PayloadComposition\n        v-if=\"zipFile && payload.manifest\"\n        :manifest=\"payload.manifest\"\n        :demo=\"true\"\n      />\n    </v-col>\n  </v-row>\n</template>\n\n<script>\nimport axios from 'axios'\nimport PayloadDetail from '@/components/PayloadDetail.vue'\nimport PayloadComposition from '@/components/PayloadComposition.vue'\nimport { Payload } from '@/services/payload.js'\n\nexport default {\n  components: {\n    PayloadDetail,\n    PayloadComposition,\n  },\n  data() {\n    return {\n      zipFile: null,\n      payload: null,\n    }\n  },\n  async created() {\n    // put cf_x86_demo.zip and cf_x86_target_file_demo into\n    // this directory: /public/files\n    try {\n      const download = await axios.get(\n        './files/cf_x86_demo.zip',\n        {responseType: 'blob'}\n      )\n      this.zipFile = new File([download.data], 'ota_demo.zip')\n      this.payload = new Payload(this.zipFile)\n      await this.payload.init()\n    } catch (err) {\n      console.log('Please put a proper example OTA in /public/files/')\n    }\n  },\n  methods: {\n    async unpackOTA(files) {\n      this.zipFile = files[0]\n      try {\n        this.payload = new Payload(this.zipFile)\n        await this.payload.init()\n      } catch (err) {\n        alert('Please check if this is a correct OTA package (.zip).')\n        console.log(err)\n      }\n    },\n  },\n}\n</script>\n","import { render } from \"./Demo.vue?vue&type=template&id=2b9cdb7b\"\nimport script from \"./Demo.vue?vue&type=script&lang=js\"\nexport * from \"./Demo.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","<template>\n  <div class=\"about\">\n    <p>A GUI for the Android OTA generating.</p>\n  </div>\n</template>\n","import { render } from \"./About.vue?vue&type=template&id=3fc5473b\"\nconst script = {}\nscript.render = render\n\nexport default script","<template>\n  <center>\n    <h1>Not Found!</h1>\n    <p>\n      <a href=\"/\">Go home?</a>\n    </p>\n  </center>\n</template>\n\n<style scoped>\n\n  center {\n    margin: 15vw;\n  }\n\n  h1 {\n    color: var(--border);\n    font-size: 2em;\n  }\n\n</style>","import { render } from \"./NotFound.vue?vue&type=template&id=1eaf2b4c&scoped=true\"\nconst script = {}\n\nimport \"./NotFound.vue?vue&type=style&index=0&id=1eaf2b4c&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-1eaf2b4c\"\n\nexport default script","import { createRouter, createWebHistory } from 'vue-router'\nimport PackageAnalysis from '@/views/PackageAnalysis.vue'\nimport Demo from'@/views/Demo.vue'\nimport About from '@/views/About.vue'\nimport NotFound from '@/views/NotFound.vue'\n\nconst routes = [\n  {\n    path: '/',\n    name: 'Analysis',\n    component: PackageAnalysis,\n    meta: {\n      title: 'Analyse OTA package - from AOSP'\n    }\n  },\n  {\n    path: '/demo',\n    name: 'Demo',\n    component: Demo\n  },\n  {\n    path: '/about',\n    name: 'About',\n    component: About\n  },\n  {\n    path: '/:catchAll(.*)',\n    name: 'Not Found',\n    component: NotFound\n  }\n]\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n})\n\n// This callback runs before every route change, including on page load.\nrouter.beforeEach((to, from, next) => {\n  // This goes through the matched routes from last to first, finding the closest route with a title.\n  // e.g., if we have `/some/deep/nested/route` and `/some`, `/deep`, and `/nested` have titles,\n  // `/nested`'s will be chosen.\n  const nearestWithTitle = to.matched.slice().reverse().find(r => r.meta && r.meta.title);\n\n  // Find the nearest route element with meta tags.\n  const nearestWithMeta = to.matched.slice().reverse().find(r => r.meta && r.meta.metaTags);\n\n  const previousNearestWithMeta = from.matched.slice().reverse().find(r => r.meta && r.meta.metaTags);\n\n  // If a route with a title was found, set the document (page) title to that value.\n  if(nearestWithTitle) {\n    document.title = nearestWithTitle.meta.title;\n  } else if(previousNearestWithMeta) {\n    document.title = previousNearestWithMeta.meta.title;\n  }\n\n  // Remove any stale meta tags from the document using the key attribute we set below.\n  Array.from(document.querySelectorAll('[data-vue-router-controlled]')).map(el => el.parentNode.removeChild(el));\n\n  // Skip rendering meta tags if there are none.\n  if(!nearestWithMeta) return next();\n\n  // Turn the meta tag definitions into actual elements in the head.\n  nearestWithMeta.meta.metaTags.map(tagDef => {\n    const tag = document.createElement('meta');\n\n    Object.keys(tagDef).forEach(key => {\n      tag.setAttribute(key, tagDef[key]);\n    });\n\n    // We use this to track which meta tags we create so we don't interfere with other ones.\n    tag.setAttribute('data-vue-router-controlled', '');\n\n    return tag;\n  })\n  // Add the meta tags to the document head.\n    .forEach(tag => document.head.appendChild(tag));\n\n  next();\n});\n\nexport default router\n","import { createStore } from 'vuex'\n\nexport default createStore({\n  state: {},\n  mutations: {},\n  actions: {},\n  modules: {}\n})\n","import { createApp } from 'vue'\nimport vuetify from './plugins/vuetify'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\nconst app = createApp(App)\napp.use(router)\napp.use(store)\napp.use(vuetify)\n\napp.mount('#app')","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./BaseFile.vue?vue&type=style&index=0&id=6b3bd7f8&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./PartialCheckbox.vue?vue&type=style&index=0&id=2c8a15e8&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./PayloadDetail.vue?vue&type=style&index=0&id=d91280b0&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./OperationDetail.vue?vue&type=style&index=0&id=567850ec&scoped=true&lang=css\"","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../node_modules/vue-loader-v16/dist/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./App.vue?vue&type=style&index=0&id=720154ec&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./PartitionDetail.vue?vue&type=style&index=0&id=0c9d3ada&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./PayloadComposition.vue?vue&type=style&index=0&id=3683ab2c&scoped=true&lang=css\""],"sourceRoot":""}