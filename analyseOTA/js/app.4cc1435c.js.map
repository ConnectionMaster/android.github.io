{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/PieChart.vue?f5d6","webpack:///./src/components/PartitionDetail.vue?a788","webpack:///./src/components/OperationDetail.vue?9d8a","webpack:///./src/plugins/vuetify.js","webpack:///./src/App.vue","webpack:///./src/App.vue?dfb6","webpack:///./src/views/PackageAnalysis.vue","webpack:///./src/components/BaseFile.vue","webpack:///./src/components/BaseFile.vue?0a43","webpack:///./src/components/PayloadDetail.vue","webpack:///./src/components/PartitionDetail.vue","webpack:///./src/services/update_metadata_pb.js","webpack:///./src/services/payload.js","webpack:///./src/components/OperationDetail.vue","webpack:///./src/services/echarts_data.js","webpack:///./src/services/map_parser.js","webpack:///./src/services/payload_composition.js","webpack:///./src/components/OperationDetail.vue?78ae","webpack:///./src/components/PartitionDetail.vue?39ae","webpack:///./src/components/BasicInfo.vue","webpack:///./src/components/BasicInfo.vue?4aaa","webpack:///./src/components/PayloadDetail.vue?5065","webpack:///./src/components/PayloadComposition.vue","webpack:///./src/components/PartialCheckbox.vue","webpack:///./src/components/PartialCheckbox.vue?7829","webpack:///./src/components/PieChart.vue","webpack:///./src/components/PieChart.vue?c4e9","webpack:///./src/components/PayloadComposition.vue?c966","webpack:///./src/views/PackageAnalysis.vue?c891","webpack:///./src/views/About.vue","webpack:///./src/views/About.vue?008a","webpack:///./src/router/index.js","webpack:///./src/store/index.js","webpack:///./src/main.js","webpack:///./src/components/BaseFile.vue?8287","webpack:///./src/components/PayloadDetail.vue?023b","webpack:///./src/App.vue?7032","webpack:///./src/components/BasicInfo.vue?cb66","webpack:///./src/components/PartialCheckbox.vue?6fe9","webpack:///./src/components/PayloadComposition.vue?461a"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","createVuetify","components","directives","rounded","color","links","link","to","class","fluid","render","cols","md","label","unpackOTA","zipFile","payload","vertical","manifest","dragover","dragleave","drop","fileName","ref","type","accept","handleFileChange","props","String","default","methods","event","this","$emit","$refs","file","files","preventDefault","currentTarget","classList","contains","add","remove","dataTransfer","__scopeId","style","partitions","partition","partitionName","elevation","hover","shaped","estimateCowSize","metadata_signature","octToHex","signatures","toggle","operations","showOPs","operation","dataSha256Hash","mapType","opType","$Reader","$protobuf","$Writer","$util","$root","chromeos_update_engine","Extent","properties","keys","startBlock","Long","fromBits","numBlocks","encode","message","writer","uint32","uint64","encodeDelimited","ldelim","decode","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","isInteger","low","high","fromObject","fromValue","unsigned","parseInt","LongBits","toNumber","toObject","options","defaults","long","longs","toString","Number","toJSON","constructor","toJSONOptions","Signatures","emptyArray","Signature","fork","Array","isArray","error","TypeError","arrays","version","newBuffer","unpaddedSignatureSize","bytes","fixed32","isString","base64","PartitionInfo","size","hash","ImageInfo","board","channel","buildChannel","buildVersion","string","InstallOperation","srcExtents","dstExtents","xorMap","dataOffset","dataLength","srcLength","dstLength","srcSha256Hash","emptyObject","int32","end2","tag2","ProtocolError","instance","isObject","key32Re","test","keys2","objects","enums","Type","valuesById","values","CowMergeOperation","srcExtent","dstExtent","srcOffset","PartitionUpdate","newPartitionSignature","mergeOperations","runPostinstall","postinstallPath","filesystemType","oldPartitionInfo","newPartitionInfo","postinstallOptional","hashTreeDataExtent","hashTreeExtent","hashTreeAlgorithm","hashTreeSalt","fecDataExtent","fecExtent","fecRoots","bool","Boolean","DynamicPartitionGroup","partitionNames","DynamicPartitionMetadata","groups","snapshotEnabled","vabcEnabled","vabcCompressionParam","cowVersion","ApexInfo","packageName","isCompressed","decompressedSize","int64","ApexMetadata","apexInfo","DeltaArchiveManifest","installOperations","kernelInstallOperations","blockSize","signaturesOffset","signaturesSize","oldKernelInfo","newKernelInfo","oldRootfsInfo","newRootfsInfo","oldImageInfo","newImageInfo","minorVersion","maxTimestamp","dynamicPartitionMetadata","partialUpdate","_MAGIC","_VERSION_SIZE","_MANIFEST_LEN_SIZE","_METADATA_SIGNATURE_LEN_SIZE","_BRILLO_MAJOR_PAYLOAD_VERSION","Payload","packedFile","zip","cursor","getEntries","entries","entry","filename","getData","alert","arrayBuffer","buffer","view","DataView","getUInt16","getUint32","getBigUint64","decoder","TextDecoder","magic","header_version","readInt","manifest_len","metadata_signature_len","err","console","log","manifest_raw","Uint8Array","update_metadata_pb","signature_raw","unzipPayload","readHeader","readManifest","readSignature","OpType","types","Map","set","MergeOpType","srcTotalBlocks","srcBlocks","dstTotalBlocks","dstBlocks","EchartsData","statisticData","title","unit","maximumEntries","table","trimMap","option","text","left","tooltip","trigger","formatter","legend","orient","top","from","series","radius","center","map","pair","emphasis","itemStyle","shadowBlur","shadowOffsetX","shadowColor","new_map","curr","currKey","restTotal","MapParser","targetFile","build","mapFiles","maps","regexPath","regexName","forEach","match","totalLength","regexNumber","regexRange","mapText","fileEntries","split","elements","right","InsertMap","extents","names","ext","queryMap","addNumberToMap","operatedBlockStatistics","operatedBlocks","operationType","mergeOperationStatistics","totalBlocks","Math","ceil","operatedPayloadStatistics","operatedExtensionStatistics","operatedExtensions","buildMap","init","operatedFileNames","query","extentDataLength","distributeExtensions","analysePartitions","metrics","statisticsData","echartsData","exts","accumulator","total","reduce","displayBlocks","filenames","distributedLengths","name2Extension","round","required","mounted","OperationDetail","created","lastModifiedDate","File","PartitionDetail","BasicInfo","bufferArray","hex_table","partitionInclude","labels","updatePartitions","block","updateChart","disabled","selectBuild","revertAllSelection","selectAllText","selectAll","checked","modelValue","updateSelected","$event","target","newSelect","getEchartsOption","VChart","provide","computed","PartialCheckbox","PieChart","BaseFile","listData","partitionSelected","filter","PayloadDetail","PayloadComposition","script","routes","path","component","PackageAnalysis","meta","About","router","createRouter","history","createWebHistory","process","beforeEach","next","nearestWithTitle","matched","reverse","find","nearestWithMeta","metaTags","previousNearestWithMeta","document","querySelectorAll","el","parentNode","removeChild","tagDef","createElement","setAttribute","head","appendChild","createStore","state","mutations","actions","app","createApp","App","use","store","vuetify","mount"],"mappings":"aACE,SAASA,EAAqBC,GAQ7B,IAPA,IAMIC,EAAUC,EANVC,EAAWH,EAAK,GAChBI,EAAcJ,EAAK,GACnBK,EAAiBL,EAAK,GAIHM,EAAI,EAAGC,EAAW,GACpCD,EAAIH,EAASK,OAAQF,IACzBJ,EAAUC,EAASG,GAChBG,OAAOC,UAAUC,eAAeC,KAAKC,EAAiBX,IAAYW,EAAgBX,IACpFK,EAASO,KAAKD,EAAgBX,GAAS,IAExCW,EAAgBX,GAAW,EAE5B,IAAID,KAAYG,EACZK,OAAOC,UAAUC,eAAeC,KAAKR,EAAaH,KACpDc,EAAQd,GAAYG,EAAYH,IAG/Be,GAAqBA,EAAoBhB,GAE5C,MAAMO,EAASC,OACdD,EAASU,OAATV,GAOD,OAHAW,EAAgBJ,KAAKK,MAAMD,EAAiBb,GAAkB,IAGvDe,IAER,SAASA,IAER,IADA,IAAIC,EACIf,EAAI,EAAGA,EAAIY,EAAgBV,OAAQF,IAAK,CAG/C,IAFA,IAAIgB,EAAiBJ,EAAgBZ,GACjCiB,GAAY,EACRC,EAAI,EAAGA,EAAIF,EAAed,OAAQgB,IAAK,CAC9C,IAAIC,EAAQH,EAAeE,GACG,IAA3BX,EAAgBY,KAAcF,GAAY,GAE3CA,IACFL,EAAgBQ,OAAOpB,IAAK,GAC5Be,EAASM,EAAoBA,EAAoBC,EAAIN,EAAe,KAItE,OAAOD,EAIR,IAAIQ,EAAmB,GAKnBhB,EAAkB,CACrB,IAAO,GAGJK,EAAkB,GAGtB,SAASS,EAAoB1B,GAG5B,GAAG4B,EAAiB5B,GACnB,OAAO4B,EAAiB5B,GAAU6B,QAGnC,IAAIC,EAASF,EAAiB5B,GAAY,CACzCK,EAAGL,EACH+B,GAAG,EACHF,QAAS,IAUV,OANAf,EAAQd,GAAUW,KAAKmB,EAAOD,QAASC,EAAQA,EAAOD,QAASH,GAG/DI,EAAOC,GAAI,EAGJD,EAAOD,QAKfH,EAAoBM,EAAIlB,EAGxBY,EAAoBO,EAAIL,EAGxBF,EAAoBQ,EAAI,SAASL,EAASM,EAAMC,GAC3CV,EAAoBW,EAAER,EAASM,IAClC3B,OAAO8B,eAAeT,EAASM,EAAM,CAAEI,YAAY,EAAMC,IAAKJ,KAKhEV,EAAoBe,EAAI,SAASZ,GACX,qBAAXa,QAA0BA,OAAOC,aAC1CnC,OAAO8B,eAAeT,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DpC,OAAO8B,eAAeT,EAAS,aAAc,CAAEe,OAAO,KAQvDlB,EAAoBmB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQlB,EAAoBkB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,kBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKxC,OAAOyC,OAAO,MAGvB,GAFAvB,EAAoBe,EAAEO,GACtBxC,OAAO8B,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOlB,EAAoBQ,EAAEc,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRtB,EAAoB0B,EAAI,SAAStB,GAChC,IAAIM,EAASN,GAAUA,EAAOiB,WAC7B,WAAwB,OAAOjB,EAAO,YACtC,WAA8B,OAAOA,GAEtC,OADAJ,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASgB,EAAQC,GAAY,OAAO9C,OAAOC,UAAUC,eAAeC,KAAK0C,EAAQC,IAGzG5B,EAAoB6B,EAAI,eAExB,IAAIC,EAAaC,OAAO,gBAAkBA,OAAO,iBAAmB,GAChEC,EAAmBF,EAAW3C,KAAKsC,KAAKK,GAC5CA,EAAW3C,KAAOf,EAClB0D,EAAaA,EAAWG,QACxB,IAAI,IAAItD,EAAI,EAAGA,EAAImD,EAAWjD,OAAQF,IAAKP,EAAqB0D,EAAWnD,IAC3E,IAAIU,EAAsB2C,EAI1BzC,EAAgBJ,KAAK,CAAC,EAAE,kBAEjBM,K,6ECvJT,W,kCCAA,W,kCCAA,W,6JCMeyC,iBAAc,CAC3BC,aACAC,e,iBCFqB,kB,kSALrB,eAsBQ,Q,wBArBN,iBAeY,CAfZ,eAeY,GAdVC,QAAA,GACAC,MAAM,W,yBAEN,iBAAiD,CAAjD,eAAiD,Q,wBAAhC,iBAAc,C,YAC/B,eAAY,I,mBACZ,eAQQ,2BAPS,EAAAC,OAAK,SAAbC,G,wBADT,eAQQ,GANLhB,IAAG,UAAKgB,EAAL,gBACHC,GAAE,MAAUD,GACbE,MAAM,OACNJ,MAAM,W,yBAEN,iBAAU,C,8BAAPE,GAAI,O,qCAGX,eAIS,Q,wBAHP,iBAEc,CAFd,eAEc,GAFDG,MAAA,IAAK,C,wBAChB,iBAAe,CAAf,eAAe,O,0BAOR,OACbtE,KADa,WAEX,MAAO,CACLkE,MAAO,CAAC,WAAY,Y,UCzB1B,EAAOK,OAASA,EAED,Q,gUCNb,eA2BQ,Q,wBA1BN,iBAaQ,CAbR,eAaQ,GAZNC,KAAK,KACLC,GAAG,K,yBAEH,iBAGE,CAHF,eAGE,GAFAC,MAAM,oDACL,aAAa,EAAAC,W,yBAGR,EAAAC,SAAW,EAAAC,S,iBADnB,eAIE,G,MAFCD,QAAS,EAAAA,QACTC,QAAS,EAAAA,S,+DAGd,eAEE,GADAC,SAAA,KAEF,eAQQ,GAPNN,KAAK,KACLC,GAAG,K,yBAEH,iBAGE,CAFM,EAAAG,SAAW,EAAAC,QAAQE,U,iBAD3B,eAGE,G,MADCA,SAAU,EAAAF,QAAQE,U,yKCxBlBV,MAAM,oB,sGAAb,eAiBQ,QAjBR,EAiBQ,CAhBN,eASM,OARJA,MAAM,gBACL,WAAQ,8BAAE,EAAAW,UAAA,EAAAA,SAAA,qBACV,YAAS,8BAAE,EAAAC,WAAA,EAAAA,UAAA,qBACX,OAAI,8BAAE,EAAAC,MAAA,EAAAA,KAAA,sB,CAEK,EAAAR,O,iBAAZ,eAAsD,wBAA/B,EAAAS,SAAgB,GAAL,EAAAT,OAAK,K,iBACvC,eAA+B,SAAlB,gBACF,EAAAS,U,iBAAX,eAAyD,QAApC,mBAAgB,eAAG,EAAAA,UAAQ,I,2BAElD,eAKC,SAJCC,IAAI,OACJC,KAAK,OACLC,OAAO,OACN,SAAM,8BAAE,EAAAC,kBAAA,EAAAA,iBAAA,sB,eAMA,G,UAAA,CACbC,MAAO,CACLd,MAAO,CACLW,KAAMI,OACNC,QAAS,KAGb1F,KAPa,WAQX,MAAO,CACLmF,SAAU,KAGdQ,QAAS,CACPJ,iBADO,SACUK,GACfC,KAAKC,MAAM,cAAeD,KAAKE,MAAMC,KAAKC,OAC1CJ,KAAKV,SAAWU,KAAKE,MAAMC,KAAKC,MAAM,GAAG7D,MAE3C4C,SALO,SAKEY,GACPA,EAAMM,iBACDN,EAAMO,cAAcC,UAAUC,SAAS,eAC1CT,EAAMO,cAAcC,UAAUE,IAAI,eAGtCrB,UAXO,SAWGW,GACRA,EAAMO,cAAcC,UAAUG,OAAO,eAEvCrB,KAdO,SAcFU,GACHA,EAAMM,iBACNL,KAAKE,MAAMC,KAAKC,MAAQL,EAAMY,aAAaP,MAC3CJ,KAAKN,iBAAiBK,GACtBA,EAAMO,cAAcC,UAAUG,OAAO,kB,UC/C3C,EAAOhC,OAAS,EAChB,EAAOkC,UAAY,kBAEJ,Q,sFCAX,eAAuB,UAAnB,kBAAc,G,YAmBV,eAAqC,cAA7B,wBAAoB,G,YAG5B,eAAqC,cAA7B,wBAAoB,G,iBAAS,a,EAO7C,eAA2B,UAAvB,sBAAkB,G,SAGpBpC,MAAM,a,GAEAqC,MAAA,4B,uRAzCV,eAIE,GAHC9B,QAAS,EAAAA,QACTC,QAAS,EAAAA,QACVR,MAAM,Q,8BAER,eAAa,GACF,EAAAQ,S,iBAAX,eAuCM,SAtCJ,EAEQ,EAAAA,QAAQE,U,iBADhB,eA0BQ,G,MAxBNV,MAAM,Q,YAGJ,iBAAgD,E,mBADlD,eAqBQ,2BApBc,EAAAQ,QAAQE,SAAS4B,YAAU,SAAxCC,G,wBADT,eAqBQ,GAnBLzD,IAAKyD,EAAUC,cAChBrC,KAAK,KACLC,GAAG,K,YAEH,iBAcS,CAdT,eAcS,GAbPqC,UAAU,IACVC,MAAA,GACAC,OAAA,GACA3C,MAAM,gB,YAEN,iBAAwC,CAAxC,eAAwC,yBAAhCuC,EAAUC,eAAa,GACtBD,EAAUK,iB,iBAAnB,eAEI,OADF,E,eAAqC,IAAC,eAAGL,EAAUK,iBAAkB,UACvE,O,iBACA,eAEI,OADF,E,KAEF,eAA0C,GAAxBL,UAAWA,GAAS,0B,oEAI5C,eAAa,GACb,EAEQ,EAAA/B,QAAQqC,oB,iBADhB,eAOM,MAPN,EAOM,CAHJ,eAEO,OAFP,EAEO,eADF,EAAAC,SAAS,EAAAtC,QAAQqC,mBAAmBE,WAAU,GAAIpH,OAAI,M,iRC1C/D,eAkBI,KAjBFqE,MAAM,SACL,QAAK,+BAAE,EAAAgD,Y,gBACT,sBACmB,eAAG,EAAAT,UAAUU,WAAW9G,QAAS,IACnD,GACQ,EAAA+G,S,iBADR,eAYK,S,mBATH,eAQK,2BAPiB,EAAAX,UAAUU,YAAU,SAAjCE,G,wBADT,eAQK,MANFrE,IAAKqE,EAAUC,gB,CAEhB,eAGE,GAFCD,UAAWA,EACXE,QAAS,EAAAC,OAAOD,S,6aCXrBE,EAAUC,YAAkBC,EAAUD,YAAkBE,EAAQF,UAGhEG,EAAQH,WAAgB,aAAeA,WAAgB,WAAa,IAE7DI,EAAyBD,EAAMC,uBAA0B,WAOlE,IAAMA,EAAyB,GA6gJ/B,OA3gJAA,EAAuBC,OAAU,WAkB7B,SAASA,EAAOC,GACZ,GAAIA,EACA,IAAK,IAAIC,EAAO3H,OAAO2H,KAAKD,GAAa7H,EAAI,EAAGA,EAAI8H,EAAK5H,SAAUF,EACpC,MAAvB6H,EAAWC,EAAK9H,MAChBuF,KAAKuC,EAAK9H,IAAM6H,EAAWC,EAAK9H,KAqNhD,OA5MA4H,EAAOxH,UAAU2H,WAAaN,EAAMO,KAAOP,EAAMO,KAAKC,SAAS,EAAE,GAAE,GAAQ,EAQ3EL,EAAOxH,UAAU8H,UAAYT,EAAMO,KAAOP,EAAMO,KAAKC,SAAS,EAAE,GAAE,GAAQ,EAU1EL,EAAOhF,OAAS,SAAgBiF,GAC5B,OAAO,IAAID,EAAOC,IAYtBD,EAAOO,OAAS,SAAgBC,EAASC,GAOrC,OANKA,IACDA,EAASb,EAAQ5E,UACK,MAAtBwF,EAAQL,YAAsB5H,OAAOE,eAAeC,KAAK8H,EAAS,eAClEC,EAAOC,OAA8B,GAAGC,OAAOH,EAAQL,YAClC,MAArBK,EAAQF,WAAqB/H,OAAOE,eAAeC,KAAK8H,EAAS,cACjEC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQF,WACrDG,GAYXT,EAAOY,gBAAkB,SAAyBJ,EAASC,GACvD,OAAO9C,KAAK4C,OAAOC,EAASC,GAAQI,UAcxCb,EAAOc,OAAS,SAAgBC,EAAQzI,GAC9ByI,aAAkBrB,IACpBqB,EAASrB,EAAQ1E,OAAO+F,IAC5B,IAAIC,OAAiBC,IAAX3I,EAAuByI,EAAOG,IAAMH,EAAOI,IAAM7I,EAAQkI,EAAU,IAAIV,EAAMC,uBAAuBC,OAC9G,MAAOe,EAAOI,IAAMH,EAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDZ,EAAQL,WAAaY,EAAOJ,SAC5B,MACJ,KAAK,EACDH,EAAQF,UAAYS,EAAOJ,SAC3B,MACJ,QACII,EAAOM,SAAe,EAAND,GAChB,OAGR,OAAOZ,GAaXR,EAAOsB,gBAAkB,SAAyBP,GAG9C,OAFMA,aAAkBrB,IACpBqB,EAAS,IAAIrB,EAAQqB,IAClBpD,KAAKmD,OAAOC,EAAQA,EAAOL,WAWtCV,EAAOuB,OAAS,SAAgBf,GAC5B,MAAuB,WAAnB,eAAOA,IAAoC,OAAZA,EACxB,kBACe,MAAtBA,EAAQL,aAAsBK,EAAQ/H,eAAe,eAChDoH,EAAM2B,UAAUhB,EAAQL,aAAiBK,EAAQL,YAAcN,EAAM2B,UAAUhB,EAAQL,WAAWsB,MAAQ5B,EAAM2B,UAAUhB,EAAQL,WAAWuB,MAE7H,MAArBlB,EAAQF,YAAqBE,EAAQ/H,eAAe,cAC/CoH,EAAM2B,UAAUhB,EAAQF,YAAgBE,EAAQF,WAAaT,EAAM2B,UAAUhB,EAAQF,UAAUmB,MAAQ5B,EAAM2B,UAAUhB,EAAQF,UAAUoB,MAE3I,KADQ,mCAHA,qCAenB1B,EAAO2B,WAAa,SAAoBvG,GACpC,GAAIA,aAAkB0E,EAAMC,uBAAuBC,OAC/C,OAAO5E,EACX,IAAIoF,EAAU,IAAIV,EAAMC,uBAAuBC,OAmB/C,OAlByB,MAArB5E,EAAO+E,aACHN,EAAMO,MACLI,EAAQL,WAAaN,EAAMO,KAAKwB,UAAUxG,EAAO+E,aAAa0B,UAAW,EACxC,kBAAtBzG,EAAO+E,WACnBK,EAAQL,WAAa2B,SAAS1G,EAAO+E,WAAY,IACf,kBAAtB/E,EAAO+E,WACnBK,EAAQL,WAAa/E,EAAO+E,WACM,WAA7B,eAAO/E,EAAO+E,cACnBK,EAAQL,WAAa,IAAIN,EAAMkC,SAAS3G,EAAO+E,WAAWsB,MAAQ,EAAGrG,EAAO+E,WAAWuB,OAAS,GAAGM,UAAS,KAC5F,MAApB5G,EAAOkF,YACHT,EAAMO,MACLI,EAAQF,UAAYT,EAAMO,KAAKwB,UAAUxG,EAAOkF,YAAYuB,UAAW,EACvC,kBAArBzG,EAAOkF,UACnBE,EAAQF,UAAYwB,SAAS1G,EAAOkF,UAAW,IACd,kBAArBlF,EAAOkF,UACnBE,EAAQF,UAAYlF,EAAOkF,UACM,WAA5B,eAAOlF,EAAOkF,aACnBE,EAAQF,UAAY,IAAIT,EAAMkC,SAAS3G,EAAOkF,UAAUmB,MAAQ,EAAGrG,EAAOkF,UAAUoB,OAAS,GAAGM,UAAS,KAC1GxB,GAYXR,EAAOiC,SAAW,SAAkBzB,EAAS0B,GACpCA,IACDA,EAAU,IACd,IAAI9G,EAAS,GACb,GAAI8G,EAAQC,SAAU,CAClB,GAAItC,EAAMO,KAAM,CACZ,IAAIgC,EAAO,IAAIvC,EAAMO,KAAK,EAAG,GAAG,GAChChF,EAAO+E,WAAa+B,EAAQG,QAAU9E,OAAS6E,EAAKE,WAAaJ,EAAQG,QAAUE,OAASH,EAAKJ,WAAaI,OAE9GhH,EAAO+E,WAAa+B,EAAQG,QAAU9E,OAAS,IAAM,EACzD,GAAIsC,EAAMO,KAAM,CACZ,IAAIgC,EAAO,IAAIvC,EAAMO,KAAK,EAAG,GAAG,GAChChF,EAAOkF,UAAY4B,EAAQG,QAAU9E,OAAS6E,EAAKE,WAAaJ,EAAQG,QAAUE,OAASH,EAAKJ,WAAaI,OAE7GhH,EAAOkF,UAAY4B,EAAQG,QAAU9E,OAAS,IAAM,EAY5D,OAV0B,MAAtBiD,EAAQL,YAAsBK,EAAQ/H,eAAe,gBACnB,kBAAvB+H,EAAQL,WACf/E,EAAO+E,WAAa+B,EAAQG,QAAU9E,OAASA,OAAOiD,EAAQL,YAAcK,EAAQL,WAEpF/E,EAAO+E,WAAa+B,EAAQG,QAAU9E,OAASsC,EAAMO,KAAK5H,UAAU8J,SAAS5J,KAAK8H,EAAQL,YAAc+B,EAAQG,QAAUE,OAAS,IAAI1C,EAAMkC,SAASvB,EAAQL,WAAWsB,MAAQ,EAAGjB,EAAQL,WAAWuB,OAAS,GAAGM,UAAS,GAAQxB,EAAQL,YAC3N,MAArBK,EAAQF,WAAqBE,EAAQ/H,eAAe,eACnB,kBAAtB+H,EAAQF,UACflF,EAAOkF,UAAY4B,EAAQG,QAAU9E,OAASA,OAAOiD,EAAQF,WAAaE,EAAQF,UAElFlF,EAAOkF,UAAY4B,EAAQG,QAAU9E,OAASsC,EAAMO,KAAK5H,UAAU8J,SAAS5J,KAAK8H,EAAQF,WAAa4B,EAAQG,QAAUE,OAAS,IAAI1C,EAAMkC,SAASvB,EAAQF,UAAUmB,MAAQ,EAAGjB,EAAQF,UAAUoB,OAAS,GAAGM,UAAS,GAAQxB,EAAQF,WACzOlF,GAUX4E,EAAOxH,UAAUgK,OAAS,WACtB,OAAO7E,KAAK8E,YAAYR,SAAStE,KAAMgC,UAAe+C,gBAGnD1C,EA3OsB,GA8OjCD,EAAuB4C,WAAc,WAiBjC,SAASA,EAAW1C,GAEhB,GADAtC,KAAKuB,WAAa,GACde,EACA,IAAK,IAAIC,EAAO3H,OAAO2H,KAAKD,GAAa7H,EAAI,EAAGA,EAAI8H,EAAK5H,SAAUF,EACpC,MAAvB6H,EAAWC,EAAK9H,MAChBuF,KAAKuC,EAAK9H,IAAM6H,EAAWC,EAAK9H,KAwahD,OA/ZAuK,EAAWnK,UAAU0G,WAAaW,EAAM+C,WAUxCD,EAAW3H,OAAS,SAAgBiF,GAChC,OAAO,IAAI0C,EAAW1C,IAY1B0C,EAAWpC,OAAS,SAAgBC,EAASC,GAGzC,GAFKA,IACDA,EAASb,EAAQ5E,UACK,MAAtBwF,EAAQtB,YAAsBsB,EAAQtB,WAAW5G,OACjD,IAAK,IAAIF,EAAI,EAAGA,EAAIoI,EAAQtB,WAAW5G,SAAUF,EAC7C0H,EAAMC,uBAAuB4C,WAAWE,UAAUtC,OAAOC,EAAQtB,WAAW9G,GAAIqI,EAAOC,OAA8B,IAAIoC,QAAQjC,SACzI,OAAOJ,GAYXkC,EAAW/B,gBAAkB,SAAyBJ,EAASC,GAC3D,OAAO9C,KAAK4C,OAAOC,EAASC,GAAQI,UAcxC8B,EAAW7B,OAAS,SAAgBC,EAAQzI,GAClCyI,aAAkBrB,IACpBqB,EAASrB,EAAQ1E,OAAO+F,IAC5B,IAAIC,OAAiBC,IAAX3I,EAAuByI,EAAOG,IAAMH,EAAOI,IAAM7I,EAAQkI,EAAU,IAAIV,EAAMC,uBAAuB4C,WAC9G,MAAO5B,EAAOI,IAAMH,EAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACKZ,EAAQtB,YAAcsB,EAAQtB,WAAW5G,SAC3CkI,EAAQtB,WAAa,IACzBsB,EAAQtB,WAAWtG,KAAKkH,EAAMC,uBAAuB4C,WAAWE,UAAU/B,OAAOC,EAAQA,EAAOL,WAChG,MACJ,QACIK,EAAOM,SAAe,EAAND,GAChB,OAGR,OAAOZ,GAaXmC,EAAWrB,gBAAkB,SAAyBP,GAGlD,OAFMA,aAAkBrB,IACpBqB,EAAS,IAAIrB,EAAQqB,IAClBpD,KAAKmD,OAAOC,EAAQA,EAAOL,WAWtCiC,EAAWpB,OAAS,SAAgBf,GAChC,GAAuB,WAAnB,eAAOA,IAAoC,OAAZA,EAC/B,MAAO,kBACX,GAA0B,MAAtBA,EAAQtB,YAAsBsB,EAAQ/H,eAAe,cAAe,CACpE,IAAKsK,MAAMC,QAAQxC,EAAQtB,YACvB,MAAO,6BACX,IAAK,IAAI9G,EAAI,EAAGA,EAAIoI,EAAQtB,WAAW5G,SAAUF,EAAG,CAChD,IAAI6K,EAAQnD,EAAMC,uBAAuB4C,WAAWE,UAAUtB,OAAOf,EAAQtB,WAAW9G,IACxF,GAAI6K,EACA,MAAO,cAAgBA,GAGnC,OAAO,MAWXN,EAAWhB,WAAa,SAAoBvG,GACxC,GAAIA,aAAkB0E,EAAMC,uBAAuB4C,WAC/C,OAAOvH,EACX,IAAIoF,EAAU,IAAIV,EAAMC,uBAAuB4C,WAC/C,GAAIvH,EAAO8D,WAAY,CACnB,IAAK6D,MAAMC,QAAQ5H,EAAO8D,YACtB,MAAMgE,UAAU,iEACpB1C,EAAQtB,WAAa,GACrB,IAAK,IAAI9G,EAAI,EAAGA,EAAIgD,EAAO8D,WAAW5G,SAAUF,EAAG,CAC/C,GAAoC,WAAhC,eAAOgD,EAAO8D,WAAW9G,IACzB,MAAM8K,UAAU,kEACpB1C,EAAQtB,WAAW9G,GAAK0H,EAAMC,uBAAuB4C,WAAWE,UAAUlB,WAAWvG,EAAO8D,WAAW9G,KAG/G,OAAOoI,GAYXmC,EAAWV,SAAW,SAAkBzB,EAAS0B,GACxCA,IACDA,EAAU,IACd,IAAI9G,EAAS,GAGb,IAFI8G,EAAQiB,QAAUjB,EAAQC,YAC1B/G,EAAO8D,WAAa,IACpBsB,EAAQtB,YAAcsB,EAAQtB,WAAW5G,OAAQ,CACjD8C,EAAO8D,WAAa,GACpB,IAAK,IAAI5F,EAAI,EAAGA,EAAIkH,EAAQtB,WAAW5G,SAAUgB,EAC7C8B,EAAO8D,WAAW5F,GAAKwG,EAAMC,uBAAuB4C,WAAWE,UAAUZ,SAASzB,EAAQtB,WAAW5F,GAAI4I,GAEjH,OAAO9G,GAUXuH,EAAWnK,UAAUgK,OAAS,WAC1B,OAAO7E,KAAK8E,YAAYR,SAAStE,KAAMgC,UAAe+C,gBAG1DC,EAAWE,UAAa,WAmBpB,SAASA,EAAU5C,GACf,GAAIA,EACA,IAAK,IAAIC,EAAO3H,OAAO2H,KAAKD,GAAa7H,EAAI,EAAGA,EAAI8H,EAAK5H,SAAUF,EACpC,MAAvB6H,EAAWC,EAAK9H,MAChBuF,KAAKuC,EAAK9H,IAAM6H,EAAWC,EAAK9H,KAuNhD,OA9MAyK,EAAUrK,UAAU4K,QAAU,EAQ9BP,EAAUrK,UAAUV,KAAO+H,EAAMwD,UAAU,IAQ3CR,EAAUrK,UAAU8K,sBAAwB,EAU5CT,EAAU7H,OAAS,SAAgBiF,GAC/B,OAAO,IAAI4C,EAAU5C,IAYzB4C,EAAUtC,OAAS,SAAgBC,EAASC,GASxC,OARKA,IACDA,EAASb,EAAQ5E,UACE,MAAnBwF,EAAQ4C,SAAmB7K,OAAOE,eAAeC,KAAK8H,EAAS,YAC/DC,EAAOC,OAA8B,GAAGA,OAAOF,EAAQ4C,SACvC,MAAhB5C,EAAQ1I,MAAgBS,OAAOE,eAAeC,KAAK8H,EAAS,SAC5DC,EAAOC,OAA8B,IAAI6C,MAAM/C,EAAQ1I,MACtB,MAAjC0I,EAAQ8C,uBAAiC/K,OAAOE,eAAeC,KAAK8H,EAAS,0BAC7EC,EAAOC,OAA8B,IAAI8C,QAAQhD,EAAQ8C,uBACtD7C,GAYXoC,EAAUjC,gBAAkB,SAAyBJ,EAASC,GAC1D,OAAO9C,KAAK4C,OAAOC,EAASC,GAAQI,UAcxCgC,EAAU/B,OAAS,SAAgBC,EAAQzI,GACjCyI,aAAkBrB,IACpBqB,EAASrB,EAAQ1E,OAAO+F,IAC5B,IAAIC,OAAiBC,IAAX3I,EAAuByI,EAAOG,IAAMH,EAAOI,IAAM7I,EAAQkI,EAAU,IAAIV,EAAMC,uBAAuB4C,WAAWE,UACzH,MAAO9B,EAAOI,IAAMH,EAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDZ,EAAQ4C,QAAUrC,EAAOL,SACzB,MACJ,KAAK,EACDF,EAAQ1I,KAAOiJ,EAAOwC,QACtB,MACJ,KAAK,EACD/C,EAAQ8C,sBAAwBvC,EAAOyC,UACvC,MACJ,QACIzC,EAAOM,SAAe,EAAND,GAChB,OAGR,OAAOZ,GAaXqC,EAAUvB,gBAAkB,SAAyBP,GAGjD,OAFMA,aAAkBrB,IACpBqB,EAAS,IAAIrB,EAAQqB,IAClBpD,KAAKmD,OAAOC,EAAQA,EAAOL,WAWtCmC,EAAUtB,OAAS,SAAgBf,GAC/B,MAAuB,WAAnB,eAAOA,IAAoC,OAAZA,EACxB,kBACY,MAAnBA,EAAQ4C,SAAmB5C,EAAQ/H,eAAe,aAC7CoH,EAAM2B,UAAUhB,EAAQ4C,SAClB,4BACK,MAAhB5C,EAAQ1I,MAAgB0I,EAAQ/H,eAAe,WACzC+H,EAAQ1I,MAAuC,kBAAxB0I,EAAQ1I,KAAKQ,QAAuBuH,EAAM4D,SAASjD,EAAQ1I,OAC7E,wBACsB,MAAjC0I,EAAQ8C,uBAAiC9C,EAAQ/H,eAAe,2BAC3DoH,EAAM2B,UAAUhB,EAAQ8C,uBAClB,0CACR,MAWXT,EAAUlB,WAAa,SAAoBvG,GACvC,GAAIA,aAAkB0E,EAAMC,uBAAuB4C,WAAWE,UAC1D,OAAOzH,EACX,IAAIoF,EAAU,IAAIV,EAAMC,uBAAuB4C,WAAWE,UAU1D,OATsB,MAAlBzH,EAAOgI,UACP5C,EAAQ4C,QAAUhI,EAAOgI,UAAY,GACtB,MAAfhI,EAAOtD,OACoB,kBAAhBsD,EAAOtD,KACd+H,EAAM6D,OAAO5C,OAAO1F,EAAOtD,KAAM0I,EAAQ1I,KAAO+H,EAAMwD,UAAUxD,EAAM6D,OAAOpL,OAAO8C,EAAOtD,OAAQ,GAC9FsD,EAAOtD,KAAKQ,SACjBkI,EAAQ1I,KAAOsD,EAAOtD,OACM,MAAhCsD,EAAOkI,wBACP9C,EAAQ8C,sBAAwBlI,EAAOkI,wBAA0B,GAC9D9C,GAYXqC,EAAUZ,SAAW,SAAkBzB,EAAS0B,GACvCA,IACDA,EAAU,IACd,IAAI9G,EAAS,GAkBb,OAjBI8G,EAAQC,WACR/G,EAAOgI,QAAU,EACblB,EAAQqB,QAAUhG,OAClBnC,EAAOtD,KAAO,IAEdsD,EAAOtD,KAAO,GACVoK,EAAQqB,QAAUR,QAClB3H,EAAOtD,KAAO+H,EAAMwD,UAAUjI,EAAOtD,QAE7CsD,EAAOkI,sBAAwB,GAEZ,MAAnB9C,EAAQ4C,SAAmB5C,EAAQ/H,eAAe,aAClD2C,EAAOgI,QAAU5C,EAAQ4C,SACT,MAAhB5C,EAAQ1I,MAAgB0I,EAAQ/H,eAAe,UAC/C2C,EAAOtD,KAAOoK,EAAQqB,QAAUhG,OAASsC,EAAM6D,OAAOnD,OAAOC,EAAQ1I,KAAM,EAAG0I,EAAQ1I,KAAKQ,QAAU4J,EAAQqB,QAAUR,MAAQA,MAAMvK,UAAUkD,MAAMhD,KAAK8H,EAAQ1I,MAAQ0I,EAAQ1I,MACjJ,MAAjC0I,EAAQ8C,uBAAiC9C,EAAQ/H,eAAe,2BAChE2C,EAAOkI,sBAAwB9C,EAAQ8C,uBACpClI,GAUXyH,EAAUrK,UAAUgK,OAAS,WACzB,OAAO7E,KAAK8E,YAAYR,SAAStE,KAAMgC,UAAe+C,gBAGnDG,EA9Oa,GAiPjBF,EA9b0B,GAicrC5C,EAAuB4D,cAAiB,WAkBpC,SAASA,EAAc1D,GACnB,GAAIA,EACA,IAAK,IAAIC,EAAO3H,OAAO2H,KAAKD,GAAa7H,EAAI,EAAGA,EAAI8H,EAAK5H,SAAUF,EACpC,MAAvB6H,EAAWC,EAAK9H,MAChBuF,KAAKuC,EAAK9H,IAAM6H,EAAWC,EAAK9H,KAgNhD,OAvMAuL,EAAcnL,UAAUoL,KAAO/D,EAAMO,KAAOP,EAAMO,KAAKC,SAAS,EAAE,GAAE,GAAQ,EAQ5EsD,EAAcnL,UAAUqL,KAAOhE,EAAMwD,UAAU,IAU/CM,EAAc3I,OAAS,SAAgBiF,GACnC,OAAO,IAAI0D,EAAc1D,IAY7B0D,EAAcpD,OAAS,SAAgBC,EAASC,GAO5C,OANKA,IACDA,EAASb,EAAQ5E,UACD,MAAhBwF,EAAQoD,MAAgBrL,OAAOE,eAAeC,KAAK8H,EAAS,SAC5DC,EAAOC,OAA8B,GAAGC,OAAOH,EAAQoD,MACvC,MAAhBpD,EAAQqD,MAAgBtL,OAAOE,eAAeC,KAAK8H,EAAS,SAC5DC,EAAOC,OAA8B,IAAI6C,MAAM/C,EAAQqD,MACpDpD,GAYXkD,EAAc/C,gBAAkB,SAAyBJ,EAASC,GAC9D,OAAO9C,KAAK4C,OAAOC,EAASC,GAAQI,UAcxC8C,EAAc7C,OAAS,SAAgBC,EAAQzI,GACrCyI,aAAkBrB,IACpBqB,EAASrB,EAAQ1E,OAAO+F,IAC5B,IAAIC,OAAiBC,IAAX3I,EAAuByI,EAAOG,IAAMH,EAAOI,IAAM7I,EAAQkI,EAAU,IAAIV,EAAMC,uBAAuB4D,cAC9G,MAAO5C,EAAOI,IAAMH,EAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDZ,EAAQoD,KAAO7C,EAAOJ,SACtB,MACJ,KAAK,EACDH,EAAQqD,KAAO9C,EAAOwC,QACtB,MACJ,QACIxC,EAAOM,SAAe,EAAND,GAChB,OAGR,OAAOZ,GAaXmD,EAAcrC,gBAAkB,SAAyBP,GAGrD,OAFMA,aAAkBrB,IACpBqB,EAAS,IAAIrB,EAAQqB,IAClBpD,KAAKmD,OAAOC,EAAQA,EAAOL,WAWtCiD,EAAcpC,OAAS,SAAgBf,GACnC,MAAuB,WAAnB,eAAOA,IAAoC,OAAZA,EACxB,kBACS,MAAhBA,EAAQoD,OAAgBpD,EAAQ/H,eAAe,SAC1CoH,EAAM2B,UAAUhB,EAAQoD,OAAWpD,EAAQoD,MAAQ/D,EAAM2B,UAAUhB,EAAQoD,KAAKnC,MAAQ5B,EAAM2B,UAAUhB,EAAQoD,KAAKlC,MAE1G,MAAhBlB,EAAQqD,MAAgBrD,EAAQ/H,eAAe,WACzC+H,EAAQqD,MAAuC,kBAAxBrD,EAAQqD,KAAKvL,QAAuBuH,EAAM4D,SAASjD,EAAQqD,OAC7E,wBACR,KAJQ,+BAenBF,EAAchC,WAAa,SAAoBvG,GAC3C,GAAIA,aAAkB0E,EAAMC,uBAAuB4D,cAC/C,OAAOvI,EACX,IAAIoF,EAAU,IAAIV,EAAMC,uBAAuB4D,cAe/C,OAdmB,MAAfvI,EAAOwI,OACH/D,EAAMO,MACLI,EAAQoD,KAAO/D,EAAMO,KAAKwB,UAAUxG,EAAOwI,OAAO/B,UAAW,EAClC,kBAAhBzG,EAAOwI,KACnBpD,EAAQoD,KAAO9B,SAAS1G,EAAOwI,KAAM,IACT,kBAAhBxI,EAAOwI,KACnBpD,EAAQoD,KAAOxI,EAAOwI,KACM,WAAvB,eAAOxI,EAAOwI,QACnBpD,EAAQoD,KAAO,IAAI/D,EAAMkC,SAAS3G,EAAOwI,KAAKnC,MAAQ,EAAGrG,EAAOwI,KAAKlC,OAAS,GAAGM,UAAS,KAC/E,MAAf5G,EAAOyI,OACoB,kBAAhBzI,EAAOyI,KACdhE,EAAM6D,OAAO5C,OAAO1F,EAAOyI,KAAMrD,EAAQqD,KAAOhE,EAAMwD,UAAUxD,EAAM6D,OAAOpL,OAAO8C,EAAOyI,OAAQ,GAC9FzI,EAAOyI,KAAKvL,SACjBkI,EAAQqD,KAAOzI,EAAOyI,OACvBrD,GAYXmD,EAAc1B,SAAW,SAAkBzB,EAAS0B,GAC3CA,IACDA,EAAU,IACd,IAAI9G,EAAS,GACb,GAAI8G,EAAQC,SAAU,CAClB,GAAItC,EAAMO,KAAM,CACZ,IAAIgC,EAAO,IAAIvC,EAAMO,KAAK,EAAG,GAAG,GAChChF,EAAOwI,KAAO1B,EAAQG,QAAU9E,OAAS6E,EAAKE,WAAaJ,EAAQG,QAAUE,OAASH,EAAKJ,WAAaI,OAExGhH,EAAOwI,KAAO1B,EAAQG,QAAU9E,OAAS,IAAM,EAC/C2E,EAAQqB,QAAUhG,OAClBnC,EAAOyI,KAAO,IAEdzI,EAAOyI,KAAO,GACV3B,EAAQqB,QAAUR,QAClB3H,EAAOyI,KAAOhE,EAAMwD,UAAUjI,EAAOyI,QAUjD,OAPoB,MAAhBrD,EAAQoD,MAAgBpD,EAAQ/H,eAAe,UACnB,kBAAjB+H,EAAQoD,KACfxI,EAAOwI,KAAO1B,EAAQG,QAAU9E,OAASA,OAAOiD,EAAQoD,MAAQpD,EAAQoD,KAExExI,EAAOwI,KAAO1B,EAAQG,QAAU9E,OAASsC,EAAMO,KAAK5H,UAAU8J,SAAS5J,KAAK8H,EAAQoD,MAAQ1B,EAAQG,QAAUE,OAAS,IAAI1C,EAAMkC,SAASvB,EAAQoD,KAAKnC,MAAQ,EAAGjB,EAAQoD,KAAKlC,OAAS,GAAGM,UAAS,GAAQxB,EAAQoD,MACxM,MAAhBpD,EAAQqD,MAAgBrD,EAAQ/H,eAAe,UAC/C2C,EAAOyI,KAAO3B,EAAQqB,QAAUhG,OAASsC,EAAM6D,OAAOnD,OAAOC,EAAQqD,KAAM,EAAGrD,EAAQqD,KAAKvL,QAAU4J,EAAQqB,QAAUR,MAAQA,MAAMvK,UAAUkD,MAAMhD,KAAK8H,EAAQqD,MAAQrD,EAAQqD,MAC/KzI,GAUXuI,EAAcnL,UAAUgK,OAAS,WAC7B,OAAO7E,KAAK8E,YAAYR,SAAStE,KAAMgC,UAAe+C,gBAGnDiB,EAtO6B,GAyOxC5D,EAAuB+D,UAAa,WAsBhC,SAASA,EAAU7D,GACf,GAAIA,EACA,IAAK,IAAIC,EAAO3H,OAAO2H,KAAKD,GAAa7H,EAAI,EAAGA,EAAI8H,EAAK5H,SAAUF,EACpC,MAAvB6H,EAAWC,EAAK9H,MAChBuF,KAAKuC,EAAK9H,IAAM6H,EAAWC,EAAK9H,KA6QhD,OApQA0L,EAAUtL,UAAUuL,MAAQ,GAQ5BD,EAAUtL,UAAUyC,IAAM,GAQ1B6I,EAAUtL,UAAUwL,QAAU,GAQ9BF,EAAUtL,UAAU4K,QAAU,GAQ9BU,EAAUtL,UAAUyL,aAAe,GAQnCH,EAAUtL,UAAU0L,aAAe,GAUnCJ,EAAU9I,OAAS,SAAgBiF,GAC/B,OAAO,IAAI6D,EAAU7D,IAYzB6D,EAAUvD,OAAS,SAAgBC,EAASC,GAexC,OAdKA,IACDA,EAASb,EAAQ5E,UACA,MAAjBwF,EAAQuD,OAAiBxL,OAAOE,eAAeC,KAAK8H,EAAS,UAC7DC,EAAOC,OAA8B,IAAIyD,OAAO3D,EAAQuD,OACzC,MAAfvD,EAAQvF,KAAe1C,OAAOE,eAAeC,KAAK8H,EAAS,QAC3DC,EAAOC,OAA8B,IAAIyD,OAAO3D,EAAQvF,KACrC,MAAnBuF,EAAQwD,SAAmBzL,OAAOE,eAAeC,KAAK8H,EAAS,YAC/DC,EAAOC,OAA8B,IAAIyD,OAAO3D,EAAQwD,SACrC,MAAnBxD,EAAQ4C,SAAmB7K,OAAOE,eAAeC,KAAK8H,EAAS,YAC/DC,EAAOC,OAA8B,IAAIyD,OAAO3D,EAAQ4C,SAChC,MAAxB5C,EAAQyD,cAAwB1L,OAAOE,eAAeC,KAAK8H,EAAS,iBACpEC,EAAOC,OAA8B,IAAIyD,OAAO3D,EAAQyD,cAChC,MAAxBzD,EAAQ0D,cAAwB3L,OAAOE,eAAeC,KAAK8H,EAAS,iBACpEC,EAAOC,OAA8B,IAAIyD,OAAO3D,EAAQ0D,cACrDzD,GAYXqD,EAAUlD,gBAAkB,SAAyBJ,EAASC,GAC1D,OAAO9C,KAAK4C,OAAOC,EAASC,GAAQI,UAcxCiD,EAAUhD,OAAS,SAAgBC,EAAQzI,GACjCyI,aAAkBrB,IACpBqB,EAASrB,EAAQ1E,OAAO+F,IAC5B,IAAIC,OAAiBC,IAAX3I,EAAuByI,EAAOG,IAAMH,EAAOI,IAAM7I,EAAQkI,EAAU,IAAIV,EAAMC,uBAAuB+D,UAC9G,MAAO/C,EAAOI,IAAMH,EAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDZ,EAAQuD,MAAQhD,EAAOoD,SACvB,MACJ,KAAK,EACD3D,EAAQvF,IAAM8F,EAAOoD,SACrB,MACJ,KAAK,EACD3D,EAAQwD,QAAUjD,EAAOoD,SACzB,MACJ,KAAK,EACD3D,EAAQ4C,QAAUrC,EAAOoD,SACzB,MACJ,KAAK,EACD3D,EAAQyD,aAAelD,EAAOoD,SAC9B,MACJ,KAAK,EACD3D,EAAQ0D,aAAenD,EAAOoD,SAC9B,MACJ,QACIpD,EAAOM,SAAe,EAAND,GAChB,OAGR,OAAOZ,GAaXsD,EAAUxC,gBAAkB,SAAyBP,GAGjD,OAFMA,aAAkBrB,IACpBqB,EAAS,IAAIrB,EAAQqB,IAClBpD,KAAKmD,OAAOC,EAAQA,EAAOL,WAWtCoD,EAAUvC,OAAS,SAAgBf,GAC/B,MAAuB,WAAnB,eAAOA,IAAoC,OAAZA,EACxB,kBACU,MAAjBA,EAAQuD,OAAiBvD,EAAQ/H,eAAe,WAC3CoH,EAAM4D,SAASjD,EAAQuD,OACjB,yBACI,MAAfvD,EAAQvF,KAAeuF,EAAQ/H,eAAe,SACzCoH,EAAM4D,SAASjD,EAAQvF,KACjB,uBACQ,MAAnBuF,EAAQwD,SAAmBxD,EAAQ/H,eAAe,aAC7CoH,EAAM4D,SAASjD,EAAQwD,SACjB,2BACQ,MAAnBxD,EAAQ4C,SAAmB5C,EAAQ/H,eAAe,aAC7CoH,EAAM4D,SAASjD,EAAQ4C,SACjB,2BACa,MAAxB5C,EAAQyD,cAAwBzD,EAAQ/H,eAAe,kBAClDoH,EAAM4D,SAASjD,EAAQyD,cACjB,gCACa,MAAxBzD,EAAQ0D,cAAwB1D,EAAQ/H,eAAe,kBAClDoH,EAAM4D,SAASjD,EAAQ0D,cACjB,gCACR,MAWXJ,EAAUnC,WAAa,SAAoBvG,GACvC,GAAIA,aAAkB0E,EAAMC,uBAAuB+D,UAC/C,OAAO1I,EACX,IAAIoF,EAAU,IAAIV,EAAMC,uBAAuB+D,UAa/C,OAZoB,MAAhB1I,EAAO2I,QACPvD,EAAQuD,MAAQxG,OAAOnC,EAAO2I,QAChB,MAAd3I,EAAOH,MACPuF,EAAQvF,IAAMsC,OAAOnC,EAAOH,MACV,MAAlBG,EAAO4I,UACPxD,EAAQwD,QAAUzG,OAAOnC,EAAO4I,UACd,MAAlB5I,EAAOgI,UACP5C,EAAQ4C,QAAU7F,OAAOnC,EAAOgI,UACT,MAAvBhI,EAAO6I,eACPzD,EAAQyD,aAAe1G,OAAOnC,EAAO6I,eACd,MAAvB7I,EAAO8I,eACP1D,EAAQ0D,aAAe3G,OAAOnC,EAAO8I,eAClC1D,GAYXsD,EAAU7B,SAAW,SAAkBzB,EAAS0B,GACvCA,IACDA,EAAU,IACd,IAAI9G,EAAS,GAqBb,OApBI8G,EAAQC,WACR/G,EAAO2I,MAAQ,GACf3I,EAAOH,IAAM,GACbG,EAAO4I,QAAU,GACjB5I,EAAOgI,QAAU,GACjBhI,EAAO6I,aAAe,GACtB7I,EAAO8I,aAAe,IAEL,MAAjB1D,EAAQuD,OAAiBvD,EAAQ/H,eAAe,WAChD2C,EAAO2I,MAAQvD,EAAQuD,OACR,MAAfvD,EAAQvF,KAAeuF,EAAQ/H,eAAe,SAC9C2C,EAAOH,IAAMuF,EAAQvF,KACF,MAAnBuF,EAAQwD,SAAmBxD,EAAQ/H,eAAe,aAClD2C,EAAO4I,QAAUxD,EAAQwD,SACN,MAAnBxD,EAAQ4C,SAAmB5C,EAAQ/H,eAAe,aAClD2C,EAAOgI,QAAU5C,EAAQ4C,SACD,MAAxB5C,EAAQyD,cAAwBzD,EAAQ/H,eAAe,kBACvD2C,EAAO6I,aAAezD,EAAQyD,cACN,MAAxBzD,EAAQ0D,cAAwB1D,EAAQ/H,eAAe,kBACvD2C,EAAO8I,aAAe1D,EAAQ0D,cAC3B9I,GAUX0I,EAAUtL,UAAUgK,OAAS,WACzB,OAAO7E,KAAK8E,YAAYR,SAAStE,KAAMgC,UAAe+C,gBAGnDoB,EAvSyB,GA0SpC/D,EAAuBqE,iBAAoB,WA0BvC,SAASA,EAAiBnE,GAItB,GAHAtC,KAAK0G,WAAa,GAClB1G,KAAK2G,WAAa,GAClB3G,KAAK4G,OAAS,GACVtE,EACA,IAAK,IAAIC,EAAO3H,OAAO2H,KAAKD,GAAa7H,EAAI,EAAGA,EAAI8H,EAAK5H,SAAUF,EACpC,MAAvB6H,EAAWC,EAAK9H,MAChBuF,KAAKuC,EAAK9H,IAAM6H,EAAWC,EAAK9H,KAqlBhD,OA5kBAgM,EAAiB5L,UAAU2E,KAAO,EAQlCiH,EAAiB5L,UAAUgM,WAAa3E,EAAMO,KAAOP,EAAMO,KAAKC,SAAS,EAAE,GAAE,GAAQ,EAQrF+D,EAAiB5L,UAAUiM,WAAa5E,EAAMO,KAAOP,EAAMO,KAAKC,SAAS,EAAE,GAAE,GAAQ,EAQrF+D,EAAiB5L,UAAU6L,WAAaxE,EAAM+C,WAQ9CwB,EAAiB5L,UAAUkM,UAAY7E,EAAMO,KAAOP,EAAMO,KAAKC,SAAS,EAAE,GAAE,GAAQ,EAQpF+D,EAAiB5L,UAAU8L,WAAazE,EAAM+C,WAQ9CwB,EAAiB5L,UAAUmM,UAAY9E,EAAMO,KAAOP,EAAMO,KAAKC,SAAS,EAAE,GAAE,GAAQ,EAQpF+D,EAAiB5L,UAAU+G,eAAiBM,EAAMwD,UAAU,IAQ5De,EAAiB5L,UAAUoM,cAAgB/E,EAAMwD,UAAU,IAQ3De,EAAiB5L,UAAU+L,OAAS1E,EAAMgF,YAU1CT,EAAiBpJ,OAAS,SAAgBiF,GACtC,OAAO,IAAImE,EAAiBnE,IAYhCmE,EAAiB7D,OAAS,SAAgBC,EAASC,GAQ/C,GAPKA,IACDA,EAASb,EAAQ5E,UACrByF,EAAOC,OAA8B,GAAGoE,MAAMtE,EAAQrD,MAC5B,MAAtBqD,EAAQgE,YAAsBjM,OAAOE,eAAeC,KAAK8H,EAAS,eAClEC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQgE,YAClC,MAAtBhE,EAAQiE,YAAsBlM,OAAOE,eAAeC,KAAK8H,EAAS,eAClEC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQiE,YAClC,MAAtBjE,EAAQ6D,YAAsB7D,EAAQ6D,WAAW/L,OACjD,IAAK,IAAIF,EAAI,EAAGA,EAAIoI,EAAQ6D,WAAW/L,SAAUF,EAC7C0H,EAAMC,uBAAuBC,OAAOO,OAAOC,EAAQ6D,WAAWjM,GAAIqI,EAAOC,OAA8B,IAAIoC,QAAQjC,SAG3H,GAFyB,MAArBL,EAAQkE,WAAqBnM,OAAOE,eAAeC,KAAK8H,EAAS,cACjEC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQkE,WAClC,MAAtBlE,EAAQ8D,YAAsB9D,EAAQ8D,WAAWhM,OACjD,IAAK,IAAIF,EAAI,EAAGA,EAAIoI,EAAQ8D,WAAWhM,SAAUF,EAC7C0H,EAAMC,uBAAuBC,OAAOO,OAAOC,EAAQ8D,WAAWlM,GAAIqI,EAAOC,OAA8B,IAAIoC,QAAQjC,SAO3H,GANyB,MAArBL,EAAQmE,WAAqBpM,OAAOE,eAAeC,KAAK8H,EAAS,cACjEC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQmE,WAC9B,MAA1BnE,EAAQjB,gBAA0BhH,OAAOE,eAAeC,KAAK8H,EAAS,mBACtEC,EAAOC,OAA8B,IAAI6C,MAAM/C,EAAQjB,gBAC9B,MAAzBiB,EAAQoE,eAAyBrM,OAAOE,eAAeC,KAAK8H,EAAS,kBACrEC,EAAOC,OAA8B,IAAI6C,MAAM/C,EAAQoE,eACrC,MAAlBpE,EAAQ+D,QAAkBhM,OAAOE,eAAeC,KAAK8H,EAAS,UAC9D,IAAK,IAAIN,EAAO3H,OAAO2H,KAAKM,EAAQ+D,QAASnM,EAAI,EAAGA,EAAI8H,EAAK5H,SAAUF,EACnEqI,EAAOC,OAA+B,IAAIoC,OAAOpC,OAA8B,GAAGA,OAAOR,EAAK9H,IAAIsI,OAA8B,IAAIA,OAAOF,EAAQ+D,OAAOrE,EAAK9H,KAAKyI,SAC5K,OAAOJ,GAYX2D,EAAiBxD,gBAAkB,SAAyBJ,EAASC,GACjE,OAAO9C,KAAK4C,OAAOC,EAASC,GAAQI,UAcxCuD,EAAiBtD,OAAS,SAAgBC,EAAQzI,GACxCyI,aAAkBrB,IACpBqB,EAASrB,EAAQ1E,OAAO+F,IAC5B,IAAkI9F,EAAKN,EAAnIqG,OAAiBC,IAAX3I,EAAuByI,EAAOG,IAAMH,EAAOI,IAAM7I,EAAQkI,EAAU,IAAIV,EAAMC,uBAAuBqE,iBAC9G,MAAOrD,EAAOI,IAAMH,EAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDZ,EAAQrD,KAAO4D,EAAO+D,QACtB,MACJ,KAAK,EACDtE,EAAQgE,WAAazD,EAAOJ,SAC5B,MACJ,KAAK,EACDH,EAAQiE,WAAa1D,EAAOJ,SAC5B,MACJ,KAAK,EACKH,EAAQ6D,YAAc7D,EAAQ6D,WAAW/L,SAC3CkI,EAAQ6D,WAAa,IACzB7D,EAAQ6D,WAAWzL,KAAKkH,EAAMC,uBAAuBC,OAAOc,OAAOC,EAAQA,EAAOL,WAClF,MACJ,KAAK,EACDF,EAAQkE,UAAY3D,EAAOJ,SAC3B,MACJ,KAAK,EACKH,EAAQ8D,YAAc9D,EAAQ8D,WAAWhM,SAC3CkI,EAAQ8D,WAAa,IACzB9D,EAAQ8D,WAAW1L,KAAKkH,EAAMC,uBAAuBC,OAAOc,OAAOC,EAAQA,EAAOL,WAClF,MACJ,KAAK,EACDF,EAAQmE,UAAY5D,EAAOJ,SAC3B,MACJ,KAAK,EACDH,EAAQjB,eAAiBwB,EAAOwC,QAChC,MACJ,KAAK,EACD/C,EAAQoE,cAAgB7D,EAAOwC,QAC/B,MACJ,KAAK,GACG/C,EAAQ+D,SAAW1E,EAAMgF,cACzBrE,EAAQ+D,OAAS,IACrB,IAAIQ,EAAOhE,EAAOL,SAAWK,EAAOI,IACpClG,EAAM,EACNN,EAAQ,EACR,MAAOoG,EAAOI,IAAM4D,EAAM,CACtB,IAAIC,EAAOjE,EAAOL,SAClB,OAAQsE,IAAS,GACjB,KAAK,EACD/J,EAAM8F,EAAOL,SACb,MACJ,KAAK,EACD/F,EAAQoG,EAAOL,SACf,MACJ,QACIK,EAAOM,SAAgB,EAAP2D,GAChB,OAGRxE,EAAQ+D,OAAOtJ,GAAON,EACtB,MACJ,QACIoG,EAAOM,SAAe,EAAND,GAChB,OAGR,IAAKZ,EAAQ/H,eAAe,QACxB,MAAMoH,EAAMoF,cAAc,0BAA2B,CAAEC,SAAU1E,IACrE,OAAOA,GAaX4D,EAAiB9C,gBAAkB,SAAyBP,GAGxD,OAFMA,aAAkBrB,IACpBqB,EAAS,IAAIrB,EAAQqB,IAClBpD,KAAKmD,OAAOC,EAAQA,EAAOL,WAWtC0D,EAAiB7C,OAAS,SAAgBf,GACtC,GAAuB,WAAnB,eAAOA,IAAoC,OAAZA,EAC/B,MAAO,kBACX,OAAQA,EAAQrD,MAChB,QACI,MAAO,4BACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,EACD,MAEJ,GAA0B,MAAtBqD,EAAQgE,YAAsBhE,EAAQ/H,eAAe,gBAChDoH,EAAM2B,UAAUhB,EAAQgE,eAAiBhE,EAAQgE,YAAc3E,EAAM2B,UAAUhB,EAAQgE,WAAW/C,MAAQ5B,EAAM2B,UAAUhB,EAAQgE,WAAW9C,OAC9I,MAAO,oCACf,GAA0B,MAAtBlB,EAAQiE,YAAsBjE,EAAQ/H,eAAe,gBAChDoH,EAAM2B,UAAUhB,EAAQiE,eAAiBjE,EAAQiE,YAAc5E,EAAM2B,UAAUhB,EAAQiE,WAAWhD,MAAQ5B,EAAM2B,UAAUhB,EAAQiE,WAAW/C,OAC9I,MAAO,oCACf,GAA0B,MAAtBlB,EAAQ6D,YAAsB7D,EAAQ/H,eAAe,cAAe,CACpE,IAAKsK,MAAMC,QAAQxC,EAAQ6D,YACvB,MAAO,6BACX,IAAK,IAAIjM,EAAI,EAAGA,EAAIoI,EAAQ6D,WAAW/L,SAAUF,EAAG,CAChD,IAAI6K,EAAQnD,EAAMC,uBAAuBC,OAAOuB,OAAOf,EAAQ6D,WAAWjM,IAC1E,GAAI6K,EACA,MAAO,cAAgBA,GAGnC,GAAyB,MAArBzC,EAAQkE,WAAqBlE,EAAQ/H,eAAe,eAC/CoH,EAAM2B,UAAUhB,EAAQkE,cAAgBlE,EAAQkE,WAAa7E,EAAM2B,UAAUhB,EAAQkE,UAAUjD,MAAQ5B,EAAM2B,UAAUhB,EAAQkE,UAAUhD,OAC1I,MAAO,mCACf,GAA0B,MAAtBlB,EAAQ8D,YAAsB9D,EAAQ/H,eAAe,cAAe,CACpE,IAAKsK,MAAMC,QAAQxC,EAAQ8D,YACvB,MAAO,6BACX,IAAK,IAAIlM,EAAI,EAAGA,EAAIoI,EAAQ8D,WAAWhM,SAAUF,EAAG,CAChD,IAAI6K,EAAQnD,EAAMC,uBAAuBC,OAAOuB,OAAOf,EAAQ8D,WAAWlM,IAC1E,GAAI6K,EACA,MAAO,cAAgBA,GAGnC,GAAyB,MAArBzC,EAAQmE,WAAqBnE,EAAQ/H,eAAe,eAC/CoH,EAAM2B,UAAUhB,EAAQmE,cAAgBnE,EAAQmE,WAAa9E,EAAM2B,UAAUhB,EAAQmE,UAAUlD,MAAQ5B,EAAM2B,UAAUhB,EAAQmE,UAAUjD,OAC1I,MAAO,mCACf,GAA8B,MAA1BlB,EAAQjB,gBAA0BiB,EAAQ/H,eAAe,qBACnD+H,EAAQjB,gBAA2D,kBAAlCiB,EAAQjB,eAAejH,QAAuBuH,EAAM4D,SAASjD,EAAQjB,iBACxG,MAAO,kCACf,GAA6B,MAAzBiB,EAAQoE,eAAyBpE,EAAQ/H,eAAe,oBAClD+H,EAAQoE,eAAyD,kBAAjCpE,EAAQoE,cAActM,QAAuBuH,EAAM4D,SAASjD,EAAQoE,gBACtG,MAAO,iCACf,GAAsB,MAAlBpE,EAAQ+D,QAAkB/D,EAAQ/H,eAAe,UAAW,CAC5D,IAAKoH,EAAMsF,SAAS3E,EAAQ+D,QACxB,MAAO,0BAEX,IADA,IAAItJ,EAAM1C,OAAO2H,KAAKM,EAAQ+D,QACrBnM,EAAI,EAAGA,EAAI6C,EAAI3C,SAAUF,EAAG,CACjC,IAAKyH,EAAMuF,QAAQC,KAAKpK,EAAI7C,IACxB,MAAO,yCACX,IAAKyH,EAAM2B,UAAUhB,EAAQ+D,OAAOtJ,EAAI7C,KACpC,MAAO,sCAGnB,OAAO,MAWXgM,EAAiBzC,WAAa,SAAoBvG,GAC9C,GAAIA,aAAkB0E,EAAMC,uBAAuBqE,iBAC/C,OAAOhJ,EACX,IAAIoF,EAAU,IAAIV,EAAMC,uBAAuBqE,iBAC/C,OAAQhJ,EAAO+B,MACf,IAAK,UACL,KAAK,EACDqD,EAAQrD,KAAO,EACf,MACJ,IAAK,aACL,KAAK,EACDqD,EAAQrD,KAAO,EACf,MACJ,IAAK,OACL,KAAK,EACDqD,EAAQrD,KAAO,EACf,MACJ,IAAK,SACL,KAAK,EACDqD,EAAQrD,KAAO,EACf,MACJ,IAAK,cACL,KAAK,EACDqD,EAAQrD,KAAO,EACf,MACJ,IAAK,gBACL,KAAK,EACDqD,EAAQrD,KAAO,EACf,MACJ,IAAK,aACL,KAAK,EACDqD,EAAQrD,KAAO,EACf,MACJ,IAAK,OACL,KAAK,EACDqD,EAAQrD,KAAO,EACf,MACJ,IAAK,UACL,KAAK,EACDqD,EAAQrD,KAAO,EACf,MACJ,IAAK,gBACL,KAAK,GACDqD,EAAQrD,KAAO,GACf,MACJ,IAAK,WACL,KAAK,EACDqD,EAAQrD,KAAO,EACf,MAoBJ,GAlByB,MAArB/B,EAAOoJ,aACH3E,EAAMO,MACLI,EAAQgE,WAAa3E,EAAMO,KAAKwB,UAAUxG,EAAOoJ,aAAa3C,UAAW,EACxC,kBAAtBzG,EAAOoJ,WACnBhE,EAAQgE,WAAa1C,SAAS1G,EAAOoJ,WAAY,IACf,kBAAtBpJ,EAAOoJ,WACnBhE,EAAQgE,WAAapJ,EAAOoJ,WACM,WAA7B,eAAOpJ,EAAOoJ,cACnBhE,EAAQgE,WAAa,IAAI3E,EAAMkC,SAAS3G,EAAOoJ,WAAW/C,MAAQ,EAAGrG,EAAOoJ,WAAW9C,OAAS,GAAGM,UAAS,KAC3F,MAArB5G,EAAOqJ,aACH5E,EAAMO,MACLI,EAAQiE,WAAa5E,EAAMO,KAAKwB,UAAUxG,EAAOqJ,aAAa5C,UAAW,EACxC,kBAAtBzG,EAAOqJ,WACnBjE,EAAQiE,WAAa3C,SAAS1G,EAAOqJ,WAAY,IACf,kBAAtBrJ,EAAOqJ,WACnBjE,EAAQiE,WAAarJ,EAAOqJ,WACM,WAA7B,eAAOrJ,EAAOqJ,cACnBjE,EAAQiE,WAAa,IAAI5E,EAAMkC,SAAS3G,EAAOqJ,WAAWhD,MAAQ,EAAGrG,EAAOqJ,WAAW/C,OAAS,GAAGM,UAAS,KAChH5G,EAAOiJ,WAAY,CACnB,IAAKtB,MAAMC,QAAQ5H,EAAOiJ,YACtB,MAAMnB,UAAU,uEACpB1C,EAAQ6D,WAAa,GACrB,IAAK,IAAIjM,EAAI,EAAGA,EAAIgD,EAAOiJ,WAAW/L,SAAUF,EAAG,CAC/C,GAAoC,WAAhC,eAAOgD,EAAOiJ,WAAWjM,IACzB,MAAM8K,UAAU,wEACpB1C,EAAQ6D,WAAWjM,GAAK0H,EAAMC,uBAAuBC,OAAO2B,WAAWvG,EAAOiJ,WAAWjM,KAYjG,GATwB,MAApBgD,EAAOsJ,YACH7E,EAAMO,MACLI,EAAQkE,UAAY7E,EAAMO,KAAKwB,UAAUxG,EAAOsJ,YAAY7C,UAAW,EACvC,kBAArBzG,EAAOsJ,UACnBlE,EAAQkE,UAAY5C,SAAS1G,EAAOsJ,UAAW,IACd,kBAArBtJ,EAAOsJ,UACnBlE,EAAQkE,UAAYtJ,EAAOsJ,UACM,WAA5B,eAAOtJ,EAAOsJ,aACnBlE,EAAQkE,UAAY,IAAI7E,EAAMkC,SAAS3G,EAAOsJ,UAAUjD,MAAQ,EAAGrG,EAAOsJ,UAAUhD,OAAS,GAAGM,UAAS,KAC7G5G,EAAOkJ,WAAY,CACnB,IAAKvB,MAAMC,QAAQ5H,EAAOkJ,YACtB,MAAMpB,UAAU,uEACpB1C,EAAQ8D,WAAa,GACrB,IAAK,IAAIlM,EAAI,EAAGA,EAAIgD,EAAOkJ,WAAWhM,SAAUF,EAAG,CAC/C,GAAoC,WAAhC,eAAOgD,EAAOkJ,WAAWlM,IACzB,MAAM8K,UAAU,wEACpB1C,EAAQ8D,WAAWlM,GAAK0H,EAAMC,uBAAuBC,OAAO2B,WAAWvG,EAAOkJ,WAAWlM,KAsBjG,GAnBwB,MAApBgD,EAAOuJ,YACH9E,EAAMO,MACLI,EAAQmE,UAAY9E,EAAMO,KAAKwB,UAAUxG,EAAOuJ,YAAY9C,UAAW,EACvC,kBAArBzG,EAAOuJ,UACnBnE,EAAQmE,UAAY7C,SAAS1G,EAAOuJ,UAAW,IACd,kBAArBvJ,EAAOuJ,UACnBnE,EAAQmE,UAAYvJ,EAAOuJ,UACM,WAA5B,eAAOvJ,EAAOuJ,aACnBnE,EAAQmE,UAAY,IAAI9E,EAAMkC,SAAS3G,EAAOuJ,UAAUlD,MAAQ,EAAGrG,EAAOuJ,UAAUjD,OAAS,GAAGM,UAAS,KACpF,MAAzB5G,EAAOmE,iBAC8B,kBAA1BnE,EAAOmE,eACdM,EAAM6D,OAAO5C,OAAO1F,EAAOmE,eAAgBiB,EAAQjB,eAAiBM,EAAMwD,UAAUxD,EAAM6D,OAAOpL,OAAO8C,EAAOmE,iBAAkB,GAC5HnE,EAAOmE,eAAejH,SAC3BkI,EAAQjB,eAAiBnE,EAAOmE,iBACZ,MAAxBnE,EAAOwJ,gBAC6B,kBAAzBxJ,EAAOwJ,cACd/E,EAAM6D,OAAO5C,OAAO1F,EAAOwJ,cAAepE,EAAQoE,cAAgB/E,EAAMwD,UAAUxD,EAAM6D,OAAOpL,OAAO8C,EAAOwJ,gBAAiB,GACzHxJ,EAAOwJ,cAActM,SAC1BkI,EAAQoE,cAAgBxJ,EAAOwJ,gBACnCxJ,EAAOmJ,OAAQ,CACf,GAA6B,WAAzB,eAAOnJ,EAAOmJ,QACd,MAAMrB,UAAU,oEACpB1C,EAAQ+D,OAAS,GACjB,IAAK,IAAIrE,EAAO3H,OAAO2H,KAAK9E,EAAOmJ,QAASnM,EAAI,EAAGA,EAAI8H,EAAK5H,SAAUF,EAClEoI,EAAQ+D,OAAOrE,EAAK9H,IAAMgD,EAAOmJ,OAAOrE,EAAK9H,MAAQ,EAE7D,OAAOoI,GAYX4D,EAAiBnC,SAAW,SAAkBzB,EAAS0B,GAC9CA,IACDA,EAAU,IACd,IAgFIoD,EAhFAlK,EAAS,GAOb,IANI8G,EAAQiB,QAAUjB,EAAQC,YAC1B/G,EAAOiJ,WAAa,GACpBjJ,EAAOkJ,WAAa,KAEpBpC,EAAQqD,SAAWrD,EAAQC,YAC3B/G,EAAOmJ,OAAS,IAChBrC,EAAQC,SAAU,CAElB,GADA/G,EAAO+B,KAAO+E,EAAQsD,QAAUjI,OAAS,UAAY,EACjDsC,EAAMO,KAAM,CACZ,IAAIgC,EAAO,IAAIvC,EAAMO,KAAK,EAAG,GAAG,GAChChF,EAAOoJ,WAAatC,EAAQG,QAAU9E,OAAS6E,EAAKE,WAAaJ,EAAQG,QAAUE,OAASH,EAAKJ,WAAaI,OAE9GhH,EAAOoJ,WAAatC,EAAQG,QAAU9E,OAAS,IAAM,EACzD,GAAIsC,EAAMO,KAAM,CACZ,IAAIgC,EAAO,IAAIvC,EAAMO,KAAK,EAAG,GAAG,GAChChF,EAAOqJ,WAAavC,EAAQG,QAAU9E,OAAS6E,EAAKE,WAAaJ,EAAQG,QAAUE,OAASH,EAAKJ,WAAaI,OAE9GhH,EAAOqJ,WAAavC,EAAQG,QAAU9E,OAAS,IAAM,EACzD,GAAIsC,EAAMO,KAAM,CACZ,IAAIgC,EAAO,IAAIvC,EAAMO,KAAK,EAAG,GAAG,GAChChF,EAAOsJ,UAAYxC,EAAQG,QAAU9E,OAAS6E,EAAKE,WAAaJ,EAAQG,QAAUE,OAASH,EAAKJ,WAAaI,OAE7GhH,EAAOsJ,UAAYxC,EAAQG,QAAU9E,OAAS,IAAM,EACxD,GAAIsC,EAAMO,KAAM,CACZ,IAAIgC,EAAO,IAAIvC,EAAMO,KAAK,EAAG,GAAG,GAChChF,EAAOuJ,UAAYzC,EAAQG,QAAU9E,OAAS6E,EAAKE,WAAaJ,EAAQG,QAAUE,OAASH,EAAKJ,WAAaI,OAE7GhH,EAAOuJ,UAAYzC,EAAQG,QAAU9E,OAAS,IAAM,EACpD2E,EAAQqB,QAAUhG,OAClBnC,EAAOmE,eAAiB,IAExBnE,EAAOmE,eAAiB,GACpB2C,EAAQqB,QAAUR,QAClB3H,EAAOmE,eAAiBM,EAAMwD,UAAUjI,EAAOmE,kBAEnD2C,EAAQqB,QAAUhG,OAClBnC,EAAOwJ,cAAgB,IAEvBxJ,EAAOwJ,cAAgB,GACnB1C,EAAQqB,QAAUR,QAClB3H,EAAOwJ,cAAgB/E,EAAMwD,UAAUjI,EAAOwJ,iBAe1D,GAZoB,MAAhBpE,EAAQrD,MAAgBqD,EAAQ/H,eAAe,UAC/C2C,EAAO+B,KAAO+E,EAAQsD,QAAUjI,OAASuC,EAAMC,uBAAuBqE,iBAAiBqB,KAAKjF,EAAQrD,MAAQqD,EAAQrD,MAC9F,MAAtBqD,EAAQgE,YAAsBhE,EAAQ/H,eAAe,gBACnB,kBAAvB+H,EAAQgE,WACfpJ,EAAOoJ,WAAatC,EAAQG,QAAU9E,OAASA,OAAOiD,EAAQgE,YAAchE,EAAQgE,WAEpFpJ,EAAOoJ,WAAatC,EAAQG,QAAU9E,OAASsC,EAAMO,KAAK5H,UAAU8J,SAAS5J,KAAK8H,EAAQgE,YAActC,EAAQG,QAAUE,OAAS,IAAI1C,EAAMkC,SAASvB,EAAQgE,WAAW/C,MAAQ,EAAGjB,EAAQgE,WAAW9C,OAAS,GAAGM,UAAS,GAAQxB,EAAQgE,YAC1N,MAAtBhE,EAAQiE,YAAsBjE,EAAQ/H,eAAe,gBACnB,kBAAvB+H,EAAQiE,WACfrJ,EAAOqJ,WAAavC,EAAQG,QAAU9E,OAASA,OAAOiD,EAAQiE,YAAcjE,EAAQiE,WAEpFrJ,EAAOqJ,WAAavC,EAAQG,QAAU9E,OAASsC,EAAMO,KAAK5H,UAAU8J,SAAS5J,KAAK8H,EAAQiE,YAAcvC,EAAQG,QAAUE,OAAS,IAAI1C,EAAMkC,SAASvB,EAAQiE,WAAWhD,MAAQ,EAAGjB,EAAQiE,WAAW/C,OAAS,GAAGM,UAAS,GAAQxB,EAAQiE,YAChPjE,EAAQ6D,YAAc7D,EAAQ6D,WAAW/L,OAAQ,CACjD8C,EAAOiJ,WAAa,GACpB,IAAK,IAAI/K,EAAI,EAAGA,EAAIkH,EAAQ6D,WAAW/L,SAAUgB,EAC7C8B,EAAOiJ,WAAW/K,GAAKwG,EAAMC,uBAAuBC,OAAOiC,SAASzB,EAAQ6D,WAAW/K,GAAI4I,GAOnG,GALyB,MAArB1B,EAAQkE,WAAqBlE,EAAQ/H,eAAe,eACnB,kBAAtB+H,EAAQkE,UACftJ,EAAOsJ,UAAYxC,EAAQG,QAAU9E,OAASA,OAAOiD,EAAQkE,WAAalE,EAAQkE,UAElFtJ,EAAOsJ,UAAYxC,EAAQG,QAAU9E,OAASsC,EAAMO,KAAK5H,UAAU8J,SAAS5J,KAAK8H,EAAQkE,WAAaxC,EAAQG,QAAUE,OAAS,IAAI1C,EAAMkC,SAASvB,EAAQkE,UAAUjD,MAAQ,EAAGjB,EAAQkE,UAAUhD,OAAS,GAAGM,UAAS,GAAQxB,EAAQkE,WAC5OlE,EAAQ8D,YAAc9D,EAAQ8D,WAAWhM,OAAQ,CACjD8C,EAAOkJ,WAAa,GACpB,IAAK,IAAIhL,EAAI,EAAGA,EAAIkH,EAAQ8D,WAAWhM,SAAUgB,EAC7C8B,EAAOkJ,WAAWhL,GAAKwG,EAAMC,uBAAuBC,OAAOiC,SAASzB,EAAQ8D,WAAWhL,GAAI4I,GAYnG,GAVyB,MAArB1B,EAAQmE,WAAqBnE,EAAQ/H,eAAe,eACnB,kBAAtB+H,EAAQmE,UACfvJ,EAAOuJ,UAAYzC,EAAQG,QAAU9E,OAASA,OAAOiD,EAAQmE,WAAanE,EAAQmE,UAElFvJ,EAAOuJ,UAAYzC,EAAQG,QAAU9E,OAASsC,EAAMO,KAAK5H,UAAU8J,SAAS5J,KAAK8H,EAAQmE,WAAazC,EAAQG,QAAUE,OAAS,IAAI1C,EAAMkC,SAASvB,EAAQmE,UAAUlD,MAAQ,EAAGjB,EAAQmE,UAAUjD,OAAS,GAAGM,UAAS,GAAQxB,EAAQmE,WAClN,MAA1BnE,EAAQjB,gBAA0BiB,EAAQ/H,eAAe,oBACzD2C,EAAOmE,eAAiB2C,EAAQqB,QAAUhG,OAASsC,EAAM6D,OAAOnD,OAAOC,EAAQjB,eAAgB,EAAGiB,EAAQjB,eAAejH,QAAU4J,EAAQqB,QAAUR,MAAQA,MAAMvK,UAAUkD,MAAMhD,KAAK8H,EAAQjB,gBAAkBiB,EAAQjB,gBACjM,MAAzBiB,EAAQoE,eAAyBpE,EAAQ/H,eAAe,mBACxD2C,EAAOwJ,cAAgB1C,EAAQqB,QAAUhG,OAASsC,EAAM6D,OAAOnD,OAAOC,EAAQoE,cAAe,EAAGpE,EAAQoE,cAActM,QAAU4J,EAAQqB,QAAUR,MAAQA,MAAMvK,UAAUkD,MAAMhD,KAAK8H,EAAQoE,eAAiBpE,EAAQoE,eAEtNpE,EAAQ+D,SAAWe,EAAQ/M,OAAO2H,KAAKM,EAAQ+D,SAASjM,OAAQ,CAChE8C,EAAOmJ,OAAS,GAChB,IAAK,IAAIjL,EAAI,EAAGA,EAAIgM,EAAMhN,SAAUgB,EAChC8B,EAAOmJ,OAAOe,EAAMhM,IAAMkH,EAAQ+D,OAAOe,EAAMhM,IAEvD,OAAO8B,GAUXgJ,EAAiB5L,UAAUgK,OAAS,WAChC,OAAO7E,KAAK8E,YAAYR,SAAStE,KAAMgC,UAAe+C,gBAmB1D0B,EAAiBqB,KAAQ,WACrB,IAAMC,EAAa,GAAIC,EAASpN,OAAOyC,OAAO0K,GAY9C,OAXAC,EAAOD,EAAW,GAAK,WAAa,EACpCC,EAAOD,EAAW,GAAK,cAAgB,EACvCC,EAAOD,EAAW,GAAK,QAAU,EACjCC,EAAOD,EAAW,GAAK,UAAY,EACnCC,EAAOD,EAAW,GAAK,eAAiB,EACxCC,EAAOD,EAAW,GAAK,iBAAmB,EAC1CC,EAAOD,EAAW,GAAK,cAAgB,EACvCC,EAAOD,EAAW,GAAK,QAAU,EACjCC,EAAOD,EAAW,GAAK,WAAa,EACpCC,EAAOD,EAAW,IAAM,iBAAmB,GAC3CC,EAAOD,EAAW,GAAK,YAAc,EAC9BC,EAbc,GAgBlBvB,EAtnBgC,GAynB3CrE,EAAuB6F,kBAAqB,WAoBxC,SAASA,EAAkB3F,GACvB,GAAIA,EACA,IAAK,IAAIC,EAAO3H,OAAO2H,KAAKD,GAAa7H,EAAI,EAAGA,EAAI8H,EAAK5H,SAAUF,EACpC,MAAvB6H,EAAWC,EAAK9H,MAChBuF,KAAKuC,EAAK9H,IAAM6H,EAAWC,EAAK9H,KA6RhD,OApRAwN,EAAkBpN,UAAU2E,KAAO,EAQnCyI,EAAkBpN,UAAUqN,UAAY,KAQxCD,EAAkBpN,UAAUsN,UAAY,KAQxCF,EAAkBpN,UAAUuN,UAAYlG,EAAMO,KAAOP,EAAMO,KAAKC,SAAS,EAAE,GAAE,GAAQ,EAUrFuF,EAAkB5K,OAAS,SAAgBiF,GACvC,OAAO,IAAI2F,EAAkB3F,IAYjC2F,EAAkBrF,OAAS,SAAgBC,EAASC,GAWhD,OAVKA,IACDA,EAASb,EAAQ5E,UACD,MAAhBwF,EAAQrD,MAAgB5E,OAAOE,eAAeC,KAAK8H,EAAS,SAC5DC,EAAOC,OAA8B,GAAGoE,MAAMtE,EAAQrD,MACjC,MAArBqD,EAAQqF,WAAqBtN,OAAOE,eAAeC,KAAK8H,EAAS,cACjEV,EAAMC,uBAAuBC,OAAOO,OAAOC,EAAQqF,UAAWpF,EAAOC,OAA8B,IAAIoC,QAAQjC,SAC1F,MAArBL,EAAQsF,WAAqBvN,OAAOE,eAAeC,KAAK8H,EAAS,cACjEV,EAAMC,uBAAuBC,OAAOO,OAAOC,EAAQsF,UAAWrF,EAAOC,OAA8B,IAAIoC,QAAQjC,SAC1F,MAArBL,EAAQuF,WAAqBxN,OAAOE,eAAeC,KAAK8H,EAAS,cACjEC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQuF,WACrDtF,GAYXmF,EAAkBhF,gBAAkB,SAAyBJ,EAASC,GAClE,OAAO9C,KAAK4C,OAAOC,EAASC,GAAQI,UAcxC+E,EAAkB9E,OAAS,SAAgBC,EAAQzI,GACzCyI,aAAkBrB,IACpBqB,EAASrB,EAAQ1E,OAAO+F,IAC5B,IAAIC,OAAiBC,IAAX3I,EAAuByI,EAAOG,IAAMH,EAAOI,IAAM7I,EAAQkI,EAAU,IAAIV,EAAMC,uBAAuB6F,kBAC9G,MAAO7E,EAAOI,IAAMH,EAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDZ,EAAQrD,KAAO4D,EAAO+D,QACtB,MACJ,KAAK,EACDtE,EAAQqF,UAAY/F,EAAMC,uBAAuBC,OAAOc,OAAOC,EAAQA,EAAOL,UAC9E,MACJ,KAAK,EACDF,EAAQsF,UAAYhG,EAAMC,uBAAuBC,OAAOc,OAAOC,EAAQA,EAAOL,UAC9E,MACJ,KAAK,EACDF,EAAQuF,UAAYhF,EAAOJ,SAC3B,MACJ,QACII,EAAOM,SAAe,EAAND,GAChB,OAGR,OAAOZ,GAaXoF,EAAkBtE,gBAAkB,SAAyBP,GAGzD,OAFMA,aAAkBrB,IACpBqB,EAAS,IAAIrB,EAAQqB,IAClBpD,KAAKmD,OAAOC,EAAQA,EAAOL,WAWtCkF,EAAkBrE,OAAS,SAAgBf,GACvC,GAAuB,WAAnB,eAAOA,IAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQrD,MAAgBqD,EAAQ/H,eAAe,QAC/C,OAAQ+H,EAAQrD,MAChB,QACI,MAAO,4BACX,KAAK,EACL,KAAK,EACL,KAAK,EACD,MAER,GAAyB,MAArBqD,EAAQqF,WAAqBrF,EAAQ/H,eAAe,aAAc,CAClE,IAAIwK,EAAQnD,EAAMC,uBAAuBC,OAAOuB,OAAOf,EAAQqF,WAC/D,GAAI5C,EACA,MAAO,aAAeA,EAE9B,GAAyB,MAArBzC,EAAQsF,WAAqBtF,EAAQ/H,eAAe,aAAc,CAClE,IAAIwK,EAAQnD,EAAMC,uBAAuBC,OAAOuB,OAAOf,EAAQsF,WAC/D,GAAI7C,EACA,MAAO,aAAeA,EAE9B,OAAyB,MAArBzC,EAAQuF,YAAqBvF,EAAQ/H,eAAe,cAC/CoH,EAAM2B,UAAUhB,EAAQuF,YAAgBvF,EAAQuF,WAAalG,EAAM2B,UAAUhB,EAAQuF,UAAUtE,MAAQ5B,EAAM2B,UAAUhB,EAAQuF,UAAUrE,MAE3I,KADQ,oCAYnBkE,EAAkBjE,WAAa,SAAoBvG,GAC/C,GAAIA,aAAkB0E,EAAMC,uBAAuB6F,kBAC/C,OAAOxK,EACX,IAAIoF,EAAU,IAAIV,EAAMC,uBAAuB6F,kBAC/C,OAAQxK,EAAO+B,MACf,IAAK,WACL,KAAK,EACDqD,EAAQrD,KAAO,EACf,MACJ,IAAK,UACL,KAAK,EACDqD,EAAQrD,KAAO,EACf,MACJ,IAAK,cACL,KAAK,EACDqD,EAAQrD,KAAO,EACf,MAEJ,GAAwB,MAApB/B,EAAOyK,UAAmB,CAC1B,GAAgC,WAA5B,eAAOzK,EAAOyK,WACd,MAAM3C,UAAU,wEACpB1C,EAAQqF,UAAY/F,EAAMC,uBAAuBC,OAAO2B,WAAWvG,EAAOyK,WAE9E,GAAwB,MAApBzK,EAAO0K,UAAmB,CAC1B,GAAgC,WAA5B,eAAO1K,EAAO0K,WACd,MAAM5C,UAAU,wEACpB1C,EAAQsF,UAAYhG,EAAMC,uBAAuBC,OAAO2B,WAAWvG,EAAO0K,WAW9E,OATwB,MAApB1K,EAAO2K,YACHlG,EAAMO,MACLI,EAAQuF,UAAYlG,EAAMO,KAAKwB,UAAUxG,EAAO2K,YAAYlE,UAAW,EACvC,kBAArBzG,EAAO2K,UACnBvF,EAAQuF,UAAYjE,SAAS1G,EAAO2K,UAAW,IACd,kBAArB3K,EAAO2K,UACnBvF,EAAQuF,UAAY3K,EAAO2K,UACM,WAA5B,eAAO3K,EAAO2K,aACnBvF,EAAQuF,UAAY,IAAIlG,EAAMkC,SAAS3G,EAAO2K,UAAUtE,MAAQ,EAAGrG,EAAO2K,UAAUrE,OAAS,GAAGM,UAAS,KAC1GxB,GAYXoF,EAAkB3D,SAAW,SAAkBzB,EAAS0B,GAC/CA,IACDA,EAAU,IACd,IAAI9G,EAAS,GACb,GAAI8G,EAAQC,SAIR,GAHA/G,EAAO+B,KAAO+E,EAAQsD,QAAUjI,OAAS,WAAa,EACtDnC,EAAOyK,UAAY,KACnBzK,EAAO0K,UAAY,KACfjG,EAAMO,KAAM,CACZ,IAAIgC,EAAO,IAAIvC,EAAMO,KAAK,EAAG,GAAG,GAChChF,EAAO2K,UAAY7D,EAAQG,QAAU9E,OAAS6E,EAAKE,WAAaJ,EAAQG,QAAUE,OAASH,EAAKJ,WAAaI,OAE7GhH,EAAO2K,UAAY7D,EAAQG,QAAU9E,OAAS,IAAM,EAa5D,OAXoB,MAAhBiD,EAAQrD,MAAgBqD,EAAQ/H,eAAe,UAC/C2C,EAAO+B,KAAO+E,EAAQsD,QAAUjI,OAASuC,EAAMC,uBAAuB6F,kBAAkBH,KAAKjF,EAAQrD,MAAQqD,EAAQrD,MAChG,MAArBqD,EAAQqF,WAAqBrF,EAAQ/H,eAAe,eACpD2C,EAAOyK,UAAY/F,EAAMC,uBAAuBC,OAAOiC,SAASzB,EAAQqF,UAAW3D,IAC9D,MAArB1B,EAAQsF,WAAqBtF,EAAQ/H,eAAe,eACpD2C,EAAO0K,UAAYhG,EAAMC,uBAAuBC,OAAOiC,SAASzB,EAAQsF,UAAW5D,IAC9D,MAArB1B,EAAQuF,WAAqBvF,EAAQ/H,eAAe,eACnB,kBAAtB+H,EAAQuF,UACf3K,EAAO2K,UAAY7D,EAAQG,QAAU9E,OAASA,OAAOiD,EAAQuF,WAAavF,EAAQuF,UAElF3K,EAAO2K,UAAY7D,EAAQG,QAAU9E,OAASsC,EAAMO,KAAK5H,UAAU8J,SAAS5J,KAAK8H,EAAQuF,WAAa7D,EAAQG,QAAUE,OAAS,IAAI1C,EAAMkC,SAASvB,EAAQuF,UAAUtE,MAAQ,EAAGjB,EAAQuF,UAAUrE,OAAS,GAAGM,UAAS,GAAQxB,EAAQuF,WACzO3K,GAUXwK,EAAkBpN,UAAUgK,OAAS,WACjC,OAAO7E,KAAK8E,YAAYR,SAAStE,KAAMgC,UAAe+C,gBAW1DkD,EAAkBH,KAAQ,WACtB,IAAMC,EAAa,GAAIC,EAASpN,OAAOyC,OAAO0K,GAI9C,OAHAC,EAAOD,EAAW,GAAK,YAAc,EACrCC,EAAOD,EAAW,GAAK,WAAa,EACpCC,EAAOD,EAAW,GAAK,eAAiB,EACjCC,EALe,GAQnBC,EArTiC,GAwT5C7F,EAAuBiG,gBAAmB,WAmCtC,SAASA,EAAgB/F,GAIrB,GAHAtC,KAAKsI,sBAAwB,GAC7BtI,KAAKyB,WAAa,GAClBzB,KAAKuI,gBAAkB,GACnBjG,EACA,IAAK,IAAIC,EAAO3H,OAAO2H,KAAKD,GAAa7H,EAAI,EAAGA,EAAI8H,EAAK5H,SAAUF,EACpC,MAAvB6H,EAAWC,EAAK9H,MAChBuF,KAAKuC,EAAK9H,IAAM6H,EAAWC,EAAK9H,KAipBhD,OAxoBA4N,EAAgBxN,UAAUmG,cAAgB,GAQ1CqH,EAAgBxN,UAAU2N,gBAAiB,EAQ3CH,EAAgBxN,UAAU4N,gBAAkB,GAQ5CJ,EAAgBxN,UAAU6N,eAAiB,GAQ3CL,EAAgBxN,UAAUyN,sBAAwBpG,EAAM+C,WAQxDoD,EAAgBxN,UAAU8N,iBAAmB,KAQ7CN,EAAgBxN,UAAU+N,iBAAmB,KAQ7CP,EAAgBxN,UAAU4G,WAAaS,EAAM+C,WAQ7CoD,EAAgBxN,UAAUgO,qBAAsB,EAQhDR,EAAgBxN,UAAUiO,mBAAqB,KAQ/CT,EAAgBxN,UAAUkO,eAAiB,KAQ3CV,EAAgBxN,UAAUmO,kBAAoB,GAQ9CX,EAAgBxN,UAAUoO,aAAe/G,EAAMwD,UAAU,IAQzD2C,EAAgBxN,UAAUqO,cAAgB,KAQ1Cb,EAAgBxN,UAAUsO,UAAY,KAQtCd,EAAgBxN,UAAUuO,SAAW,EAQrCf,EAAgBxN,UAAU4K,QAAU,GAQpC4C,EAAgBxN,UAAU0N,gBAAkBrG,EAAM+C,WAQlDoD,EAAgBxN,UAAUuG,gBAAkBc,EAAMO,KAAOP,EAAMO,KAAKC,SAAS,EAAE,GAAE,GAAQ,EAUzF2F,EAAgBhL,OAAS,SAAgBiF,GACrC,OAAO,IAAI+F,EAAgB/F,IAY/B+F,EAAgBzF,OAAS,SAAgBC,EAASC,GAU9C,GATKA,IACDA,EAASb,EAAQ5E,UACrByF,EAAOC,OAA8B,IAAIyD,OAAO3D,EAAQ7B,eAC1B,MAA1B6B,EAAQ2F,gBAA0B5N,OAAOE,eAAeC,KAAK8H,EAAS,mBACtEC,EAAOC,OAA8B,IAAIsG,KAAKxG,EAAQ2F,gBAC3B,MAA3B3F,EAAQ4F,iBAA2B7N,OAAOE,eAAeC,KAAK8H,EAAS,oBACvEC,EAAOC,OAA8B,IAAIyD,OAAO3D,EAAQ4F,iBAC9B,MAA1B5F,EAAQ6F,gBAA0B9N,OAAOE,eAAeC,KAAK8H,EAAS,mBACtEC,EAAOC,OAA8B,IAAIyD,OAAO3D,EAAQ6F,gBACvB,MAAjC7F,EAAQyF,uBAAiCzF,EAAQyF,sBAAsB3N,OACvE,IAAK,IAAIF,EAAI,EAAGA,EAAIoI,EAAQyF,sBAAsB3N,SAAUF,EACxD0H,EAAMC,uBAAuB4C,WAAWE,UAAUtC,OAAOC,EAAQyF,sBAAsB7N,GAAIqI,EAAOC,OAA8B,IAAIoC,QAAQjC,SAKpJ,GAJgC,MAA5BL,EAAQ8F,kBAA4B/N,OAAOE,eAAeC,KAAK8H,EAAS,qBACxEV,EAAMC,uBAAuB4D,cAAcpD,OAAOC,EAAQ8F,iBAAkB7F,EAAOC,OAA8B,IAAIoC,QAAQjC,SACjG,MAA5BL,EAAQ+F,kBAA4BhO,OAAOE,eAAeC,KAAK8H,EAAS,qBACxEV,EAAMC,uBAAuB4D,cAAcpD,OAAOC,EAAQ+F,iBAAkB9F,EAAOC,OAA8B,IAAIoC,QAAQjC,SACvG,MAAtBL,EAAQpB,YAAsBoB,EAAQpB,WAAW9G,OACjD,IAAK,IAAIF,EAAI,EAAGA,EAAIoI,EAAQpB,WAAW9G,SAAUF,EAC7C0H,EAAMC,uBAAuBqE,iBAAiB7D,OAAOC,EAAQpB,WAAWhH,GAAIqI,EAAOC,OAA8B,IAAIoC,QAAQjC,SAmBrI,GAlBmC,MAA/BL,EAAQgG,qBAA+BjO,OAAOE,eAAeC,KAAK8H,EAAS,wBAC3EC,EAAOC,OAA8B,IAAIsG,KAAKxG,EAAQgG,qBACxB,MAA9BhG,EAAQiG,oBAA8BlO,OAAOE,eAAeC,KAAK8H,EAAS,uBAC1EV,EAAMC,uBAAuBC,OAAOO,OAAOC,EAAQiG,mBAAoBhG,EAAOC,OAA+B,IAAIoC,QAAQjC,SAC/F,MAA1BL,EAAQkG,gBAA0BnO,OAAOE,eAAeC,KAAK8H,EAAS,mBACtEV,EAAMC,uBAAuBC,OAAOO,OAAOC,EAAQkG,eAAgBjG,EAAOC,OAA+B,IAAIoC,QAAQjC,SACxF,MAA7BL,EAAQmG,mBAA6BpO,OAAOE,eAAeC,KAAK8H,EAAS,sBACzEC,EAAOC,OAA+B,IAAIyD,OAAO3D,EAAQmG,mBACjC,MAAxBnG,EAAQoG,cAAwBrO,OAAOE,eAAeC,KAAK8H,EAAS,iBACpEC,EAAOC,OAA+B,KAAK6C,MAAM/C,EAAQoG,cAChC,MAAzBpG,EAAQqG,eAAyBtO,OAAOE,eAAeC,KAAK8H,EAAS,kBACrEV,EAAMC,uBAAuBC,OAAOO,OAAOC,EAAQqG,cAAepG,EAAOC,OAA+B,KAAKoC,QAAQjC,SAChG,MAArBL,EAAQsG,WAAqBvO,OAAOE,eAAeC,KAAK8H,EAAS,cACjEV,EAAMC,uBAAuBC,OAAOO,OAAOC,EAAQsG,UAAWrG,EAAOC,OAA+B,KAAKoC,QAAQjC,SAC7F,MAApBL,EAAQuG,UAAoBxO,OAAOE,eAAeC,KAAK8H,EAAS,aAChEC,EAAOC,OAA+B,KAAKA,OAAOF,EAAQuG,UACvC,MAAnBvG,EAAQ4C,SAAmB7K,OAAOE,eAAeC,KAAK8H,EAAS,YAC/DC,EAAOC,OAA+B,KAAKyD,OAAO3D,EAAQ4C,SAC/B,MAA3B5C,EAAQ0F,iBAA2B1F,EAAQ0F,gBAAgB5N,OAC3D,IAAK,IAAIF,EAAI,EAAGA,EAAIoI,EAAQ0F,gBAAgB5N,SAAUF,EAClD0H,EAAMC,uBAAuB6F,kBAAkBrF,OAAOC,EAAQ0F,gBAAgB9N,GAAIqI,EAAOC,OAA+B,KAAKoC,QAAQjC,SAG7I,OAF+B,MAA3BL,EAAQzB,iBAA2BxG,OAAOE,eAAeC,KAAK8H,EAAS,oBACvEC,EAAOC,OAA+B,KAAKC,OAAOH,EAAQzB,iBACvD0B,GAYXuF,EAAgBpF,gBAAkB,SAAyBJ,EAASC,GAChE,OAAO9C,KAAK4C,OAAOC,EAASC,GAAQI,UAcxCmF,EAAgBlF,OAAS,SAAgBC,EAAQzI,GACvCyI,aAAkBrB,IACpBqB,EAASrB,EAAQ1E,OAAO+F,IAC5B,IAAIC,OAAiBC,IAAX3I,EAAuByI,EAAOG,IAAMH,EAAOI,IAAM7I,EAAQkI,EAAU,IAAIV,EAAMC,uBAAuBiG,gBAC9G,MAAOjF,EAAOI,IAAMH,EAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDZ,EAAQ7B,cAAgBoC,EAAOoD,SAC/B,MACJ,KAAK,EACD3D,EAAQ2F,eAAiBpF,EAAOiG,OAChC,MACJ,KAAK,EACDxG,EAAQ4F,gBAAkBrF,EAAOoD,SACjC,MACJ,KAAK,EACD3D,EAAQ6F,eAAiBtF,EAAOoD,SAChC,MACJ,KAAK,EACK3D,EAAQyF,uBAAyBzF,EAAQyF,sBAAsB3N,SACjEkI,EAAQyF,sBAAwB,IACpCzF,EAAQyF,sBAAsBrN,KAAKkH,EAAMC,uBAAuB4C,WAAWE,UAAU/B,OAAOC,EAAQA,EAAOL,WAC3G,MACJ,KAAK,EACDF,EAAQ8F,iBAAmBxG,EAAMC,uBAAuB4D,cAAc7C,OAAOC,EAAQA,EAAOL,UAC5F,MACJ,KAAK,EACDF,EAAQ+F,iBAAmBzG,EAAMC,uBAAuB4D,cAAc7C,OAAOC,EAAQA,EAAOL,UAC5F,MACJ,KAAK,EACKF,EAAQpB,YAAcoB,EAAQpB,WAAW9G,SAC3CkI,EAAQpB,WAAa,IACzBoB,EAAQpB,WAAWxG,KAAKkH,EAAMC,uBAAuBqE,iBAAiBtD,OAAOC,EAAQA,EAAOL,WAC5F,MACJ,KAAK,EACDF,EAAQgG,oBAAsBzF,EAAOiG,OACrC,MACJ,KAAK,GACDxG,EAAQiG,mBAAqB3G,EAAMC,uBAAuBC,OAAOc,OAAOC,EAAQA,EAAOL,UACvF,MACJ,KAAK,GACDF,EAAQkG,eAAiB5G,EAAMC,uBAAuBC,OAAOc,OAAOC,EAAQA,EAAOL,UACnF,MACJ,KAAK,GACDF,EAAQmG,kBAAoB5F,EAAOoD,SACnC,MACJ,KAAK,GACD3D,EAAQoG,aAAe7F,EAAOwC,QAC9B,MACJ,KAAK,GACD/C,EAAQqG,cAAgB/G,EAAMC,uBAAuBC,OAAOc,OAAOC,EAAQA,EAAOL,UAClF,MACJ,KAAK,GACDF,EAAQsG,UAAYhH,EAAMC,uBAAuBC,OAAOc,OAAOC,EAAQA,EAAOL,UAC9E,MACJ,KAAK,GACDF,EAAQuG,SAAWhG,EAAOL,SAC1B,MACJ,KAAK,GACDF,EAAQ4C,QAAUrC,EAAOoD,SACzB,MACJ,KAAK,GACK3D,EAAQ0F,iBAAmB1F,EAAQ0F,gBAAgB5N,SACrDkI,EAAQ0F,gBAAkB,IAC9B1F,EAAQ0F,gBAAgBtN,KAAKkH,EAAMC,uBAAuB6F,kBAAkB9E,OAAOC,EAAQA,EAAOL,WAClG,MACJ,KAAK,GACDF,EAAQzB,gBAAkBgC,EAAOJ,SACjC,MACJ,QACII,EAAOM,SAAe,EAAND,GAChB,OAGR,IAAKZ,EAAQ/H,eAAe,iBACxB,MAAMoH,EAAMoF,cAAc,mCAAoC,CAAEC,SAAU1E,IAC9E,OAAOA,GAaXwF,EAAgB1E,gBAAkB,SAAyBP,GAGvD,OAFMA,aAAkBrB,IACpBqB,EAAS,IAAIrB,EAAQqB,IAClBpD,KAAKmD,OAAOC,EAAQA,EAAOL,WAWtCsF,EAAgBzE,OAAS,SAAgBf,GACrC,GAAuB,WAAnB,eAAOA,IAAoC,OAAZA,EAC/B,MAAO,kBACX,IAAKX,EAAM4D,SAASjD,EAAQ7B,eACxB,MAAO,iCACX,GAA8B,MAA1B6B,EAAQ2F,gBAA0B3F,EAAQ/H,eAAe,mBACnB,mBAA3B+H,EAAQ2F,eACf,MAAO,mCACf,GAA+B,MAA3B3F,EAAQ4F,iBAA2B5F,EAAQ/H,eAAe,qBACrDoH,EAAM4D,SAASjD,EAAQ4F,iBACxB,MAAO,mCACf,GAA8B,MAA1B5F,EAAQ6F,gBAA0B7F,EAAQ/H,eAAe,oBACpDoH,EAAM4D,SAASjD,EAAQ6F,gBACxB,MAAO,kCACf,GAAqC,MAAjC7F,EAAQyF,uBAAiCzF,EAAQ/H,eAAe,yBAA0B,CAC1F,IAAKsK,MAAMC,QAAQxC,EAAQyF,uBACvB,MAAO,wCACX,IAAK,IAAI7N,EAAI,EAAGA,EAAIoI,EAAQyF,sBAAsB3N,SAAUF,EAAG,CAC3D,IAAI6K,EAAQnD,EAAMC,uBAAuB4C,WAAWE,UAAUtB,OAAOf,EAAQyF,sBAAsB7N,IACnG,GAAI6K,EACA,MAAO,yBAA2BA,GAG9C,GAAgC,MAA5BzC,EAAQ8F,kBAA4B9F,EAAQ/H,eAAe,oBAAqB,CAChF,IAAIwK,EAAQnD,EAAMC,uBAAuB4D,cAAcpC,OAAOf,EAAQ8F,kBACtE,GAAIrD,EACA,MAAO,oBAAsBA,EAErC,GAAgC,MAA5BzC,EAAQ+F,kBAA4B/F,EAAQ/H,eAAe,oBAAqB,CAChF,IAAIwK,EAAQnD,EAAMC,uBAAuB4D,cAAcpC,OAAOf,EAAQ+F,kBACtE,GAAItD,EACA,MAAO,oBAAsBA,EAErC,GAA0B,MAAtBzC,EAAQpB,YAAsBoB,EAAQ/H,eAAe,cAAe,CACpE,IAAKsK,MAAMC,QAAQxC,EAAQpB,YACvB,MAAO,6BACX,IAAK,IAAIhH,EAAI,EAAGA,EAAIoI,EAAQpB,WAAW9G,SAAUF,EAAG,CAChD,IAAI6K,EAAQnD,EAAMC,uBAAuBqE,iBAAiB7C,OAAOf,EAAQpB,WAAWhH,IACpF,GAAI6K,EACA,MAAO,cAAgBA,GAGnC,GAAmC,MAA/BzC,EAAQgG,qBAA+BhG,EAAQ/H,eAAe,wBACnB,mBAAhC+H,EAAQgG,oBACf,MAAO,wCACf,GAAkC,MAA9BhG,EAAQiG,oBAA8BjG,EAAQ/H,eAAe,sBAAuB,CACpF,IAAIwK,EAAQnD,EAAMC,uBAAuBC,OAAOuB,OAAOf,EAAQiG,oBAC/D,GAAIxD,EACA,MAAO,sBAAwBA,EAEvC,GAA8B,MAA1BzC,EAAQkG,gBAA0BlG,EAAQ/H,eAAe,kBAAmB,CAC5E,IAAIwK,EAAQnD,EAAMC,uBAAuBC,OAAOuB,OAAOf,EAAQkG,gBAC/D,GAAIzD,EACA,MAAO,kBAAoBA,EAEnC,GAAiC,MAA7BzC,EAAQmG,mBAA6BnG,EAAQ/H,eAAe,uBACvDoH,EAAM4D,SAASjD,EAAQmG,mBACxB,MAAO,qCACf,GAA4B,MAAxBnG,EAAQoG,cAAwBpG,EAAQ/H,eAAe,mBACjD+H,EAAQoG,cAAuD,kBAAhCpG,EAAQoG,aAAatO,QAAuBuH,EAAM4D,SAASjD,EAAQoG,eACpG,MAAO,gCACf,GAA6B,MAAzBpG,EAAQqG,eAAyBrG,EAAQ/H,eAAe,iBAAkB,CAC1E,IAAIwK,EAAQnD,EAAMC,uBAAuBC,OAAOuB,OAAOf,EAAQqG,eAC/D,GAAI5D,EACA,MAAO,iBAAmBA,EAElC,GAAyB,MAArBzC,EAAQsG,WAAqBtG,EAAQ/H,eAAe,aAAc,CAClE,IAAIwK,EAAQnD,EAAMC,uBAAuBC,OAAOuB,OAAOf,EAAQsG,WAC/D,GAAI7D,EACA,MAAO,aAAeA,EAE9B,GAAwB,MAApBzC,EAAQuG,UAAoBvG,EAAQ/H,eAAe,cAC9CoH,EAAM2B,UAAUhB,EAAQuG,UACzB,MAAO,6BACf,GAAuB,MAAnBvG,EAAQ4C,SAAmB5C,EAAQ/H,eAAe,aAC7CoH,EAAM4D,SAASjD,EAAQ4C,SACxB,MAAO,2BACf,GAA+B,MAA3B5C,EAAQ0F,iBAA2B1F,EAAQ/H,eAAe,mBAAoB,CAC9E,IAAKsK,MAAMC,QAAQxC,EAAQ0F,iBACvB,MAAO,kCACX,IAAK,IAAI9N,EAAI,EAAGA,EAAIoI,EAAQ0F,gBAAgB5N,SAAUF,EAAG,CACrD,IAAI6K,EAAQnD,EAAMC,uBAAuB6F,kBAAkBrE,OAAOf,EAAQ0F,gBAAgB9N,IAC1F,GAAI6K,EACA,MAAO,mBAAqBA,GAGxC,OAA+B,MAA3BzC,EAAQzB,kBAA2ByB,EAAQ/H,eAAe,oBACrDoH,EAAM2B,UAAUhB,EAAQzB,kBAAsByB,EAAQzB,iBAAmBc,EAAM2B,UAAUhB,EAAQzB,gBAAgB0C,MAAQ5B,EAAM2B,UAAUhB,EAAQzB,gBAAgB2C,MAEnK,KADQ,0CAYnBsE,EAAgBrE,WAAa,SAAoBvG,GAC7C,GAAIA,aAAkB0E,EAAMC,uBAAuBiG,gBAC/C,OAAO5K,EACX,IAAIoF,EAAU,IAAIV,EAAMC,uBAAuBiG,gBAS/C,GAR4B,MAAxB5K,EAAOuD,gBACP6B,EAAQ7B,cAAgBpB,OAAOnC,EAAOuD,gBACb,MAAzBvD,EAAO+K,iBACP3F,EAAQ2F,eAAiBc,QAAQ7L,EAAO+K,iBACd,MAA1B/K,EAAOgL,kBACP5F,EAAQ4F,gBAAkB7I,OAAOnC,EAAOgL,kBACf,MAAzBhL,EAAOiL,iBACP7F,EAAQ6F,eAAiB9I,OAAOnC,EAAOiL,iBACvCjL,EAAO6K,sBAAuB,CAC9B,IAAKlD,MAAMC,QAAQ5H,EAAO6K,uBACtB,MAAM/C,UAAU,iFACpB1C,EAAQyF,sBAAwB,GAChC,IAAK,IAAI7N,EAAI,EAAGA,EAAIgD,EAAO6K,sBAAsB3N,SAAUF,EAAG,CAC1D,GAA+C,WAA3C,eAAOgD,EAAO6K,sBAAsB7N,IACpC,MAAM8K,UAAU,kFACpB1C,EAAQyF,sBAAsB7N,GAAK0H,EAAMC,uBAAuB4C,WAAWE,UAAUlB,WAAWvG,EAAO6K,sBAAsB7N,KAGrI,GAA+B,MAA3BgD,EAAOkL,iBAA0B,CACjC,GAAuC,WAAnC,eAAOlL,EAAOkL,kBACd,MAAMpD,UAAU,6EACpB1C,EAAQ8F,iBAAmBxG,EAAMC,uBAAuB4D,cAAchC,WAAWvG,EAAOkL,kBAE5F,GAA+B,MAA3BlL,EAAOmL,iBAA0B,CACjC,GAAuC,WAAnC,eAAOnL,EAAOmL,kBACd,MAAMrD,UAAU,6EACpB1C,EAAQ+F,iBAAmBzG,EAAMC,uBAAuB4D,cAAchC,WAAWvG,EAAOmL,kBAE5F,GAAInL,EAAOgE,WAAY,CACnB,IAAK2D,MAAMC,QAAQ5H,EAAOgE,YACtB,MAAM8D,UAAU,sEACpB1C,EAAQpB,WAAa,GACrB,IAAK,IAAIhH,EAAI,EAAGA,EAAIgD,EAAOgE,WAAW9G,SAAUF,EAAG,CAC/C,GAAoC,WAAhC,eAAOgD,EAAOgE,WAAWhH,IACzB,MAAM8K,UAAU,uEACpB1C,EAAQpB,WAAWhH,GAAK0H,EAAMC,uBAAuBqE,iBAAiBzC,WAAWvG,EAAOgE,WAAWhH,KAK3G,GAFkC,MAA9BgD,EAAOoL,sBACPhG,EAAQgG,oBAAsBS,QAAQ7L,EAAOoL,sBAChB,MAA7BpL,EAAOqL,mBAA4B,CACnC,GAAyC,WAArC,eAAOrL,EAAOqL,oBACd,MAAMvD,UAAU,+EACpB1C,EAAQiG,mBAAqB3G,EAAMC,uBAAuBC,OAAO2B,WAAWvG,EAAOqL,oBAEvF,GAA6B,MAAzBrL,EAAOsL,eAAwB,CAC/B,GAAqC,WAAjC,eAAOtL,EAAOsL,gBACd,MAAMxD,UAAU,2EACpB1C,EAAQkG,eAAiB5G,EAAMC,uBAAuBC,OAAO2B,WAAWvG,EAAOsL,gBASnF,GAPgC,MAA5BtL,EAAOuL,oBACPnG,EAAQmG,kBAAoBpJ,OAAOnC,EAAOuL,oBACnB,MAAvBvL,EAAOwL,eAC4B,kBAAxBxL,EAAOwL,aACd/G,EAAM6D,OAAO5C,OAAO1F,EAAOwL,aAAcpG,EAAQoG,aAAe/G,EAAMwD,UAAUxD,EAAM6D,OAAOpL,OAAO8C,EAAOwL,eAAgB,GACtHxL,EAAOwL,aAAatO,SACzBkI,EAAQoG,aAAexL,EAAOwL,eACV,MAAxBxL,EAAOyL,cAAuB,CAC9B,GAAoC,WAAhC,eAAOzL,EAAOyL,eACd,MAAM3D,UAAU,0EACpB1C,EAAQqG,cAAgB/G,EAAMC,uBAAuBC,OAAO2B,WAAWvG,EAAOyL,eAElF,GAAwB,MAApBzL,EAAO0L,UAAmB,CAC1B,GAAgC,WAA5B,eAAO1L,EAAO0L,WACd,MAAM5D,UAAU,sEACpB1C,EAAQsG,UAAYhH,EAAMC,uBAAuBC,OAAO2B,WAAWvG,EAAO0L,WAM9E,GAJuB,MAAnB1L,EAAO2L,WACPvG,EAAQuG,SAAW3L,EAAO2L,WAAa,GACrB,MAAlB3L,EAAOgI,UACP5C,EAAQ4C,QAAU7F,OAAOnC,EAAOgI,UAChChI,EAAO8K,gBAAiB,CACxB,IAAKnD,MAAMC,QAAQ5H,EAAO8K,iBACtB,MAAMhD,UAAU,2EACpB1C,EAAQ0F,gBAAkB,GAC1B,IAAK,IAAI9N,EAAI,EAAGA,EAAIgD,EAAO8K,gBAAgB5N,SAAUF,EAAG,CACpD,GAAyC,WAArC,eAAOgD,EAAO8K,gBAAgB9N,IAC9B,MAAM8K,UAAU,4EACpB1C,EAAQ0F,gBAAgB9N,GAAK0H,EAAMC,uBAAuB6F,kBAAkBjE,WAAWvG,EAAO8K,gBAAgB9N,KAYtH,OAT8B,MAA1BgD,EAAO2D,kBACHc,EAAMO,MACLI,EAAQzB,gBAAkBc,EAAMO,KAAKwB,UAAUxG,EAAO2D,kBAAkB8C,UAAW,EAC7C,kBAA3BzG,EAAO2D,gBACnByB,EAAQzB,gBAAkB+C,SAAS1G,EAAO2D,gBAAiB,IACpB,kBAA3B3D,EAAO2D,gBACnByB,EAAQzB,gBAAkB3D,EAAO2D,gBACM,WAAlC,eAAO3D,EAAO2D,mBACnByB,EAAQzB,gBAAkB,IAAIc,EAAMkC,SAAS3G,EAAO2D,gBAAgB0C,MAAQ,EAAGrG,EAAO2D,gBAAgB2C,OAAS,GAAGM,UAAS,KAC5HxB,GAYXwF,EAAgB/D,SAAW,SAAkBzB,EAAS0B,GAC7CA,IACDA,EAAU,IACd,IAAI9G,EAAS,GAMb,IALI8G,EAAQiB,QAAUjB,EAAQC,YAC1B/G,EAAO6K,sBAAwB,GAC/B7K,EAAOgE,WAAa,GACpBhE,EAAO8K,gBAAkB,IAEzBhE,EAAQC,SAsBR,GArBA/G,EAAOuD,cAAgB,GACvBvD,EAAO+K,gBAAiB,EACxB/K,EAAOgL,gBAAkB,GACzBhL,EAAOiL,eAAiB,GACxBjL,EAAOkL,iBAAmB,KAC1BlL,EAAOmL,iBAAmB,KAC1BnL,EAAOoL,qBAAsB,EAC7BpL,EAAOqL,mBAAqB,KAC5BrL,EAAOsL,eAAiB,KACxBtL,EAAOuL,kBAAoB,GACvBzE,EAAQqB,QAAUhG,OAClBnC,EAAOwL,aAAe,IAEtBxL,EAAOwL,aAAe,GAClB1E,EAAQqB,QAAUR,QAClB3H,EAAOwL,aAAe/G,EAAMwD,UAAUjI,EAAOwL,gBAErDxL,EAAOyL,cAAgB,KACvBzL,EAAO0L,UAAY,KACnB1L,EAAO2L,SAAW,EAClB3L,EAAOgI,QAAU,GACbvD,EAAMO,KAAM,CACZ,IAAIgC,EAAO,IAAIvC,EAAMO,KAAK,EAAG,GAAG,GAChChF,EAAO2D,gBAAkBmD,EAAQG,QAAU9E,OAAS6E,EAAKE,WAAaJ,EAAQG,QAAUE,OAASH,EAAKJ,WAAaI,OAEnHhH,EAAO2D,gBAAkBmD,EAAQG,QAAU9E,OAAS,IAAM,EAUlE,GAR6B,MAAzBiD,EAAQ7B,eAAyB6B,EAAQ/H,eAAe,mBACxD2C,EAAOuD,cAAgB6B,EAAQ7B,eACL,MAA1B6B,EAAQ2F,gBAA0B3F,EAAQ/H,eAAe,oBACzD2C,EAAO+K,eAAiB3F,EAAQ2F,gBACL,MAA3B3F,EAAQ4F,iBAA2B5F,EAAQ/H,eAAe,qBAC1D2C,EAAOgL,gBAAkB5F,EAAQ4F,iBACP,MAA1B5F,EAAQ6F,gBAA0B7F,EAAQ/H,eAAe,oBACzD2C,EAAOiL,eAAiB7F,EAAQ6F,gBAChC7F,EAAQyF,uBAAyBzF,EAAQyF,sBAAsB3N,OAAQ,CACvE8C,EAAO6K,sBAAwB,GAC/B,IAAK,IAAI3M,EAAI,EAAGA,EAAIkH,EAAQyF,sBAAsB3N,SAAUgB,EACxD8B,EAAO6K,sBAAsB3M,GAAKwG,EAAMC,uBAAuB4C,WAAWE,UAAUZ,SAASzB,EAAQyF,sBAAsB3M,GAAI4I,GAMvI,GAJgC,MAA5B1B,EAAQ8F,kBAA4B9F,EAAQ/H,eAAe,sBAC3D2C,EAAOkL,iBAAmBxG,EAAMC,uBAAuB4D,cAAc1B,SAASzB,EAAQ8F,iBAAkBpE,IAC5E,MAA5B1B,EAAQ+F,kBAA4B/F,EAAQ/H,eAAe,sBAC3D2C,EAAOmL,iBAAmBzG,EAAMC,uBAAuB4D,cAAc1B,SAASzB,EAAQ+F,iBAAkBrE,IACxG1B,EAAQpB,YAAcoB,EAAQpB,WAAW9G,OAAQ,CACjD8C,EAAOgE,WAAa,GACpB,IAAK,IAAI9F,EAAI,EAAGA,EAAIkH,EAAQpB,WAAW9G,SAAUgB,EAC7C8B,EAAOgE,WAAW9F,GAAKwG,EAAMC,uBAAuBqE,iBAAiBnC,SAASzB,EAAQpB,WAAW9F,GAAI4I,GAoB7G,GAlBmC,MAA/B1B,EAAQgG,qBAA+BhG,EAAQ/H,eAAe,yBAC9D2C,EAAOoL,oBAAsBhG,EAAQgG,qBACP,MAA9BhG,EAAQiG,oBAA8BjG,EAAQ/H,eAAe,wBAC7D2C,EAAOqL,mBAAqB3G,EAAMC,uBAAuBC,OAAOiC,SAASzB,EAAQiG,mBAAoBvE,IAC3E,MAA1B1B,EAAQkG,gBAA0BlG,EAAQ/H,eAAe,oBACzD2C,EAAOsL,eAAiB5G,EAAMC,uBAAuBC,OAAOiC,SAASzB,EAAQkG,eAAgBxE,IAChE,MAA7B1B,EAAQmG,mBAA6BnG,EAAQ/H,eAAe,uBAC5D2C,EAAOuL,kBAAoBnG,EAAQmG,mBACX,MAAxBnG,EAAQoG,cAAwBpG,EAAQ/H,eAAe,kBACvD2C,EAAOwL,aAAe1E,EAAQqB,QAAUhG,OAASsC,EAAM6D,OAAOnD,OAAOC,EAAQoG,aAAc,EAAGpG,EAAQoG,aAAatO,QAAU4J,EAAQqB,QAAUR,MAAQA,MAAMvK,UAAUkD,MAAMhD,KAAK8H,EAAQoG,cAAgBpG,EAAQoG,cACzL,MAAzBpG,EAAQqG,eAAyBrG,EAAQ/H,eAAe,mBACxD2C,EAAOyL,cAAgB/G,EAAMC,uBAAuBC,OAAOiC,SAASzB,EAAQqG,cAAe3E,IACtE,MAArB1B,EAAQsG,WAAqBtG,EAAQ/H,eAAe,eACpD2C,EAAO0L,UAAYhH,EAAMC,uBAAuBC,OAAOiC,SAASzB,EAAQsG,UAAW5E,IAC/D,MAApB1B,EAAQuG,UAAoBvG,EAAQ/H,eAAe,cACnD2C,EAAO2L,SAAWvG,EAAQuG,UACP,MAAnBvG,EAAQ4C,SAAmB5C,EAAQ/H,eAAe,aAClD2C,EAAOgI,QAAU5C,EAAQ4C,SACzB5C,EAAQ0F,iBAAmB1F,EAAQ0F,gBAAgB5N,OAAQ,CAC3D8C,EAAO8K,gBAAkB,GACzB,IAAK,IAAI5M,EAAI,EAAGA,EAAIkH,EAAQ0F,gBAAgB5N,SAAUgB,EAClD8B,EAAO8K,gBAAgB5M,GAAKwG,EAAMC,uBAAuB6F,kBAAkB3D,SAASzB,EAAQ0F,gBAAgB5M,GAAI4I,GAOxH,OAL+B,MAA3B1B,EAAQzB,iBAA2ByB,EAAQ/H,eAAe,qBACnB,kBAA5B+H,EAAQzB,gBACf3D,EAAO2D,gBAAkBmD,EAAQG,QAAU9E,OAASA,OAAOiD,EAAQzB,iBAAmByB,EAAQzB,gBAE9F3D,EAAO2D,gBAAkBmD,EAAQG,QAAU9E,OAASsC,EAAMO,KAAK5H,UAAU8J,SAAS5J,KAAK8H,EAAQzB,iBAAmBmD,EAAQG,QAAUE,OAAS,IAAI1C,EAAMkC,SAASvB,EAAQzB,gBAAgB0C,MAAQ,EAAGjB,EAAQzB,gBAAgB2C,OAAS,GAAGM,UAAS,GAAQxB,EAAQzB,iBACjQ3D,GAUX4K,EAAgBxN,UAAUgK,OAAS,WAC/B,OAAO7E,KAAK8E,YAAYR,SAAStE,KAAMgC,UAAe+C,gBAGnDsD,EA3rB+B,GA8rB1CjG,EAAuBmH,sBAAyB,WAmB5C,SAASA,EAAsBjH,GAE3B,GADAtC,KAAKwJ,eAAiB,GAClBlH,EACA,IAAK,IAAIC,EAAO3H,OAAO2H,KAAKD,GAAa7H,EAAI,EAAGA,EAAI8H,EAAK5H,SAAUF,EACpC,MAAvB6H,EAAWC,EAAK9H,MAChBuF,KAAKuC,EAAK9H,IAAM6H,EAAWC,EAAK9H,KA4OhD,OAnOA8O,EAAsB1O,UAAU0B,KAAO,GAQvCgN,EAAsB1O,UAAUoL,KAAO/D,EAAMO,KAAOP,EAAMO,KAAKC,SAAS,EAAE,GAAE,GAAQ,EAQpF6G,EAAsB1O,UAAU2O,eAAiBtH,EAAM+C,WAUvDsE,EAAsBlM,OAAS,SAAgBiF,GAC3C,OAAO,IAAIiH,EAAsBjH,IAYrCiH,EAAsB3G,OAAS,SAAgBC,EAASC,GAMpD,GALKA,IACDA,EAASb,EAAQ5E,UACrByF,EAAOC,OAA8B,IAAIyD,OAAO3D,EAAQtG,MACpC,MAAhBsG,EAAQoD,MAAgBrL,OAAOE,eAAeC,KAAK8H,EAAS,SAC5DC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQoD,MAC9B,MAA1BpD,EAAQ2G,gBAA0B3G,EAAQ2G,eAAe7O,OACzD,IAAK,IAAIF,EAAI,EAAGA,EAAIoI,EAAQ2G,eAAe7O,SAAUF,EACjDqI,EAAOC,OAA8B,IAAIyD,OAAO3D,EAAQ2G,eAAe/O,IAC/E,OAAOqI,GAYXyG,EAAsBtG,gBAAkB,SAAyBJ,EAASC,GACtE,OAAO9C,KAAK4C,OAAOC,EAASC,GAAQI,UAcxCqG,EAAsBpG,OAAS,SAAgBC,EAAQzI,GAC7CyI,aAAkBrB,IACpBqB,EAASrB,EAAQ1E,OAAO+F,IAC5B,IAAIC,OAAiBC,IAAX3I,EAAuByI,EAAOG,IAAMH,EAAOI,IAAM7I,EAAQkI,EAAU,IAAIV,EAAMC,uBAAuBmH,sBAC9G,MAAOnG,EAAOI,IAAMH,EAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDZ,EAAQtG,KAAO6G,EAAOoD,SACtB,MACJ,KAAK,EACD3D,EAAQoD,KAAO7C,EAAOJ,SACtB,MACJ,KAAK,EACKH,EAAQ2G,gBAAkB3G,EAAQ2G,eAAe7O,SACnDkI,EAAQ2G,eAAiB,IAC7B3G,EAAQ2G,eAAevO,KAAKmI,EAAOoD,UACnC,MACJ,QACIpD,EAAOM,SAAe,EAAND,GAChB,OAGR,IAAKZ,EAAQ/H,eAAe,QACxB,MAAMoH,EAAMoF,cAAc,0BAA2B,CAAEC,SAAU1E,IACrE,OAAOA,GAaX0G,EAAsB5F,gBAAkB,SAAyBP,GAG7D,OAFMA,aAAkBrB,IACpBqB,EAAS,IAAIrB,EAAQqB,IAClBpD,KAAKmD,OAAOC,EAAQA,EAAOL,WAWtCwG,EAAsB3F,OAAS,SAAgBf,GAC3C,GAAuB,WAAnB,eAAOA,IAAoC,OAAZA,EAC/B,MAAO,kBACX,IAAKX,EAAM4D,SAASjD,EAAQtG,MACxB,MAAO,wBACX,GAAoB,MAAhBsG,EAAQoD,MAAgBpD,EAAQ/H,eAAe,UAC1CoH,EAAM2B,UAAUhB,EAAQoD,SAAWpD,EAAQoD,MAAQ/D,EAAM2B,UAAUhB,EAAQoD,KAAKnC,MAAQ5B,EAAM2B,UAAUhB,EAAQoD,KAAKlC,OACtH,MAAO,8BACf,GAA8B,MAA1BlB,EAAQ2G,gBAA0B3G,EAAQ/H,eAAe,kBAAmB,CAC5E,IAAKsK,MAAMC,QAAQxC,EAAQ2G,gBACvB,MAAO,iCACX,IAAK,IAAI/O,EAAI,EAAGA,EAAIoI,EAAQ2G,eAAe7O,SAAUF,EACjD,IAAKyH,EAAM4D,SAASjD,EAAQ2G,eAAe/O,IACvC,MAAO,oCAEnB,OAAO,MAWX8O,EAAsBvF,WAAa,SAAoBvG,GACnD,GAAIA,aAAkB0E,EAAMC,uBAAuBmH,sBAC/C,OAAO9L,EACX,IAAIoF,EAAU,IAAIV,EAAMC,uBAAuBmH,sBAY/C,GAXmB,MAAf9L,EAAOlB,OACPsG,EAAQtG,KAAOqD,OAAOnC,EAAOlB,OACd,MAAfkB,EAAOwI,OACH/D,EAAMO,MACLI,EAAQoD,KAAO/D,EAAMO,KAAKwB,UAAUxG,EAAOwI,OAAO/B,UAAW,EAClC,kBAAhBzG,EAAOwI,KACnBpD,EAAQoD,KAAO9B,SAAS1G,EAAOwI,KAAM,IACT,kBAAhBxI,EAAOwI,KACnBpD,EAAQoD,KAAOxI,EAAOwI,KACM,WAAvB,eAAOxI,EAAOwI,QACnBpD,EAAQoD,KAAO,IAAI/D,EAAMkC,SAAS3G,EAAOwI,KAAKnC,MAAQ,EAAGrG,EAAOwI,KAAKlC,OAAS,GAAGM,UAAS,KAC9F5G,EAAO+L,eAAgB,CACvB,IAAKpE,MAAMC,QAAQ5H,EAAO+L,gBACtB,MAAMjE,UAAU,gFACpB1C,EAAQ2G,eAAiB,GACzB,IAAK,IAAI/O,EAAI,EAAGA,EAAIgD,EAAO+L,eAAe7O,SAAUF,EAChDoI,EAAQ2G,eAAe/O,GAAKmF,OAAOnC,EAAO+L,eAAe/O,IAEjE,OAAOoI,GAYX0G,EAAsBjF,SAAW,SAAkBzB,EAAS0B,GACnDA,IACDA,EAAU,IACd,IAAI9G,EAAS,GAGb,IAFI8G,EAAQiB,QAAUjB,EAAQC,YAC1B/G,EAAO+L,eAAiB,IACxBjF,EAAQC,SAER,GADA/G,EAAOlB,KAAO,GACV2F,EAAMO,KAAM,CACZ,IAAIgC,EAAO,IAAIvC,EAAMO,KAAK,EAAG,GAAG,GAChChF,EAAOwI,KAAO1B,EAAQG,QAAU9E,OAAS6E,EAAKE,WAAaJ,EAAQG,QAAUE,OAASH,EAAKJ,WAAaI,OAExGhH,EAAOwI,KAAO1B,EAAQG,QAAU9E,OAAS,IAAM,EASvD,GAPoB,MAAhBiD,EAAQtG,MAAgBsG,EAAQ/H,eAAe,UAC/C2C,EAAOlB,KAAOsG,EAAQtG,MACN,MAAhBsG,EAAQoD,MAAgBpD,EAAQ/H,eAAe,UACnB,kBAAjB+H,EAAQoD,KACfxI,EAAOwI,KAAO1B,EAAQG,QAAU9E,OAASA,OAAOiD,EAAQoD,MAAQpD,EAAQoD,KAExExI,EAAOwI,KAAO1B,EAAQG,QAAU9E,OAASsC,EAAMO,KAAK5H,UAAU8J,SAAS5J,KAAK8H,EAAQoD,MAAQ1B,EAAQG,QAAUE,OAAS,IAAI1C,EAAMkC,SAASvB,EAAQoD,KAAKnC,MAAQ,EAAGjB,EAAQoD,KAAKlC,OAAS,GAAGM,UAAS,GAAQxB,EAAQoD,MACxNpD,EAAQ2G,gBAAkB3G,EAAQ2G,eAAe7O,OAAQ,CACzD8C,EAAO+L,eAAiB,GACxB,IAAK,IAAI7N,EAAI,EAAGA,EAAIkH,EAAQ2G,eAAe7O,SAAUgB,EACjD8B,EAAO+L,eAAe7N,GAAKkH,EAAQ2G,eAAe7N,GAE1D,OAAO8B,GAUX8L,EAAsB1O,UAAUgK,OAAS,WACrC,OAAO7E,KAAK8E,YAAYR,SAAStE,KAAMgC,UAAe+C,gBAGnDwE,EApQqC,GAuQhDnH,EAAuBqH,yBAA4B,WAqB/C,SAASA,EAAyBnH,GAE9B,GADAtC,KAAK0J,OAAS,GACVpH,EACA,IAAK,IAAIC,EAAO3H,OAAO2H,KAAKD,GAAa7H,EAAI,EAAGA,EAAI8H,EAAK5H,SAAUF,EACpC,MAAvB6H,EAAWC,EAAK9H,MAChBuF,KAAKuC,EAAK9H,IAAM6H,EAAWC,EAAK9H,KA6QhD,OApQAgP,EAAyB5O,UAAU6O,OAASxH,EAAM+C,WAQlDwE,EAAyB5O,UAAU8O,iBAAkB,EAQrDF,EAAyB5O,UAAU+O,aAAc,EAQjDH,EAAyB5O,UAAUgP,qBAAuB,GAQ1DJ,EAAyB5O,UAAUiP,WAAa,EAUhDL,EAAyBpM,OAAS,SAAgBiF,GAC9C,OAAO,IAAImH,EAAyBnH,IAYxCmH,EAAyB7G,OAAS,SAAgBC,EAASC,GAGvD,GAFKA,IACDA,EAASb,EAAQ5E,UACC,MAAlBwF,EAAQ6G,QAAkB7G,EAAQ6G,OAAO/O,OACzC,IAAK,IAAIF,EAAI,EAAGA,EAAIoI,EAAQ6G,OAAO/O,SAAUF,EACzC0H,EAAMC,uBAAuBmH,sBAAsB3G,OAAOC,EAAQ6G,OAAOjP,GAAIqI,EAAOC,OAA8B,IAAIoC,QAAQjC,SAStI,OAR+B,MAA3BL,EAAQ8G,iBAA2B/O,OAAOE,eAAeC,KAAK8H,EAAS,oBACvEC,EAAOC,OAA8B,IAAIsG,KAAKxG,EAAQ8G,iBAC/B,MAAvB9G,EAAQ+G,aAAuBhP,OAAOE,eAAeC,KAAK8H,EAAS,gBACnEC,EAAOC,OAA8B,IAAIsG,KAAKxG,EAAQ+G,aACtB,MAAhC/G,EAAQgH,sBAAgCjP,OAAOE,eAAeC,KAAK8H,EAAS,yBAC5EC,EAAOC,OAA8B,IAAIyD,OAAO3D,EAAQgH,sBAClC,MAAtBhH,EAAQiH,YAAsBlP,OAAOE,eAAeC,KAAK8H,EAAS,eAClEC,EAAOC,OAA8B,IAAIA,OAAOF,EAAQiH,YACrDhH,GAYX2G,EAAyBxG,gBAAkB,SAAyBJ,EAASC,GACzE,OAAO9C,KAAK4C,OAAOC,EAASC,GAAQI,UAcxCuG,EAAyBtG,OAAS,SAAgBC,EAAQzI,GAChDyI,aAAkBrB,IACpBqB,EAASrB,EAAQ1E,OAAO+F,IAC5B,IAAIC,OAAiBC,IAAX3I,EAAuByI,EAAOG,IAAMH,EAAOI,IAAM7I,EAAQkI,EAAU,IAAIV,EAAMC,uBAAuBqH,yBAC9G,MAAOrG,EAAOI,IAAMH,EAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACKZ,EAAQ6G,QAAU7G,EAAQ6G,OAAO/O,SACnCkI,EAAQ6G,OAAS,IACrB7G,EAAQ6G,OAAOzO,KAAKkH,EAAMC,uBAAuBmH,sBAAsBpG,OAAOC,EAAQA,EAAOL,WAC7F,MACJ,KAAK,EACDF,EAAQ8G,gBAAkBvG,EAAOiG,OACjC,MACJ,KAAK,EACDxG,EAAQ+G,YAAcxG,EAAOiG,OAC7B,MACJ,KAAK,EACDxG,EAAQgH,qBAAuBzG,EAAOoD,SACtC,MACJ,KAAK,EACD3D,EAAQiH,WAAa1G,EAAOL,SAC5B,MACJ,QACIK,EAAOM,SAAe,EAAND,GAChB,OAGR,OAAOZ,GAaX4G,EAAyB9F,gBAAkB,SAAyBP,GAGhE,OAFMA,aAAkBrB,IACpBqB,EAAS,IAAIrB,EAAQqB,IAClBpD,KAAKmD,OAAOC,EAAQA,EAAOL,WAWtC0G,EAAyB7F,OAAS,SAAgBf,GAC9C,GAAuB,WAAnB,eAAOA,IAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAsB,MAAlBA,EAAQ6G,QAAkB7G,EAAQ/H,eAAe,UAAW,CAC5D,IAAKsK,MAAMC,QAAQxC,EAAQ6G,QACvB,MAAO,yBACX,IAAK,IAAIjP,EAAI,EAAGA,EAAIoI,EAAQ6G,OAAO/O,SAAUF,EAAG,CAC5C,IAAI6K,EAAQnD,EAAMC,uBAAuBmH,sBAAsB3F,OAAOf,EAAQ6G,OAAOjP,IACrF,GAAI6K,EACA,MAAO,UAAYA,GAG/B,OAA+B,MAA3BzC,EAAQ8G,iBAA2B9G,EAAQ/H,eAAe,oBACnB,mBAA5B+H,EAAQ8G,gBACR,oCACY,MAAvB9G,EAAQ+G,aAAuB/G,EAAQ/H,eAAe,gBACnB,mBAAxB+H,EAAQ+G,YACR,gCACqB,MAAhC/G,EAAQgH,sBAAgChH,EAAQ/H,eAAe,0BAC1DoH,EAAM4D,SAASjD,EAAQgH,sBACjB,wCACW,MAAtBhH,EAAQiH,YAAsBjH,EAAQ/H,eAAe,gBAChDoH,EAAM2B,UAAUhB,EAAQiH,YAClB,+BACR,MAWXL,EAAyBzF,WAAa,SAAoBvG,GACtD,GAAIA,aAAkB0E,EAAMC,uBAAuBqH,yBAC/C,OAAOhM,EACX,IAAIoF,EAAU,IAAIV,EAAMC,uBAAuBqH,yBAC/C,GAAIhM,EAAOiM,OAAQ,CACf,IAAKtE,MAAMC,QAAQ5H,EAAOiM,QACtB,MAAMnE,UAAU,2EACpB1C,EAAQ6G,OAAS,GACjB,IAAK,IAAIjP,EAAI,EAAGA,EAAIgD,EAAOiM,OAAO/O,SAAUF,EAAG,CAC3C,GAAgC,WAA5B,eAAOgD,EAAOiM,OAAOjP,IACrB,MAAM8K,UAAU,4EACpB1C,EAAQ6G,OAAOjP,GAAK0H,EAAMC,uBAAuBmH,sBAAsBvF,WAAWvG,EAAOiM,OAAOjP,KAWxG,OAR8B,MAA1BgD,EAAOkM,kBACP9G,EAAQ8G,gBAAkBL,QAAQ7L,EAAOkM,kBACnB,MAAtBlM,EAAOmM,cACP/G,EAAQ+G,YAAcN,QAAQ7L,EAAOmM,cACN,MAA/BnM,EAAOoM,uBACPhH,EAAQgH,qBAAuBjK,OAAOnC,EAAOoM,uBACxB,MAArBpM,EAAOqM,aACPjH,EAAQiH,WAAarM,EAAOqM,aAAe,GACxCjH,GAYX4G,EAAyBnF,SAAW,SAAkBzB,EAAS0B,GACtDA,IACDA,EAAU,IACd,IAAI9G,EAAS,GASb,IARI8G,EAAQiB,QAAUjB,EAAQC,YAC1B/G,EAAOiM,OAAS,IAChBnF,EAAQC,WACR/G,EAAOkM,iBAAkB,EACzBlM,EAAOmM,aAAc,EACrBnM,EAAOoM,qBAAuB,GAC9BpM,EAAOqM,WAAa,GAEpBjH,EAAQ6G,QAAU7G,EAAQ6G,OAAO/O,OAAQ,CACzC8C,EAAOiM,OAAS,GAChB,IAAK,IAAI/N,EAAI,EAAGA,EAAIkH,EAAQ6G,OAAO/O,SAAUgB,EACzC8B,EAAOiM,OAAO/N,GAAKwG,EAAMC,uBAAuBmH,sBAAsBjF,SAASzB,EAAQ6G,OAAO/N,GAAI4I,GAU1G,OAR+B,MAA3B1B,EAAQ8G,iBAA2B9G,EAAQ/H,eAAe,qBAC1D2C,EAAOkM,gBAAkB9G,EAAQ8G,iBACV,MAAvB9G,EAAQ+G,aAAuB/G,EAAQ/H,eAAe,iBACtD2C,EAAOmM,YAAc/G,EAAQ+G,aACG,MAAhC/G,EAAQgH,sBAAgChH,EAAQ/H,eAAe,0BAC/D2C,EAAOoM,qBAAuBhH,EAAQgH,sBAChB,MAAtBhH,EAAQiH,YAAsBjH,EAAQ/H,eAAe,gBACrD2C,EAAOqM,WAAajH,EAAQiH,YACzBrM,GAUXgM,EAAyB5O,UAAUgK,OAAS,WACxC,OAAO7E,KAAK8E,YAAYR,SAAStE,KAAMgC,UAAe+C,gBAGnD0E,EAvSwC,GA0SnDrH,EAAuB2H,SAAY,WAoB/B,SAASA,EAASzH,GACd,GAAIA,EACA,IAAK,IAAIC,EAAO3H,OAAO2H,KAAKD,GAAa7H,EAAI,EAAGA,EAAI8H,EAAK5H,SAAUF,EACpC,MAAvB6H,EAAWC,EAAK9H,MAChBuF,KAAKuC,EAAK9H,IAAM6H,EAAWC,EAAK9H,KA+PhD,OAtPAsP,EAASlP,UAAUmP,YAAc,GAQjCD,EAASlP,UAAU4K,QAAUvD,EAAMO,KAAOP,EAAMO,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQ3EqH,EAASlP,UAAUoP,cAAe,EAQlCF,EAASlP,UAAUqP,iBAAmBhI,EAAMO,KAAOP,EAAMO,KAAKC,SAAS,EAAE,GAAE,GAAS,EAUpFqH,EAAS1M,OAAS,SAAgBiF,GAC9B,OAAO,IAAIyH,EAASzH,IAYxByH,EAASnH,OAAS,SAAgBC,EAASC,GAWvC,OAVKA,IACDA,EAASb,EAAQ5E,UACM,MAAvBwF,EAAQmH,aAAuBpP,OAAOE,eAAeC,KAAK8H,EAAS,gBACnEC,EAAOC,OAA8B,IAAIyD,OAAO3D,EAAQmH,aACrC,MAAnBnH,EAAQ4C,SAAmB7K,OAAOE,eAAeC,KAAK8H,EAAS,YAC/DC,EAAOC,OAA8B,IAAIoH,MAAMtH,EAAQ4C,SAC/B,MAAxB5C,EAAQoH,cAAwBrP,OAAOE,eAAeC,KAAK8H,EAAS,iBACpEC,EAAOC,OAA8B,IAAIsG,KAAKxG,EAAQoH,cAC1B,MAA5BpH,EAAQqH,kBAA4BtP,OAAOE,eAAeC,KAAK8H,EAAS,qBACxEC,EAAOC,OAA8B,IAAIoH,MAAMtH,EAAQqH,kBACpDpH,GAYXiH,EAAS9G,gBAAkB,SAAyBJ,EAASC,GACzD,OAAO9C,KAAK4C,OAAOC,EAASC,GAAQI,UAcxC6G,EAAS5G,OAAS,SAAgBC,EAAQzI,GAChCyI,aAAkBrB,IACpBqB,EAASrB,EAAQ1E,OAAO+F,IAC5B,IAAIC,OAAiBC,IAAX3I,EAAuByI,EAAOG,IAAMH,EAAOI,IAAM7I,EAAQkI,EAAU,IAAIV,EAAMC,uBAAuB2H,SAC9G,MAAO3G,EAAOI,IAAMH,EAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDZ,EAAQmH,YAAc5G,EAAOoD,SAC7B,MACJ,KAAK,EACD3D,EAAQ4C,QAAUrC,EAAO+G,QACzB,MACJ,KAAK,EACDtH,EAAQoH,aAAe7G,EAAOiG,OAC9B,MACJ,KAAK,EACDxG,EAAQqH,iBAAmB9G,EAAO+G,QAClC,MACJ,QACI/G,EAAOM,SAAe,EAAND,GAChB,OAGR,OAAOZ,GAaXkH,EAASpG,gBAAkB,SAAyBP,GAGhD,OAFMA,aAAkBrB,IACpBqB,EAAS,IAAIrB,EAAQqB,IAClBpD,KAAKmD,OAAOC,EAAQA,EAAOL,WAWtCgH,EAASnG,OAAS,SAAgBf,GAC9B,MAAuB,WAAnB,eAAOA,IAAoC,OAAZA,EACxB,kBACgB,MAAvBA,EAAQmH,aAAuBnH,EAAQ/H,eAAe,iBACjDoH,EAAM4D,SAASjD,EAAQmH,aACjB,+BACQ,MAAnBnH,EAAQ4C,UAAmB5C,EAAQ/H,eAAe,YAC7CoH,EAAM2B,UAAUhB,EAAQ4C,UAAc5C,EAAQ4C,SAAWvD,EAAM2B,UAAUhB,EAAQ4C,QAAQ3B,MAAQ5B,EAAM2B,UAAUhB,EAAQ4C,QAAQ1B,MAE9G,MAAxBlB,EAAQoH,cAAwBpH,EAAQ/H,eAAe,iBACnB,mBAAzB+H,EAAQoH,aACR,iCACiB,MAA5BpH,EAAQqH,mBAA4BrH,EAAQ/H,eAAe,qBACtDoH,EAAM2B,UAAUhB,EAAQqH,mBAAuBrH,EAAQqH,kBAAoBhI,EAAM2B,UAAUhB,EAAQqH,iBAAiBpG,MAAQ5B,EAAM2B,UAAUhB,EAAQqH,iBAAiBnG,MAEvK,KADQ,0CANA,kCAkBnBgG,EAAS/F,WAAa,SAAoBvG,GACtC,GAAIA,aAAkB0E,EAAMC,uBAAuB2H,SAC/C,OAAOtM,EACX,IAAIoF,EAAU,IAAIV,EAAMC,uBAAuB2H,SAuB/C,OAtB0B,MAAtBtM,EAAOuM,cACPnH,EAAQmH,YAAcpK,OAAOnC,EAAOuM,cAClB,MAAlBvM,EAAOgI,UACHvD,EAAMO,MACLI,EAAQ4C,QAAUvD,EAAMO,KAAKwB,UAAUxG,EAAOgI,UAAUvB,UAAW,EACrC,kBAAnBzG,EAAOgI,QACnB5C,EAAQ4C,QAAUtB,SAAS1G,EAAOgI,QAAS,IACZ,kBAAnBhI,EAAOgI,QACnB5C,EAAQ4C,QAAUhI,EAAOgI,QACM,WAA1B,eAAOhI,EAAOgI,WACnB5C,EAAQ4C,QAAU,IAAIvD,EAAMkC,SAAS3G,EAAOgI,QAAQ3B,MAAQ,EAAGrG,EAAOgI,QAAQ1B,OAAS,GAAGM,aACvE,MAAvB5G,EAAOwM,eACPpH,EAAQoH,aAAeX,QAAQ7L,EAAOwM,eACX,MAA3BxM,EAAOyM,mBACHhI,EAAMO,MACLI,EAAQqH,iBAAmBhI,EAAMO,KAAKwB,UAAUxG,EAAOyM,mBAAmBhG,UAAW,EAC9C,kBAA5BzG,EAAOyM,iBACnBrH,EAAQqH,iBAAmB/F,SAAS1G,EAAOyM,iBAAkB,IACrB,kBAA5BzM,EAAOyM,iBACnBrH,EAAQqH,iBAAmBzM,EAAOyM,iBACM,WAAnC,eAAOzM,EAAOyM,oBACnBrH,EAAQqH,iBAAmB,IAAIhI,EAAMkC,SAAS3G,EAAOyM,iBAAiBpG,MAAQ,EAAGrG,EAAOyM,iBAAiBnG,OAAS,GAAGM,aACtHxB,GAYXkH,EAASzF,SAAW,SAAkBzB,EAAS0B,GACtCA,IACDA,EAAU,IACd,IAAI9G,EAAS,GACb,GAAI8G,EAAQC,SAAU,CAElB,GADA/G,EAAOuM,YAAc,GACjB9H,EAAMO,KAAM,CACZ,IAAIgC,EAAO,IAAIvC,EAAMO,KAAK,EAAG,GAAG,GAChChF,EAAOgI,QAAUlB,EAAQG,QAAU9E,OAAS6E,EAAKE,WAAaJ,EAAQG,QAAUE,OAASH,EAAKJ,WAAaI,OAE3GhH,EAAOgI,QAAUlB,EAAQG,QAAU9E,OAAS,IAAM,EAEtD,GADAnC,EAAOwM,cAAe,EAClB/H,EAAMO,KAAM,CACZ,IAAIgC,EAAO,IAAIvC,EAAMO,KAAK,EAAG,GAAG,GAChChF,EAAOyM,iBAAmB3F,EAAQG,QAAU9E,OAAS6E,EAAKE,WAAaJ,EAAQG,QAAUE,OAASH,EAAKJ,WAAaI,OAEpHhH,EAAOyM,iBAAmB3F,EAAQG,QAAU9E,OAAS,IAAM,EAgBnE,OAd2B,MAAvBiD,EAAQmH,aAAuBnH,EAAQ/H,eAAe,iBACtD2C,EAAOuM,YAAcnH,EAAQmH,aACV,MAAnBnH,EAAQ4C,SAAmB5C,EAAQ/H,eAAe,aACnB,kBAApB+H,EAAQ4C,QACfhI,EAAOgI,QAAUlB,EAAQG,QAAU9E,OAASA,OAAOiD,EAAQ4C,SAAW5C,EAAQ4C,QAE9EhI,EAAOgI,QAAUlB,EAAQG,QAAU9E,OAASsC,EAAMO,KAAK5H,UAAU8J,SAAS5J,KAAK8H,EAAQ4C,SAAWlB,EAAQG,QAAUE,OAAS,IAAI1C,EAAMkC,SAASvB,EAAQ4C,QAAQ3B,MAAQ,EAAGjB,EAAQ4C,QAAQ1B,OAAS,GAAGM,WAAaxB,EAAQ4C,SACxM,MAAxB5C,EAAQoH,cAAwBpH,EAAQ/H,eAAe,kBACvD2C,EAAOwM,aAAepH,EAAQoH,cACF,MAA5BpH,EAAQqH,kBAA4BrH,EAAQ/H,eAAe,sBACnB,kBAA7B+H,EAAQqH,iBACfzM,EAAOyM,iBAAmB3F,EAAQG,QAAU9E,OAASA,OAAOiD,EAAQqH,kBAAoBrH,EAAQqH,iBAEhGzM,EAAOyM,iBAAmB3F,EAAQG,QAAU9E,OAASsC,EAAMO,KAAK5H,UAAU8J,SAAS5J,KAAK8H,EAAQqH,kBAAoB3F,EAAQG,QAAUE,OAAS,IAAI1C,EAAMkC,SAASvB,EAAQqH,iBAAiBpG,MAAQ,EAAGjB,EAAQqH,iBAAiBnG,OAAS,GAAGM,WAAaxB,EAAQqH,kBACjQzM,GAUXsM,EAASlP,UAAUgK,OAAS,WACxB,OAAO7E,KAAK8E,YAAYR,SAAStE,KAAMgC,UAAe+C,gBAGnDgF,EAvRwB,GA0RnC3H,EAAuBgI,aAAgB,WAiBnC,SAASA,EAAa9H,GAElB,GADAtC,KAAKqK,SAAW,GACZ/H,EACA,IAAK,IAAIC,EAAO3H,OAAO2H,KAAKD,GAAa7H,EAAI,EAAGA,EAAI8H,EAAK5H,SAAUF,EACpC,MAAvB6H,EAAWC,EAAK9H,MAChBuF,KAAKuC,EAAK9H,IAAM6H,EAAWC,EAAK9H,KAuLhD,OA9KA2P,EAAavP,UAAUwP,SAAWnI,EAAM+C,WAUxCmF,EAAa/M,OAAS,SAAgBiF,GAClC,OAAO,IAAI8H,EAAa9H,IAY5B8H,EAAaxH,OAAS,SAAgBC,EAASC,GAG3C,GAFKA,IACDA,EAASb,EAAQ5E,UACG,MAApBwF,EAAQwH,UAAoBxH,EAAQwH,SAAS1P,OAC7C,IAAK,IAAIF,EAAI,EAAGA,EAAIoI,EAAQwH,SAAS1P,SAAUF,EAC3C0H,EAAMC,uBAAuB2H,SAASnH,OAAOC,EAAQwH,SAAS5P,GAAIqI,EAAOC,OAA8B,IAAIoC,QAAQjC,SAC3H,OAAOJ,GAYXsH,EAAanH,gBAAkB,SAAyBJ,EAASC,GAC7D,OAAO9C,KAAK4C,OAAOC,EAASC,GAAQI,UAcxCkH,EAAajH,OAAS,SAAgBC,EAAQzI,GACpCyI,aAAkBrB,IACpBqB,EAASrB,EAAQ1E,OAAO+F,IAC5B,IAAIC,OAAiBC,IAAX3I,EAAuByI,EAAOG,IAAMH,EAAOI,IAAM7I,EAAQkI,EAAU,IAAIV,EAAMC,uBAAuBgI,aAC9G,MAAOhH,EAAOI,IAAMH,EAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACKZ,EAAQwH,UAAYxH,EAAQwH,SAAS1P,SACvCkI,EAAQwH,SAAW,IACvBxH,EAAQwH,SAASpP,KAAKkH,EAAMC,uBAAuB2H,SAAS5G,OAAOC,EAAQA,EAAOL,WAClF,MACJ,QACIK,EAAOM,SAAe,EAAND,GAChB,OAGR,OAAOZ,GAaXuH,EAAazG,gBAAkB,SAAyBP,GAGpD,OAFMA,aAAkBrB,IACpBqB,EAAS,IAAIrB,EAAQqB,IAClBpD,KAAKmD,OAAOC,EAAQA,EAAOL,WAWtCqH,EAAaxG,OAAS,SAAgBf,GAClC,GAAuB,WAAnB,eAAOA,IAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAwB,MAApBA,EAAQwH,UAAoBxH,EAAQ/H,eAAe,YAAa,CAChE,IAAKsK,MAAMC,QAAQxC,EAAQwH,UACvB,MAAO,2BACX,IAAK,IAAI5P,EAAI,EAAGA,EAAIoI,EAAQwH,SAAS1P,SAAUF,EAAG,CAC9C,IAAI6K,EAAQnD,EAAMC,uBAAuB2H,SAASnG,OAAOf,EAAQwH,SAAS5P,IAC1E,GAAI6K,EACA,MAAO,YAAcA,GAGjC,OAAO,MAWX8E,EAAapG,WAAa,SAAoBvG,GAC1C,GAAIA,aAAkB0E,EAAMC,uBAAuBgI,aAC/C,OAAO3M,EACX,IAAIoF,EAAU,IAAIV,EAAMC,uBAAuBgI,aAC/C,GAAI3M,EAAO4M,SAAU,CACjB,IAAKjF,MAAMC,QAAQ5H,EAAO4M,UACtB,MAAM9E,UAAU,iEACpB1C,EAAQwH,SAAW,GACnB,IAAK,IAAI5P,EAAI,EAAGA,EAAIgD,EAAO4M,SAAS1P,SAAUF,EAAG,CAC7C,GAAkC,WAA9B,eAAOgD,EAAO4M,SAAS5P,IACvB,MAAM8K,UAAU,kEACpB1C,EAAQwH,SAAS5P,GAAK0H,EAAMC,uBAAuB2H,SAAS/F,WAAWvG,EAAO4M,SAAS5P,KAG/F,OAAOoI,GAYXuH,EAAa9F,SAAW,SAAkBzB,EAAS0B,GAC1CA,IACDA,EAAU,IACd,IAAI9G,EAAS,GAGb,IAFI8G,EAAQiB,QAAUjB,EAAQC,YAC1B/G,EAAO4M,SAAW,IAClBxH,EAAQwH,UAAYxH,EAAQwH,SAAS1P,OAAQ,CAC7C8C,EAAO4M,SAAW,GAClB,IAAK,IAAI1O,EAAI,EAAGA,EAAIkH,EAAQwH,SAAS1P,SAAUgB,EAC3C8B,EAAO4M,SAAS1O,GAAKwG,EAAMC,uBAAuB2H,SAASzF,SAASzB,EAAQwH,SAAS1O,GAAI4I,GAEjG,OAAO9G,GAUX2M,EAAavP,UAAUgK,OAAS,WAC5B,OAAO7E,KAAK8E,YAAYR,SAAStE,KAAMgC,UAAe+C,gBAGnDqF,EA7M4B,GAgNvChI,EAAuBkI,qBAAwB,WAiC3C,SAASA,EAAqBhI,GAK1B,GAJAtC,KAAKuK,kBAAoB,GACzBvK,KAAKwK,wBAA0B,GAC/BxK,KAAKc,WAAa,GAClBd,KAAKqK,SAAW,GACZ/H,EACA,IAAK,IAAIC,EAAO3H,OAAO2H,KAAKD,GAAa7H,EAAI,EAAGA,EAAI8H,EAAK5H,SAAUF,EACpC,MAAvB6H,EAAWC,EAAK9H,MAChBuF,KAAKuC,EAAK9H,IAAM6H,EAAWC,EAAK9H,KAmpBhD,OA1oBA6P,EAAqBzP,UAAU0P,kBAAoBrI,EAAM+C,WAQzDqF,EAAqBzP,UAAU2P,wBAA0BtI,EAAM+C,WAQ/DqF,EAAqBzP,UAAU4P,UAAY,KAQ3CH,EAAqBzP,UAAU6P,iBAAmBxI,EAAMO,KAAOP,EAAMO,KAAKC,SAAS,EAAE,GAAE,GAAQ,EAQ/F4H,EAAqBzP,UAAU8P,eAAiBzI,EAAMO,KAAOP,EAAMO,KAAKC,SAAS,EAAE,GAAE,GAAQ,EAQ7F4H,EAAqBzP,UAAU+P,cAAgB,KAQ/CN,EAAqBzP,UAAUgQ,cAAgB,KAQ/CP,EAAqBzP,UAAUiQ,cAAgB,KAQ/CR,EAAqBzP,UAAUkQ,cAAgB,KAQ/CT,EAAqBzP,UAAUmQ,aAAe,KAQ9CV,EAAqBzP,UAAUoQ,aAAe,KAQ9CX,EAAqBzP,UAAUqQ,aAAe,EAQ9CZ,EAAqBzP,UAAUiG,WAAaoB,EAAM+C,WAQlDqF,EAAqBzP,UAAUsQ,aAAejJ,EAAMO,KAAOP,EAAMO,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQ5F4H,EAAqBzP,UAAUuQ,yBAA2B,KAQ1Dd,EAAqBzP,UAAUwQ,eAAgB,EAQ/Cf,EAAqBzP,UAAUwP,SAAWnI,EAAM+C,WAUhDqF,EAAqBjN,OAAS,SAAgBiF,GAC1C,OAAO,IAAIgI,EAAqBhI,IAYpCgI,EAAqB1H,OAAS,SAAgBC,EAASC,GAGnD,GAFKA,IACDA,EAASb,EAAQ5E,UACY,MAA7BwF,EAAQ0H,mBAA6B1H,EAAQ0H,kBAAkB5P,OAC/D,IAAK,IAAIF,EAAI,EAAGA,EAAIoI,EAAQ0H,kBAAkB5P,SAAUF,EACpD0H,EAAMC,uBAAuBqE,iBAAiB7D,OAAOC,EAAQ0H,kBAAkB9P,GAAIqI,EAAOC,OAA8B,IAAIoC,QAAQjC,SAC5I,GAAuC,MAAnCL,EAAQ2H,yBAAmC3H,EAAQ2H,wBAAwB7P,OAC3E,IAAK,IAAIF,EAAI,EAAGA,EAAIoI,EAAQ2H,wBAAwB7P,SAAUF,EAC1D0H,EAAMC,uBAAuBqE,iBAAiB7D,OAAOC,EAAQ2H,wBAAwB/P,GAAIqI,EAAOC,OAA8B,IAAIoC,QAAQjC,SAqBlJ,GApByB,MAArBL,EAAQ4H,WAAqB7P,OAAOE,eAAeC,KAAK8H,EAAS,cACjEC,EAAOC,OAA8B,IAAIA,OAAOF,EAAQ4H,WAC5B,MAA5B5H,EAAQ6H,kBAA4B9P,OAAOE,eAAeC,KAAK8H,EAAS,qBACxEC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQ6H,kBAC9B,MAA1B7H,EAAQ8H,gBAA0B/P,OAAOE,eAAeC,KAAK8H,EAAS,mBACtEC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQ8H,gBAC/B,MAAzB9H,EAAQ+H,eAAyBhQ,OAAOE,eAAeC,KAAK8H,EAAS,kBACrEV,EAAMC,uBAAuB4D,cAAcpD,OAAOC,EAAQ+H,cAAe9H,EAAOC,OAA8B,IAAIoC,QAAQjC,SACjG,MAAzBL,EAAQgI,eAAyBjQ,OAAOE,eAAeC,KAAK8H,EAAS,kBACrEV,EAAMC,uBAAuB4D,cAAcpD,OAAOC,EAAQgI,cAAe/H,EAAOC,OAA8B,IAAIoC,QAAQjC,SACjG,MAAzBL,EAAQiI,eAAyBlQ,OAAOE,eAAeC,KAAK8H,EAAS,kBACrEV,EAAMC,uBAAuB4D,cAAcpD,OAAOC,EAAQiI,cAAehI,EAAOC,OAA8B,IAAIoC,QAAQjC,SACjG,MAAzBL,EAAQkI,eAAyBnQ,OAAOE,eAAeC,KAAK8H,EAAS,kBACrEV,EAAMC,uBAAuB4D,cAAcpD,OAAOC,EAAQkI,cAAejI,EAAOC,OAA8B,IAAIoC,QAAQjC,SAClG,MAAxBL,EAAQmI,cAAwBpQ,OAAOE,eAAeC,KAAK8H,EAAS,iBACpEV,EAAMC,uBAAuB+D,UAAUvD,OAAOC,EAAQmI,aAAclI,EAAOC,OAA+B,IAAIoC,QAAQjC,SAC9F,MAAxBL,EAAQoI,cAAwBrQ,OAAOE,eAAeC,KAAK8H,EAAS,iBACpEV,EAAMC,uBAAuB+D,UAAUvD,OAAOC,EAAQoI,aAAcnI,EAAOC,OAA+B,IAAIoC,QAAQjC,SAC9F,MAAxBL,EAAQqI,cAAwBtQ,OAAOE,eAAeC,KAAK8H,EAAS,iBACpEC,EAAOC,OAA+B,IAAIA,OAAOF,EAAQqI,cACnC,MAAtBrI,EAAQ/B,YAAsB+B,EAAQ/B,WAAWnG,OACjD,IAAK,IAAIF,EAAI,EAAGA,EAAIoI,EAAQ/B,WAAWnG,SAAUF,EAC7C0H,EAAMC,uBAAuBiG,gBAAgBzF,OAAOC,EAAQ/B,WAAWrG,GAAIqI,EAAOC,OAA+B,KAAKoC,QAAQjC,SAOtI,GAN4B,MAAxBL,EAAQsI,cAAwBvQ,OAAOE,eAAeC,KAAK8H,EAAS,iBACpEC,EAAOC,OAA+B,KAAKoH,MAAMtH,EAAQsI,cACrB,MAApCtI,EAAQuI,0BAAoCxQ,OAAOE,eAAeC,KAAK8H,EAAS,6BAChFV,EAAMC,uBAAuBqH,yBAAyB7G,OAAOC,EAAQuI,yBAA0BtI,EAAOC,OAA+B,KAAKoC,QAAQjC,SACzH,MAAzBL,EAAQwI,eAAyBzQ,OAAOE,eAAeC,KAAK8H,EAAS,kBACrEC,EAAOC,OAA+B,KAAKsG,KAAKxG,EAAQwI,eACpC,MAApBxI,EAAQwH,UAAoBxH,EAAQwH,SAAS1P,OAC7C,IAAK,IAAIF,EAAI,EAAGA,EAAIoI,EAAQwH,SAAS1P,SAAUF,EAC3C0H,EAAMC,uBAAuB2H,SAASnH,OAAOC,EAAQwH,SAAS5P,GAAIqI,EAAOC,OAA+B,KAAKoC,QAAQjC,SAC7H,OAAOJ,GAYXwH,EAAqBrH,gBAAkB,SAAyBJ,EAASC,GACrE,OAAO9C,KAAK4C,OAAOC,EAASC,GAAQI,UAcxCoH,EAAqBnH,OAAS,SAAgBC,EAAQzI,GAC5CyI,aAAkBrB,IACpBqB,EAASrB,EAAQ1E,OAAO+F,IAC5B,IAAIC,OAAiBC,IAAX3I,EAAuByI,EAAOG,IAAMH,EAAOI,IAAM7I,EAAQkI,EAAU,IAAIV,EAAMC,uBAAuBkI,qBAC9G,MAAOlH,EAAOI,IAAMH,EAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACKZ,EAAQ0H,mBAAqB1H,EAAQ0H,kBAAkB5P,SACzDkI,EAAQ0H,kBAAoB,IAChC1H,EAAQ0H,kBAAkBtP,KAAKkH,EAAMC,uBAAuBqE,iBAAiBtD,OAAOC,EAAQA,EAAOL,WACnG,MACJ,KAAK,EACKF,EAAQ2H,yBAA2B3H,EAAQ2H,wBAAwB7P,SACrEkI,EAAQ2H,wBAA0B,IACtC3H,EAAQ2H,wBAAwBvP,KAAKkH,EAAMC,uBAAuBqE,iBAAiBtD,OAAOC,EAAQA,EAAOL,WACzG,MACJ,KAAK,EACDF,EAAQ4H,UAAYrH,EAAOL,SAC3B,MACJ,KAAK,EACDF,EAAQ6H,iBAAmBtH,EAAOJ,SAClC,MACJ,KAAK,EACDH,EAAQ8H,eAAiBvH,EAAOJ,SAChC,MACJ,KAAK,EACDH,EAAQ+H,cAAgBzI,EAAMC,uBAAuB4D,cAAc7C,OAAOC,EAAQA,EAAOL,UACzF,MACJ,KAAK,EACDF,EAAQgI,cAAgB1I,EAAMC,uBAAuB4D,cAAc7C,OAAOC,EAAQA,EAAOL,UACzF,MACJ,KAAK,EACDF,EAAQiI,cAAgB3I,EAAMC,uBAAuB4D,cAAc7C,OAAOC,EAAQA,EAAOL,UACzF,MACJ,KAAK,EACDF,EAAQkI,cAAgB5I,EAAMC,uBAAuB4D,cAAc7C,OAAOC,EAAQA,EAAOL,UACzF,MACJ,KAAK,GACDF,EAAQmI,aAAe7I,EAAMC,uBAAuB+D,UAAUhD,OAAOC,EAAQA,EAAOL,UACpF,MACJ,KAAK,GACDF,EAAQoI,aAAe9I,EAAMC,uBAAuB+D,UAAUhD,OAAOC,EAAQA,EAAOL,UACpF,MACJ,KAAK,GACDF,EAAQqI,aAAe9H,EAAOL,SAC9B,MACJ,KAAK,GACKF,EAAQ/B,YAAc+B,EAAQ/B,WAAWnG,SAC3CkI,EAAQ/B,WAAa,IACzB+B,EAAQ/B,WAAW7F,KAAKkH,EAAMC,uBAAuBiG,gBAAgBlF,OAAOC,EAAQA,EAAOL,WAC3F,MACJ,KAAK,GACDF,EAAQsI,aAAe/H,EAAO+G,QAC9B,MACJ,KAAK,GACDtH,EAAQuI,yBAA2BjJ,EAAMC,uBAAuBqH,yBAAyBtG,OAAOC,EAAQA,EAAOL,UAC/G,MACJ,KAAK,GACDF,EAAQwI,cAAgBjI,EAAOiG,OAC/B,MACJ,KAAK,GACKxG,EAAQwH,UAAYxH,EAAQwH,SAAS1P,SACvCkI,EAAQwH,SAAW,IACvBxH,EAAQwH,SAASpP,KAAKkH,EAAMC,uBAAuB2H,SAAS5G,OAAOC,EAAQA,EAAOL,WAClF,MACJ,QACIK,EAAOM,SAAe,EAAND,GAChB,OAGR,OAAOZ,GAaXyH,EAAqB3G,gBAAkB,SAAyBP,GAG5D,OAFMA,aAAkBrB,IACpBqB,EAAS,IAAIrB,EAAQqB,IAClBpD,KAAKmD,OAAOC,EAAQA,EAAOL,WAWtCuH,EAAqB1G,OAAS,SAAgBf,GAC1C,GAAuB,WAAnB,eAAOA,IAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAiC,MAA7BA,EAAQ0H,mBAA6B1H,EAAQ/H,eAAe,qBAAsB,CAClF,IAAKsK,MAAMC,QAAQxC,EAAQ0H,mBACvB,MAAO,oCACX,IAAK,IAAI9P,EAAI,EAAGA,EAAIoI,EAAQ0H,kBAAkB5P,SAAUF,EAAG,CACvD,IAAI6K,EAAQnD,EAAMC,uBAAuBqE,iBAAiB7C,OAAOf,EAAQ0H,kBAAkB9P,IAC3F,GAAI6K,EACA,MAAO,qBAAuBA,GAG1C,GAAuC,MAAnCzC,EAAQ2H,yBAAmC3H,EAAQ/H,eAAe,2BAA4B,CAC9F,IAAKsK,MAAMC,QAAQxC,EAAQ2H,yBACvB,MAAO,0CACX,IAAK,IAAI/P,EAAI,EAAGA,EAAIoI,EAAQ2H,wBAAwB7P,SAAUF,EAAG,CAC7D,IAAI6K,EAAQnD,EAAMC,uBAAuBqE,iBAAiB7C,OAAOf,EAAQ2H,wBAAwB/P,IACjG,GAAI6K,EACA,MAAO,2BAA6BA,GAGhD,GAAyB,MAArBzC,EAAQ4H,WAAqB5H,EAAQ/H,eAAe,eAC/CoH,EAAM2B,UAAUhB,EAAQ4H,WACzB,MAAO,8BACf,GAAgC,MAA5B5H,EAAQ6H,kBAA4B7H,EAAQ/H,eAAe,sBACtDoH,EAAM2B,UAAUhB,EAAQ6H,qBAAuB7H,EAAQ6H,kBAAoBxI,EAAM2B,UAAUhB,EAAQ6H,iBAAiB5G,MAAQ5B,EAAM2B,UAAUhB,EAAQ6H,iBAAiB3G,OACtK,MAAO,0CACf,GAA8B,MAA1BlB,EAAQ8H,gBAA0B9H,EAAQ/H,eAAe,oBACpDoH,EAAM2B,UAAUhB,EAAQ8H,mBAAqB9H,EAAQ8H,gBAAkBzI,EAAM2B,UAAUhB,EAAQ8H,eAAe7G,MAAQ5B,EAAM2B,UAAUhB,EAAQ8H,eAAe5G,OAC9J,MAAO,wCACf,GAA6B,MAAzBlB,EAAQ+H,eAAyB/H,EAAQ/H,eAAe,iBAAkB,CAC1E,IAAIwK,EAAQnD,EAAMC,uBAAuB4D,cAAcpC,OAAOf,EAAQ+H,eACtE,GAAItF,EACA,MAAO,iBAAmBA,EAElC,GAA6B,MAAzBzC,EAAQgI,eAAyBhI,EAAQ/H,eAAe,iBAAkB,CAC1E,IAAIwK,EAAQnD,EAAMC,uBAAuB4D,cAAcpC,OAAOf,EAAQgI,eACtE,GAAIvF,EACA,MAAO,iBAAmBA,EAElC,GAA6B,MAAzBzC,EAAQiI,eAAyBjI,EAAQ/H,eAAe,iBAAkB,CAC1E,IAAIwK,EAAQnD,EAAMC,uBAAuB4D,cAAcpC,OAAOf,EAAQiI,eACtE,GAAIxF,EACA,MAAO,iBAAmBA,EAElC,GAA6B,MAAzBzC,EAAQkI,eAAyBlI,EAAQ/H,eAAe,iBAAkB,CAC1E,IAAIwK,EAAQnD,EAAMC,uBAAuB4D,cAAcpC,OAAOf,EAAQkI,eACtE,GAAIzF,EACA,MAAO,iBAAmBA,EAElC,GAA4B,MAAxBzC,EAAQmI,cAAwBnI,EAAQ/H,eAAe,gBAAiB,CACxE,IAAIwK,EAAQnD,EAAMC,uBAAuB+D,UAAUvC,OAAOf,EAAQmI,cAClE,GAAI1F,EACA,MAAO,gBAAkBA,EAEjC,GAA4B,MAAxBzC,EAAQoI,cAAwBpI,EAAQ/H,eAAe,gBAAiB,CACxE,IAAIwK,EAAQnD,EAAMC,uBAAuB+D,UAAUvC,OAAOf,EAAQoI,cAClE,GAAI3F,EACA,MAAO,gBAAkBA,EAEjC,GAA4B,MAAxBzC,EAAQqI,cAAwBrI,EAAQ/H,eAAe,kBAClDoH,EAAM2B,UAAUhB,EAAQqI,cACzB,MAAO,iCACf,GAA0B,MAAtBrI,EAAQ/B,YAAsB+B,EAAQ/H,eAAe,cAAe,CACpE,IAAKsK,MAAMC,QAAQxC,EAAQ/B,YACvB,MAAO,6BACX,IAAK,IAAIrG,EAAI,EAAGA,EAAIoI,EAAQ/B,WAAWnG,SAAUF,EAAG,CAChD,IAAI6K,EAAQnD,EAAMC,uBAAuBiG,gBAAgBzE,OAAOf,EAAQ/B,WAAWrG,IACnF,GAAI6K,EACA,MAAO,cAAgBA,GAGnC,GAA4B,MAAxBzC,EAAQsI,cAAwBtI,EAAQ/H,eAAe,kBAClDoH,EAAM2B,UAAUhB,EAAQsI,iBAAmBtI,EAAQsI,cAAgBjJ,EAAM2B,UAAUhB,EAAQsI,aAAarH,MAAQ5B,EAAM2B,UAAUhB,EAAQsI,aAAapH,OACtJ,MAAO,sCACf,GAAwC,MAApClB,EAAQuI,0BAAoCvI,EAAQ/H,eAAe,4BAA6B,CAChG,IAAIwK,EAAQnD,EAAMC,uBAAuBqH,yBAAyB7F,OAAOf,EAAQuI,0BACjF,GAAI9F,EACA,MAAO,4BAA8BA,EAE7C,GAA6B,MAAzBzC,EAAQwI,eAAyBxI,EAAQ/H,eAAe,kBACnB,mBAA1B+H,EAAQwI,cACf,MAAO,kCACf,GAAwB,MAApBxI,EAAQwH,UAAoBxH,EAAQ/H,eAAe,YAAa,CAChE,IAAKsK,MAAMC,QAAQxC,EAAQwH,UACvB,MAAO,2BACX,IAAK,IAAI5P,EAAI,EAAGA,EAAIoI,EAAQwH,SAAS1P,SAAUF,EAAG,CAC9C,IAAI6K,EAAQnD,EAAMC,uBAAuB2H,SAASnG,OAAOf,EAAQwH,SAAS5P,IAC1E,GAAI6K,EACA,MAAO,YAAcA,GAGjC,OAAO,MAWXgF,EAAqBtG,WAAa,SAAoBvG,GAClD,GAAIA,aAAkB0E,EAAMC,uBAAuBkI,qBAC/C,OAAO7M,EACX,IAAIoF,EAAU,IAAIV,EAAMC,uBAAuBkI,qBAC/C,GAAI7M,EAAO8M,kBAAmB,CAC1B,IAAKnF,MAAMC,QAAQ5H,EAAO8M,mBACtB,MAAMhF,UAAU,kFACpB1C,EAAQ0H,kBAAoB,GAC5B,IAAK,IAAI9P,EAAI,EAAGA,EAAIgD,EAAO8M,kBAAkB5P,SAAUF,EAAG,CACtD,GAA2C,WAAvC,eAAOgD,EAAO8M,kBAAkB9P,IAChC,MAAM8K,UAAU,mFACpB1C,EAAQ0H,kBAAkB9P,GAAK0H,EAAMC,uBAAuBqE,iBAAiBzC,WAAWvG,EAAO8M,kBAAkB9P,KAGzH,GAAIgD,EAAO+M,wBAAyB,CAChC,IAAKpF,MAAMC,QAAQ5H,EAAO+M,yBACtB,MAAMjF,UAAU,wFACpB1C,EAAQ2H,wBAA0B,GAClC,IAAK,IAAI/P,EAAI,EAAGA,EAAIgD,EAAO+M,wBAAwB7P,SAAUF,EAAG,CAC5D,GAAiD,WAA7C,eAAOgD,EAAO+M,wBAAwB/P,IACtC,MAAM8K,UAAU,yFACpB1C,EAAQ2H,wBAAwB/P,GAAK0H,EAAMC,uBAAuBqE,iBAAiBzC,WAAWvG,EAAO+M,wBAAwB/P,KAuBrI,GApBwB,MAApBgD,EAAOgN,YACP5H,EAAQ4H,UAAYhN,EAAOgN,YAAc,GACd,MAA3BhN,EAAOiN,mBACHxI,EAAMO,MACLI,EAAQ6H,iBAAmBxI,EAAMO,KAAKwB,UAAUxG,EAAOiN,mBAAmBxG,UAAW,EAC9C,kBAA5BzG,EAAOiN,iBACnB7H,EAAQ6H,iBAAmBvG,SAAS1G,EAAOiN,iBAAkB,IACrB,kBAA5BjN,EAAOiN,iBACnB7H,EAAQ6H,iBAAmBjN,EAAOiN,iBACM,WAAnC,eAAOjN,EAAOiN,oBACnB7H,EAAQ6H,iBAAmB,IAAIxI,EAAMkC,SAAS3G,EAAOiN,iBAAiB5G,MAAQ,EAAGrG,EAAOiN,iBAAiB3G,OAAS,GAAGM,UAAS,KACzG,MAAzB5G,EAAOkN,iBACHzI,EAAMO,MACLI,EAAQ8H,eAAiBzI,EAAMO,KAAKwB,UAAUxG,EAAOkN,iBAAiBzG,UAAW,EAC5C,kBAA1BzG,EAAOkN,eACnB9H,EAAQ8H,eAAiBxG,SAAS1G,EAAOkN,eAAgB,IACnB,kBAA1BlN,EAAOkN,eACnB9H,EAAQ8H,eAAiBlN,EAAOkN,eACM,WAAjC,eAAOlN,EAAOkN,kBACnB9H,EAAQ8H,eAAiB,IAAIzI,EAAMkC,SAAS3G,EAAOkN,eAAe7G,MAAQ,EAAGrG,EAAOkN,eAAe5G,OAAS,GAAGM,UAAS,KACpG,MAAxB5G,EAAOmN,cAAuB,CAC9B,GAAoC,WAAhC,eAAOnN,EAAOmN,eACd,MAAMrF,UAAU,+EACpB1C,EAAQ+H,cAAgBzI,EAAMC,uBAAuB4D,cAAchC,WAAWvG,EAAOmN,eAEzF,GAA4B,MAAxBnN,EAAOoN,cAAuB,CAC9B,GAAoC,WAAhC,eAAOpN,EAAOoN,eACd,MAAMtF,UAAU,+EACpB1C,EAAQgI,cAAgB1I,EAAMC,uBAAuB4D,cAAchC,WAAWvG,EAAOoN,eAEzF,GAA4B,MAAxBpN,EAAOqN,cAAuB,CAC9B,GAAoC,WAAhC,eAAOrN,EAAOqN,eACd,MAAMvF,UAAU,+EACpB1C,EAAQiI,cAAgB3I,EAAMC,uBAAuB4D,cAAchC,WAAWvG,EAAOqN,eAEzF,GAA4B,MAAxBrN,EAAOsN,cAAuB,CAC9B,GAAoC,WAAhC,eAAOtN,EAAOsN,eACd,MAAMxF,UAAU,+EACpB1C,EAAQkI,cAAgB5I,EAAMC,uBAAuB4D,cAAchC,WAAWvG,EAAOsN,eAEzF,GAA2B,MAAvBtN,EAAOuN,aAAsB,CAC7B,GAAmC,WAA/B,eAAOvN,EAAOuN,cACd,MAAMzF,UAAU,8EACpB1C,EAAQmI,aAAe7I,EAAMC,uBAAuB+D,UAAUnC,WAAWvG,EAAOuN,cAEpF,GAA2B,MAAvBvN,EAAOwN,aAAsB,CAC7B,GAAmC,WAA/B,eAAOxN,EAAOwN,cACd,MAAM1F,UAAU,8EACpB1C,EAAQoI,aAAe9I,EAAMC,uBAAuB+D,UAAUnC,WAAWvG,EAAOwN,cAIpF,GAF2B,MAAvBxN,EAAOyN,eACPrI,EAAQqI,aAAezN,EAAOyN,eAAiB,GAC/CzN,EAAOqD,WAAY,CACnB,IAAKsE,MAAMC,QAAQ5H,EAAOqD,YACtB,MAAMyE,UAAU,2EACpB1C,EAAQ/B,WAAa,GACrB,IAAK,IAAIrG,EAAI,EAAGA,EAAIgD,EAAOqD,WAAWnG,SAAUF,EAAG,CAC/C,GAAoC,WAAhC,eAAOgD,EAAOqD,WAAWrG,IACzB,MAAM8K,UAAU,4EACpB1C,EAAQ/B,WAAWrG,GAAK0H,EAAMC,uBAAuBiG,gBAAgBrE,WAAWvG,EAAOqD,WAAWrG,KAY1G,GAT2B,MAAvBgD,EAAO0N,eACHjJ,EAAMO,MACLI,EAAQsI,aAAejJ,EAAMO,KAAKwB,UAAUxG,EAAO0N,eAAejH,UAAW,EAC1C,kBAAxBzG,EAAO0N,aACnBtI,EAAQsI,aAAehH,SAAS1G,EAAO0N,aAAc,IACjB,kBAAxB1N,EAAO0N,aACnBtI,EAAQsI,aAAe1N,EAAO0N,aACM,WAA/B,eAAO1N,EAAO0N,gBACnBtI,EAAQsI,aAAe,IAAIjJ,EAAMkC,SAAS3G,EAAO0N,aAAarH,MAAQ,EAAGrG,EAAO0N,aAAapH,OAAS,GAAGM,aAC1E,MAAnC5G,EAAO2N,yBAAkC,CACzC,GAA+C,WAA3C,eAAO3N,EAAO2N,0BACd,MAAM7F,UAAU,0FACpB1C,EAAQuI,yBAA2BjJ,EAAMC,uBAAuBqH,yBAAyBzF,WAAWvG,EAAO2N,0BAI/G,GAF4B,MAAxB3N,EAAO4N,gBACPxI,EAAQwI,cAAgB/B,QAAQ7L,EAAO4N,gBACvC5N,EAAO4M,SAAU,CACjB,IAAKjF,MAAMC,QAAQ5H,EAAO4M,UACtB,MAAM9E,UAAU,yEACpB1C,EAAQwH,SAAW,GACnB,IAAK,IAAI5P,EAAI,EAAGA,EAAIgD,EAAO4M,SAAS1P,SAAUF,EAAG,CAC7C,GAAkC,WAA9B,eAAOgD,EAAO4M,SAAS5P,IACvB,MAAM8K,UAAU,0EACpB1C,EAAQwH,SAAS5P,GAAK0H,EAAMC,uBAAuB2H,SAAS/F,WAAWvG,EAAO4M,SAAS5P,KAG/F,OAAOoI,GAYXyH,EAAqBhG,SAAW,SAAkBzB,EAAS0B,GAClDA,IACDA,EAAU,IACd,IAAI9G,EAAS,GAOb,IANI8G,EAAQiB,QAAUjB,EAAQC,YAC1B/G,EAAO8M,kBAAoB,GAC3B9M,EAAO+M,wBAA0B,GACjC/M,EAAOqD,WAAa,GACpBrD,EAAO4M,SAAW,IAElB9F,EAAQC,SAAU,CAElB,GADA/G,EAAOgN,UAAY,KACfvI,EAAMO,KAAM,CACZ,IAAIgC,EAAO,IAAIvC,EAAMO,KAAK,EAAG,GAAG,GAChChF,EAAOiN,iBAAmBnG,EAAQG,QAAU9E,OAAS6E,EAAKE,WAAaJ,EAAQG,QAAUE,OAASH,EAAKJ,WAAaI,OAEpHhH,EAAOiN,iBAAmBnG,EAAQG,QAAU9E,OAAS,IAAM,EAC/D,GAAIsC,EAAMO,KAAM,CACZ,IAAIgC,EAAO,IAAIvC,EAAMO,KAAK,EAAG,GAAG,GAChChF,EAAOkN,eAAiBpG,EAAQG,QAAU9E,OAAS6E,EAAKE,WAAaJ,EAAQG,QAAUE,OAASH,EAAKJ,WAAaI,OAElHhH,EAAOkN,eAAiBpG,EAAQG,QAAU9E,OAAS,IAAM,EAQ7D,GAPAnC,EAAOmN,cAAgB,KACvBnN,EAAOoN,cAAgB,KACvBpN,EAAOqN,cAAgB,KACvBrN,EAAOsN,cAAgB,KACvBtN,EAAOuN,aAAe,KACtBvN,EAAOwN,aAAe,KACtBxN,EAAOyN,aAAe,EAClBhJ,EAAMO,KAAM,CACZ,IAAIgC,EAAO,IAAIvC,EAAMO,KAAK,EAAG,GAAG,GAChChF,EAAO0N,aAAe5G,EAAQG,QAAU9E,OAAS6E,EAAKE,WAAaJ,EAAQG,QAAUE,OAASH,EAAKJ,WAAaI,OAEhHhH,EAAO0N,aAAe5G,EAAQG,QAAU9E,OAAS,IAAM,EAC3DnC,EAAO2N,yBAA2B,KAClC3N,EAAO4N,eAAgB,EAE3B,GAAIxI,EAAQ0H,mBAAqB1H,EAAQ0H,kBAAkB5P,OAAQ,CAC/D8C,EAAO8M,kBAAoB,GAC3B,IAAK,IAAI5O,EAAI,EAAGA,EAAIkH,EAAQ0H,kBAAkB5P,SAAUgB,EACpD8B,EAAO8M,kBAAkB5O,GAAKwG,EAAMC,uBAAuBqE,iBAAiBnC,SAASzB,EAAQ0H,kBAAkB5O,GAAI4I,GAE3H,GAAI1B,EAAQ2H,yBAA2B3H,EAAQ2H,wBAAwB7P,OAAQ,CAC3E8C,EAAO+M,wBAA0B,GACjC,IAAK,IAAI7O,EAAI,EAAGA,EAAIkH,EAAQ2H,wBAAwB7P,SAAUgB,EAC1D8B,EAAO+M,wBAAwB7O,GAAKwG,EAAMC,uBAAuBqE,iBAAiBnC,SAASzB,EAAQ2H,wBAAwB7O,GAAI4I,GA4BvI,GA1ByB,MAArB1B,EAAQ4H,WAAqB5H,EAAQ/H,eAAe,eACpD2C,EAAOgN,UAAY5H,EAAQ4H,WACC,MAA5B5H,EAAQ6H,kBAA4B7H,EAAQ/H,eAAe,sBACnB,kBAA7B+H,EAAQ6H,iBACfjN,EAAOiN,iBAAmBnG,EAAQG,QAAU9E,OAASA,OAAOiD,EAAQ6H,kBAAoB7H,EAAQ6H,iBAEhGjN,EAAOiN,iBAAmBnG,EAAQG,QAAU9E,OAASsC,EAAMO,KAAK5H,UAAU8J,SAAS5J,KAAK8H,EAAQ6H,kBAAoBnG,EAAQG,QAAUE,OAAS,IAAI1C,EAAMkC,SAASvB,EAAQ6H,iBAAiB5G,MAAQ,EAAGjB,EAAQ6H,iBAAiB3G,OAAS,GAAGM,UAAS,GAAQxB,EAAQ6H,kBAC9O,MAA1B7H,EAAQ8H,gBAA0B9H,EAAQ/H,eAAe,oBACnB,kBAA3B+H,EAAQ8H,eACflN,EAAOkN,eAAiBpG,EAAQG,QAAU9E,OAASA,OAAOiD,EAAQ8H,gBAAkB9H,EAAQ8H,eAE5FlN,EAAOkN,eAAiBpG,EAAQG,QAAU9E,OAASsC,EAAMO,KAAK5H,UAAU8J,SAAS5J,KAAK8H,EAAQ8H,gBAAkBpG,EAAQG,QAAUE,OAAS,IAAI1C,EAAMkC,SAASvB,EAAQ8H,eAAe7G,MAAQ,EAAGjB,EAAQ8H,eAAe5G,OAAS,GAAGM,UAAS,GAAQxB,EAAQ8H,gBACvO,MAAzB9H,EAAQ+H,eAAyB/H,EAAQ/H,eAAe,mBACxD2C,EAAOmN,cAAgBzI,EAAMC,uBAAuB4D,cAAc1B,SAASzB,EAAQ+H,cAAerG,IACzE,MAAzB1B,EAAQgI,eAAyBhI,EAAQ/H,eAAe,mBACxD2C,EAAOoN,cAAgB1I,EAAMC,uBAAuB4D,cAAc1B,SAASzB,EAAQgI,cAAetG,IACzE,MAAzB1B,EAAQiI,eAAyBjI,EAAQ/H,eAAe,mBACxD2C,EAAOqN,cAAgB3I,EAAMC,uBAAuB4D,cAAc1B,SAASzB,EAAQiI,cAAevG,IACzE,MAAzB1B,EAAQkI,eAAyBlI,EAAQ/H,eAAe,mBACxD2C,EAAOsN,cAAgB5I,EAAMC,uBAAuB4D,cAAc1B,SAASzB,EAAQkI,cAAexG,IAC1E,MAAxB1B,EAAQmI,cAAwBnI,EAAQ/H,eAAe,kBACvD2C,EAAOuN,aAAe7I,EAAMC,uBAAuB+D,UAAU7B,SAASzB,EAAQmI,aAAczG,IACpE,MAAxB1B,EAAQoI,cAAwBpI,EAAQ/H,eAAe,kBACvD2C,EAAOwN,aAAe9I,EAAMC,uBAAuB+D,UAAU7B,SAASzB,EAAQoI,aAAc1G,IACpE,MAAxB1B,EAAQqI,cAAwBrI,EAAQ/H,eAAe,kBACvD2C,EAAOyN,aAAerI,EAAQqI,cAC9BrI,EAAQ/B,YAAc+B,EAAQ/B,WAAWnG,OAAQ,CACjD8C,EAAOqD,WAAa,GACpB,IAAK,IAAInF,EAAI,EAAGA,EAAIkH,EAAQ/B,WAAWnG,SAAUgB,EAC7C8B,EAAOqD,WAAWnF,GAAKwG,EAAMC,uBAAuBiG,gBAAgB/D,SAASzB,EAAQ/B,WAAWnF,GAAI4I,GAW5G,GAT4B,MAAxB1B,EAAQsI,cAAwBtI,EAAQ/H,eAAe,kBACnB,kBAAzB+H,EAAQsI,aACf1N,EAAO0N,aAAe5G,EAAQG,QAAU9E,OAASA,OAAOiD,EAAQsI,cAAgBtI,EAAQsI,aAExF1N,EAAO0N,aAAe5G,EAAQG,QAAU9E,OAASsC,EAAMO,KAAK5H,UAAU8J,SAAS5J,KAAK8H,EAAQsI,cAAgB5G,EAAQG,QAAUE,OAAS,IAAI1C,EAAMkC,SAASvB,EAAQsI,aAAarH,MAAQ,EAAGjB,EAAQsI,aAAapH,OAAS,GAAGM,WAAaxB,EAAQsI,cAChN,MAApCtI,EAAQuI,0BAAoCvI,EAAQ/H,eAAe,8BACnE2C,EAAO2N,yBAA2BjJ,EAAMC,uBAAuBqH,yBAAyBnF,SAASzB,EAAQuI,yBAA0B7G,IAC1G,MAAzB1B,EAAQwI,eAAyBxI,EAAQ/H,eAAe,mBACxD2C,EAAO4N,cAAgBxI,EAAQwI,eAC/BxI,EAAQwH,UAAYxH,EAAQwH,SAAS1P,OAAQ,CAC7C8C,EAAO4M,SAAW,GAClB,IAAK,IAAI1O,EAAI,EAAGA,EAAIkH,EAAQwH,SAAS1P,SAAUgB,EAC3C8B,EAAO4M,SAAS1O,GAAKwG,EAAMC,uBAAuB2H,SAASzF,SAASzB,EAAQwH,SAAS1O,GAAI4I,GAEjG,OAAO9G,GAUX6M,EAAqBzP,UAAUgK,OAAS,WACpC,OAAO7E,KAAK8E,YAAYR,SAAStE,KAAMgC,UAAe+C,gBAGnDuF,EA5rBoC,GA+rBxClI,EAphJ2D,GCGlDkJ,EAAS,OACTC,EAAgB,EAChBC,EAAqB,EACrBC,EAA+B,EAC/BC,EAAgC,EAEvCC,GAAb,WAKE,WAAYxL,GAAM,uBAChBH,KAAK4L,WAAa,IAAIC,eAAc,IAAIA,gBAAe1L,IACvDH,KAAK8L,OAAS,EAPlB,4GAUE,0HAC0C9L,KAAK4L,WAAWG,aAD1D,OAC0BC,EAD1B,OAEEhM,KAAKhB,QAAU,KAFjB,iBAGoBgN,GAHpB,4DAGWC,EAHX,QAI0B,eAAlBA,EAAMC,SAJd,kCAM2BD,EAAME,QAAQ,IAAIN,iBAN7C,QAMM7L,KAAKhB,QANX,4JASOgB,KAAKhB,QATZ,wBAUIoN,MAAM,qCAVV,4CAasBpM,KAAKhB,QAAQqN,cAbnC,QAaErM,KAAKsM,OAbP,uEAVF,8EA+BE,SAAQrG,GACN,IAAoBsG,EAAO,IAAIC,SAC7BxM,KAAKsM,OAAOvO,MAAMiC,KAAK8L,OAAQ9L,KAAK8L,OAAS7F,IAE/C,OADAjG,KAAK8L,QAAU7F,EACPA,GACR,KAAK,EACH,OAAOsG,EAAKE,UAAU,GACxB,KAAK,EACH,OAAOF,EAAKG,UAAU,GACxB,KAAK,EACH,OAAO9H,OAAO2H,EAAKI,aAAa,IAClC,QACE,KAAM,sCAAwC1G,KA3CpD,wBA+CE,WACE,IAAuB2G,EAAU,IAAIC,YACrC,IACE7M,KAAK8M,MAAQF,EAAQzJ,OACnBnD,KAAKsM,OAAOvO,MAAMiC,KAAK8L,OAAQR,EAAO3Q,SACxCqF,KAAK8L,QAAUR,EAAO3Q,OAClBqF,KAAK8M,OAASxB,GAChBc,MAAM,8CAERpM,KAAK+M,eAAiB/M,KAAKgN,QAAQzB,GACnCvL,KAAKiN,aAAejN,KAAKgN,QAAQxB,GAC7BxL,KAAK+M,gBAAkBrB,IACzB1L,KAAKkN,uBAAyBlN,KAAKgN,QAAQvB,IAE7C,MAAO0B,GAEP,YADAC,QAAQC,IAAIF,MA9DlB,0BAwEE,WACE,IAAwBG,EAAe,IAAIC,WAAWvN,KAAKsM,OAAOvO,MAChEiC,KAAK8L,OAAQ9L,KAAK8L,OAAS9L,KAAKiN,eAElCjN,KAAK8L,QAAU9L,KAAKiN,aACpBjN,KAAKd,SAAWsO,EAAmBlD,qBAChCnH,OAAOmK,KA9Ed,2BAiFE,WACE,IAAuBG,EAAgB,IAAIF,WAAWvN,KAAKsM,OAAOvO,MAChEiC,KAAK8L,OAAQ9L,KAAK8L,OAAS9L,KAAKkN,yBAElClN,KAAK8L,QAAU9L,KAAKkN,uBACpBlN,KAAKqB,mBAAqBmM,EAAmBxI,WAC1C7B,OAAOsK,KAvFd,2EA0FE,8GACQzN,KAAK0N,eADb,OAEE1N,KAAK2N,aACL3N,KAAK4N,eACL5N,KAAK6N,gBAJP,gDA1FF,gEAmGaC,GAMX,aAAc,uBACZ,IAAkCC,EAAQP,EAAmB/G,iBAAiBqB,KAE9E,IAAK,IAAIxK,KADT0C,KAAK6B,QAAU,IAAImM,IACHD,EACd/N,KAAK6B,QAAQoM,IAAIF,EAAMzQ,GAAMA,IAKtB4Q,GAMX,aAAc,uBACZ,IAAkCH,EAChCP,EAAmBvF,kBAAkBH,KAEvC,IAAK,IAAIxK,KADT0C,KAAK6B,QAAU,IAAImM,IACHD,EACd/N,KAAK6B,QAAQoM,IAAIF,EAAMzQ,GAAMA,I,yFC3I7B,eAA+B,cAAvB,kBAAc,G,cAGtB,eAA+B,cAAvB,kBAAc,G,cAGtB,eAA0B,cAAlB,aAAS,G,GAEjB,eAAI,mB,cAIJ,eAA+B,cAAvB,kBAAc,G,GAEtB,eAAI,mB,wIAjBR,eAoBK,WAnBH,eAA4C,yBAApC,EAAAuE,QAAQjF,IAAI,EAAA+E,UAAUnC,OAAI,GACxB,EAAAmC,UAAU7G,eAAc,e,iBAAlC,eAEK,SADH,G,eAA+B,IAAC,eAAG,EAAA6G,UAAUkF,YAAU,M,sBAE/C,EAAAlF,UAAU7G,eAAc,e,iBAAlC,eAEK,SADH,G,eAA+B,IAAC,eAAG,EAAA6G,UAAUmF,YAAU,M,sBAE/C,EAAAnF,UAAU7G,eAAc,e,iBAAlC,eAKK,SAJH,G,eAA0B,IAAC,eAAG,EAAA6G,UAAU+E,WAAW/L,QAAS,aAAU,eAAG,EAAAwT,gBAAiB,YAE1F,M,eAAI,IACJ,eAAG,EAAAC,WAAS,M,sBAEJ,EAAAzM,UAAU7G,eAAc,e,iBAAlC,eAKK,SAJH,G,eAA+B,IAAC,eAAG,EAAA6G,UAAUgF,WAAWhM,QAAS,aAAU,eAAG,EAAA0T,gBAAiB,YAE/F,M,eAAI,IACJ,eAAG,EAAAC,WAAS,M,wBAGhB,eAAa,I,0CCtBFC,GAAb,WASE,WAAYC,EAAeC,EAAOC,GAA2B,IAArBC,EAAqB,uDAAJ,GAAI,uBAC3D3O,KAAKwO,cAAgBA,EACrBxO,KAAKyO,MAAQA,EACbzO,KAAK0O,KAAOA,EACZ1O,KAAK2O,eAAiBA,EAb1B,+CAoBE,WACE,IADS,EACSC,EAAQ,GADjB,iBAEgB5O,KAAKwO,eAFrB,IAET,2BAA6C,kCAAnClR,EAAmC,KAA9BN,EAA8B,KAC3C4R,GAAStR,EAAM,MAAQN,EAAM2H,WAApBrH,aAHF,8BAKT,OAAOsR,IAzBX,8BAmCE,WACM5O,KAAKwO,cAAcvI,KAAOjG,KAAK2O,iBACjC3O,KAAKwO,cAAgBK,GAAQ7O,KAAKwO,cAAexO,KAAK2O,iBAExD,IAAkBG,EAAS,IAAIlU,OAiC/B,OAhCAkU,EAAOL,MAAQ,CACbM,KAAM/O,KAAKyO,MACXO,KAAM,UAERF,EAAOG,QAAU,CACfC,QAAS,OACTC,UAAW,sBAAwBnP,KAAK0O,KAAO,WAEjDI,EAAOM,OAAS,CACdC,OAAQ,aACRL,KAAM,MACNM,IAAK,MACLnV,KAAMiL,MAAMmK,KAAKvP,KAAKwO,cAAcjM,SAEtCuM,EAAOU,OAAS,CACd,CACEjT,KAAMyD,KAAKyO,MACXjP,KAAM,MACNiQ,OAAQ,MACRC,OAAQ,CAAC,MAAO,OAChBvV,KAAMiL,MAAMmK,KAAKvP,KAAKwO,eAAemB,KAAI,SAACC,GACxC,MAAO,CAAE5S,MAAO4S,EAAK,GAAIrT,KAAMqT,EAAK,OAEtCC,SAAU,CACRC,UAAW,CACTC,WAAY,GACZC,cAAe,EACfC,YAAa,yBAKdnB,MAxEX,KAqFA,SAASD,GAAQc,EAAKhB,GACpB,GAAIgB,EAAI1J,MAAQ0I,EAAgB,OAAOgB,EAEvC,IADA,IAAeO,EAAU,IAAIlC,IACpBvT,EAAE,EAAGA,EAAEkU,EAAgBlU,IAAK,CACnC,IADmC,EACjB0V,EAAO,EACPC,EAAU,GAFO,iBAGVT,GAHU,IAGnC,2BAA8B,kCAApBrS,EAAoB,KAAfN,EAAe,KACvBkT,EAAQtT,IAAIU,IACXN,EAAQmT,IACVA,EAAOnT,EACPoT,EAAU9S,IAPmB,8BAWnC4S,EAAQjC,IAAImC,EAASD,GAEvB,IAhBoC,EAgBlBE,EAAY,EAhBM,iBAiBXV,GAjBW,IAiBpC,2BAA8B,kCAApBrS,EAAoB,KAAfN,EAAe,KACvBkT,EAAQtT,IAAIU,KACf+S,GAAarT,IAnBmB,8BAuBpC,OADAkT,EAAQjC,IAAI,QAASoC,GACdH,E,cClGII,GAAb,WAKE,WAAYC,GAAY,uBACtBvQ,KAAKwQ,MAAQ,IAAI3E,eAAc,IAAIA,gBAAe0E,IAClDvQ,KAAKyQ,SAAW,IAAIzC,IACpBhO,KAAK0Q,KAAO,IAAI1C,IARpB,oGAeE,+HAC0ChO,KAAKwQ,MAAMzE,aADrD,OAC0BC,EAD1B,OAEqB2E,EAAY,wBACZC,EAAY,mBAC/B5E,EAAQ6E,SAAQ,SAAC5E,GACXA,EAAMC,SAAS4E,MAAMH,IACvB,EAAKF,SAASxC,IAAIhC,EAAMC,SAAS4E,MAAMF,GAAW,GAAI3E,MAN5D,gDAfF,mIA+BE,WAAUjL,EAAe+P,GAAzB,+GAIE,IAHyBpB,EAAM,GACXqB,EAAc,8BACjBC,EAAa,YACrBxW,EAAI,EAAGA,EAAIsW,EAAatW,IAAKkV,EAAIlV,GAAK,UAJjD,IAKMuF,KAAKyQ,SAAS7T,IAAIoE,GALxB,iCAOYhB,KAAKyQ,SAAS7T,IAAIoE,GAAemL,QACrC,IAAIN,iBARZ,OAMqBqF,EANrB,OAU4BC,EAAcD,EAAQE,MAAM,MAVxD,iBAcsBD,GAdtB,IAcI,2BAEE,IAFOlF,EAAsB,QACJoF,EAAWpF,EAAMmF,MAAM,KACvCzV,EAAI,EAAGA,EAAI0V,EAAS1W,OAAQgB,IACjBqT,EAAO,EACPsC,EAAQ,EACtBD,EAAS1V,GAAGmV,MAAMG,IACpBjC,EAAO7K,SAASkN,EAAS1V,GAAGmV,MAAM,QAAQ,IAC1CQ,EAAQnN,SAASkN,EAAS1V,GAAGmV,MAAM,QAAQ,MAE3C9B,EAAO7K,SAASkN,EAAS1V,GAAGmV,MAAME,IAClCM,EAAQnN,SAASkN,EAAS1V,GAAGmV,MAAME,KAErCO,GAAU5B,EAAK0B,EAAS,GAAIrC,EAAMsC,GA1B1C,8BA6BItR,KAAK0Q,KAAKzC,IAAIjN,EAAe2O,GA7BjC,wBAgCI3P,KAAK0Q,KAAKzC,IAAIjN,EAAe2O,GAhCjC,iDA/BF,+EAyEE,SAAM3O,EAAewQ,GACnB,IAD4B,EACHC,EAAQ,GACR9B,EAAM3P,KAAK0Q,KAAK9T,IAAIoE,GAFjB,iBAGZwQ,GAHY,IAG5B,2BAAyB,KAAhBE,EAAgB,QACvBD,EAAMxW,KAAK0W,GAAShC,EAClB+B,EAAIlP,WACJkP,EAAIlP,WAAakP,EAAI/O,aANG,8BAQ5B,OAAO8O,MAjFX,KA4FA,SAASF,GAAU5B,EAAKpT,EAAMyS,EAAMsC,GAClC,IAAK,IAAI7W,EAAIuU,EAAMvU,GAAK6W,EAAO7W,IAC7BkV,EAAIlV,GAAK8B,EAUb,SAASoV,GAAShC,EAAKX,EAAMsC,GAG3B,OAAO3B,EAAIX,GCpGb,SAAS4C,GAAejC,EAAKrS,EAAKN,GAC3B2S,EAAI/S,IAAIU,IACXqS,EAAI1B,IAAI3Q,EAAK,GAEfqS,EAAI1B,IAAI3Q,EAAKqS,EAAI/S,IAAIU,GAAON,GAUvB,SAAS6U,GAAwB/Q,GACtC,IADkD,EACnCgR,EAAiB,IAAI9D,IAClBlM,EAAS,IAAIgM,GAFmB,iBAG5BhN,GAH4B,IAGlD,2BAAkC,OAAzBC,EAAyB,yBACVA,EAAUU,YADA,IAChC,2BAA4C,KAAnCE,EAAmC,QACtCoQ,EAAgBjQ,EAAOD,QAAQjF,IAAI+E,EAAUnC,MACjDoS,GACEE,EACAC,EACApP,GAAUhB,EAAUgF,cANQ,gCAHgB,8BAYlD,OAAOmL,EAGF,SAASE,GAAyBlR,EAAY2J,GACnD,IAD8D,EAC/ClC,EAAkB,IAAIyF,IACdlM,EAAS,IAAIoM,GAClB+D,EAAc,EAH8B,iBAIxCnR,GAJwC,IAI9D,2BAAkC,OAAzBC,EAAyB,yBACVA,EAAUwH,iBADA,IAChC,2BAAiD,KAAxC5G,EAAwC,QAC3CoQ,EAAgBjQ,EAAOD,QAAQjF,IAAI+E,EAAUnC,MACjDoS,GACErJ,EACAwJ,EACApQ,EAAUwG,UAAUxF,YANQ,8BAShCsP,GAAeC,KAAKC,KAAKpR,EAAU6H,iBAAiB3C,KAAOwE,IAbC,8BAoB9D,OAFAlC,EAAgBsI,SAAQ,SAAC7T,EAAOM,GAAR,OAAgB2U,GAAejV,KACvDuL,EAAgB0F,IAAI,cAAegE,GAC5B1J,EAUF,SAAS6J,GAA0BtR,GACxC,IADoD,EACrCgR,EAAiB,IAAI9D,IAClBlM,EAAS,IAAIgM,GAFqB,iBAG9BhN,GAH8B,IAGpD,2BAAkC,OAAzBC,EAAyB,yBACVA,EAAUU,YADA,IAChC,2BAA4C,KAAnCE,EAAmC,QACtCoQ,EAAgBjQ,EAAOD,QAAQjF,IAAI+E,EAAUnC,MACjDoS,GACEE,EACAC,EACApQ,EAAUmF,aANkB,gCAHkB,8BAYpD,OAAOgL,EAYF,SAAeO,GAAtB,uC,gEAAO,WAA2CvR,EAAY2J,EAAW8F,GAAlE,4GACU+B,EAAqB,IAAItE,IACnCuC,EAFA,yCAGI+B,GAHJ,cAKDC,EAAW,IAAIjC,GAAUC,GALxB,SAMCgC,EAASC,OANV,wBAOiB1R,GAPjB,gEAOIC,EAPJ,kBAQGwR,EAAS9R,IACbM,EAAUC,cACVkR,KAAKC,KAAKpR,EAAU6H,iBAAiB3C,KAAOwE,IAV3C,yBAWmB1J,EAAUU,YAX7B,8DAWME,EAXN,QAYIA,EAAU7G,eAAe,cAZ7B,wDAaG2X,EAAoBF,EAASG,MAC/B3R,EAAUC,cACVW,EAAUgF,YACRgM,EAAmBC,GACrBH,EACA9Q,EAAUgF,WACVhF,EAAUmF,YAEZ6L,EAAiB9B,SAAQ,SAAC7T,EAAOM,GAC/BsU,GACEU,EACAhV,EACAN,MAzBH,uTA8BEsV,GA9BF,8E,yBAuCA,SAAeO,GAAtB,qC,gEAAO,WAAiCC,EAAShS,GAA1C,yGAAsD2J,EAAtD,+BAAkE,KAAM8F,EAAxE,+BAAqF,KAArF,KAGGuC,EAHH,OAIA,WAJA,OAYA,YAZA,OAoBA,aApBA,QA4BA,eA5BA,+BAKHC,EAAiBlB,GAAwB/Q,GACzCkS,EAAc,IAAIzE,GAChBwE,EACA,kCACA,UATC,mCAaHA,EAAiBX,GAA0BtR,GAC3CkS,EAAc,IAAIzE,GAChBwE,EACA,qBACA,SAjBC,oCAqBHA,EAAiBf,GAAyBlR,EAAY2J,GACtDuI,EAAc,IAAIzE,GAChBwE,EACA,uBACA,UAzBC,wDA8BsBV,GAA4BvR,EAAY2J,EAAW8F,GA9BzE,QA8BDwC,EA9BC,gFAmCHC,EAAc,IAAIzE,GAChBwE,EACA,uCACA,SAtCC,YAyCDC,EAzCC,0CA0CIA,GA1CJ,aA4CG,0DA5CH,2D,yBAqDA,SAASrQ,GAAUsQ,GACxB,IAAMC,EAAc,SAACC,EAAOzB,GAAR,OAAgByB,EAAQzB,EAAI/O,WAChD,OAAOsQ,EAAKG,OAAOF,EAAa,GAS3B,SAASG,GAAcJ,GAC5B,IAAMC,EAAc,SAACC,EAAOzB,GAAR,OAClByB,EAAQ,IAAMzB,EAAIlP,WAAa,IAAMkP,EAAI/O,UAAY,KACvD,OAAOsQ,EAAKG,OAAOF,EAAa,IAY3B,SAASN,GAAqBU,EAAWL,EAAMtY,GAGpD,IAFA,IAAIsX,EAActP,GAAUsQ,GACxBM,EAAqB,IAAIvF,IACpBvT,EAAI,EAAGA,EAAI6Y,EAAU3Y,OAAQF,IACpCmX,GACE2B,EACAC,GAAeF,EAAU7Y,IACzByX,KAAKuB,MAAM9Y,EAASsY,EAAKxY,GAAGkI,UAAYsP,IAG5C,OAAOsB,EASF,SAASC,GAAetH,GAC7B,IAAImF,EAAWnF,EAASkF,MAAM,KAC9B,OAAIC,EAAS1W,OAAO,EACX0W,EAASA,EAAS1W,OAAS,GACX,YAAd0W,EAAS,GACX,UAEA,eHxNI,QACb1R,MAAO,CACLgC,UAAW,CACTnC,KAAM5E,OACN8Y,UAAU,GAEZ7R,QAAS,CACPrC,KAAMwO,IACN0F,UAAU,IAGdvZ,KAXa,WAYX,MAAO,CACLgU,eAAgB,KAChBC,UAAW,KACXC,eAAgB,KAChBC,UAAW,OAGfqF,QAnBa,WAoBP3T,KAAK2B,UAAU+E,aACjB1G,KAAKmO,eAAiBxL,GAAU3C,KAAK2B,UAAU+E,YAC/C1G,KAAKoO,UAAYiF,GAAcrT,KAAK2B,UAAU+E,aAE5C1G,KAAK2B,UAAUgF,aACjB3G,KAAKqO,eAAiB1L,GAAU3C,KAAK2B,UAAUgF,YAC/C3G,KAAKsO,UAAY+E,GAAcrT,KAAK2B,UAAUgF,e,UIjDpD,GAAOjI,OAAS,GAChB,GAAOkC,UAAY,kBAEJ,UPkBA,IACb3C,WAAY,CACV2V,oBAEFjU,MAAO,CACLoB,UAAW,CACTvB,KAAM5E,OACN8Y,UAAU,IAGdvZ,KAVa,WAWX,MAAO,CACLuH,SAAS,EACTI,OAAQ,OAGZ+R,QAhBa,WAiBX7T,KAAK8B,OAAS,IAAI,IAEpBhC,QAAS,CACP0B,OADO,WAELxB,KAAK0B,SAAW1B,KAAK0B,W,UQ1C3B,GAAOhD,OAAS,EAChB,GAAOkC,UAAY,kBAEJ,U,8ECPb,eAAoB,UAAhB,eAAW,G,eAETpC,MAAM,S,GACJ,eAA4B,cAApB,eAAW,G,GACnB,eAA4B,cAApB,eAAW,G,GAErB,eAA0C,cAAlC,6BAAyB,G,eAMjCA,MAAM,S,GAEN,eAA8B,cAAtB,iBAAa,G,yBAQrB,eAA0B,cAAlB,aAAS,G,yBAKjB,eAAsB,cAAd,SAAK,G,yBAOb,eAAuB,cAAf,UAAM,G,4HAlCpB,GACW,EAAAO,S,iBAAX,eASM,UARJ,eAOK,KAPL,GAOK,CANH,eAAwD,WAApD,G,eAA4B,IAAC,eAAG,EAAAA,QAAQxC,MAAI,KAChD,eAA8D,WAA1D,G,eAA4B,IAAC,eAAG,EAAAwC,QAAQkH,MAAO,SAAM,KACzD,eAGK,WAFH,G,eAA0C,IAC1C,eAAG,EAAAlH,QAAQ+U,kBAAgB,U,sBAItB,EAAA9U,SAAW,EAAAA,QAAQE,U,iBAA9B,eA8BM,UA7BJ,eA4BK,KA5BL,GA4BK,CA3BH,eAOK,WANH,GAEY,EAAAF,QAAQE,SAAS4B,WAAU,GAAI6H,kB,iBAA3C,eAEO,UAFsD,S,iBAG7D,eAA8B,UAAjB,UAEf,eAIK,WAHH,GACY,EAAA3J,QAAQE,SAASmM,e,iBAA7B,eAA4D,UAAhB,S,iBAC5C,eAA8B,UAAjB,UAEf,eAMK,WALH,GACY,EAAArM,QAAQE,SAASkM,yBAAyBzB,iB,iBAAtD,eAEO,UAFgE,S,iBAGvE,eAA8B,UAAjB,UAEf,eAMK,WALH,GACY,EAAA3K,QAAQE,SAASkM,yBAAyBxB,a,iBAAtD,eAEO,UAF4D,S,iBAGnE,eAA8B,UAAjB,e,8BASN,IACbjK,MAAO,CACLZ,QAAS,CACPS,KAAMuU,KACNL,UAAU,GAEZ1U,QAAS,CACPQ,KAAM,GACNkU,UAAU,K,UCnDhB,GAAOhV,OAAS,GAChB,GAAOkC,UAAY,kBAEJ,UX8CA,IACb3C,WAAY,CACV+V,mBACAC,cAEFtU,MAAO,CACLZ,QAAS,CACPS,KAAMuU,KACNlU,QAAS,MAEXb,QAAS,CACPQ,KAAM,GACNK,QAAS,OAGbC,QAAS,CACPwB,SAAUA,KAId,SAASA,GAAS4S,GAEhB,IADA,IAAIC,EAAY,GACP1Z,EAAI,EAAGA,EAAIyZ,EAAYvZ,OAAQF,IACtC0Z,GAAaD,EAAYzZ,GAAGkK,SAAS,IAAM,KACtClK,EAAI,GAAK,IAAM,IAClB0Z,GAAa,MAGjB,OAAOA,E,UY7ET,GAAOzV,OAAS,EAChB,GAAOkC,UAAY,kBAEJ,U,wGCSR,gD,kBAWA,iC,kBAaA,kC,kBAYA,6B,oTApDL,eAGE,G,WAFS,EAAAwT,iB,qDAAA,EAAAA,iBAAgB,IACxBC,OAAQ,EAAAC,kB,gCAEA,EAAAtB,a,iBAAX,eAEM,UADJ,eAAuC,GAA5BA,YAAa,EAAAA,aAAW,2B,sBAErC,eAAa,GACb,eAuBQ,Q,YAtBN,iBAUQ,CAVR,eAUQ,GATNrU,KAAK,KACLC,GAAG,K,aAEH,iBAKQ,CALR,eAKQ,GAJN2V,MAAA,GACC,QAAK,+BAAE,EAAAC,YAAW,a,aACpB,iBAED,C,uBAEF,eAUQ,GATN7V,KAAK,KACLC,GAAG,K,aAEH,iBAKQ,CALR,eAKQ,GAJN2V,MAAA,GACC,QAAK,+BAAE,EAAAC,YAAW,c,aACpB,iBAED,C,iCAGJ,eAwBQ,Q,YAvBN,iBAUQ,CAVR,eAUQ,GATN7V,KAAK,KACLC,GAAG,K,aAEH,iBAKQ,CALR,eAKQ,GAJN2V,MAAA,GACC,QAAK,+BAAE,EAAAC,YAAW,e,aACpB,iBAED,C,uBAEF,eAWQ,GAVN7V,KAAK,KACLC,GAAG,K,aAEH,iBAMQ,CANR,eAMQ,GALN2V,MAAA,GACCE,UAAW,EAAAlE,WACX,QAAK,+BAAE,EAAAiE,YAAW,iB,aACpB,iBAED,C,gDAGJ,eAcQ,Q,YAbN,iBAGE,CAHF,eAGE,GAFA7V,KAAK,KACLC,GAAG,MAEL,eAQQ,GAPND,KAAK,KACLC,GAAG,K,aAEH,iBAGE,CAHF,eAGE,GAFAC,MAAM,mDACL,aAAa,EAAA6V,a,+UCpEpB,eAOQ,GANNH,MAAA,GACA/U,KAAK,SACLhB,MAAM,OACL,QAAO,EAAAmW,oB,aAER,iBAA8B,C,8BAA3B,EAAAC,cAAc,EAAAC,YAAS,O,oBAE5B,eAeQ,GAfDrW,MAAM,QAAM,C,YAEf,iBAAuB,E,mBADzB,eAaQ,2BAZU,EAAA6V,QAAM,SAAfxV,G,wBADT,eAaQ,GAXLvB,IAAKuB,EACNF,KAAK,KACLC,GAAG,K,aAEH,iBAKC,CALD,eAKC,SAJCY,KAAK,WACJxC,MAAO6B,EACPiW,QAAS,EAAAC,WAAWnY,IAAIiC,GACxB,SAAM,+BAAE,EAAAmW,eAAeC,EAAOC,OAAOlY,U,6BAE3B6B,G,iBAAb,eAAyC,0BAAjBA,GAAK,I,gEAMpB,IACbc,MAAO,CACL0U,OAAQ,CACN7U,KAAM4F,MACNvF,QAAS,IAAIuF,OAEf2P,WAAY,CACVvV,KAAMwO,IACNnO,QAAS,IAAImO,MAGjB7T,KAXa,WAYX,MAAO,CACL0a,UAAW,EACXD,cAAe,CAAC,aAAc,kBAGlCjB,QAjBa,WAiBH,uBAEQ3T,KAAKqU,QAFb,IAER,2BAA6B,KAApB/W,EAAoB,QAC3B0C,KAAK+U,WAAW9G,IAAI3Q,GAAK,IAHnB,gCAMVwC,QAAS,CACPkV,eADO,SACQG,GACbnV,KAAK+U,WAAW9G,IAAIkH,GAAYnV,KAAK+U,WAAWnY,IAAIuY,IACpDnV,KAAKC,MAAM,oBAAqBD,KAAK+U,aAEvCJ,mBALO,WAML3U,KAAK6U,UAAY,EAAI7U,KAAK6U,UADP,uBAEH7U,KAAK+U,WAAWxS,QAFb,IAEnB,2BAAwC,KAA/BjF,EAA+B,QACtC0C,KAAK+U,WAAW9G,IAAI3Q,EAAKgM,QAAQtJ,KAAK6U,aAHrB,kC,UCnDzB,GAAOnW,OAAS,GAChB,GAAOkC,UAAY,kBAEJ,U,0HCPb,eAGE,GAFApC,MAAM,QACLsQ,OAAQ,EAAAsG,kB,8HAgBb,gBAAI,CACF,QACA,QACA,QACA,QACA,UAGa,QACbnX,WAAY,CACVoX,OAAA,SAEFC,QAAS,mBACN,QAAY,SAEf3V,MAAO,CACLqT,YAAa,CACXxT,KAAM,GACNkU,UAAU,IAGd6B,SAAU,CACRH,iBADQ,WAEN,OAAOpV,KAAKgT,YAAYoC,sB,UCrC9B,GAAO1W,OAAS,GAChB,GAAOkC,UAAY,kBAEJ,UJ0EA,IACb3C,WAAY,CACVuX,mBACAC,YACAC,YAEF/V,MAAO,CACLT,SAAU,CACRM,KAAM,EAAmB8K,qBACzBzK,QAAS,iBAAM,MAGnB1F,KAZa,WAaX,MAAO,CACLia,iBAAkB,IAAIpG,IACtBgF,YAAa,KACb2C,SAAU,GACVpF,WAAY,OAGhBgF,SAAU,CACRjB,iBADQ,WAEN,OAAOtU,KAAKd,SAAS4B,WAAW6O,KAAI,SAAC5O,GACnC,OAAOA,EAAUC,mBAIvBlB,QAAS,CACD0U,YADC,SACW1B,GAAS,qKACrB8C,EAAoB,EAAK1W,SAAS4B,WAAW+U,QAAO,SAAC9U,GAAD,OACtD,EAAKqT,iBAAiBxX,IAAImE,EAAUC,kBAFb,kBAKE6R,GACvBC,EACA8C,EACA,EAAK1W,SAASuL,UACd,EAAK8F,YATgB,OAKvB,EAAKyC,YALkB,0DAYvB5G,MAAM,gDAAD,MAZkB,4DAe3BsI,YAhBO,SAgBKtU,GAEVJ,KAAKuQ,WAAanQ,EAAM,M,UK1H9B,GAAO1B,OAAS,GAChB,GAAOkC,UAAY,kBAEJ,UrB6BA,IACb3C,WAAY,CACVyX,WACAI,iBACAC,uBAEF5b,KANa,WAOX,MAAO,CACL4E,QAAS,KACTC,QAAS,OAGbc,QAAS,CACDhB,UADC,SACSsB,GAAO,+JACrB,EAAKrB,QAAUqB,EAAM,GADA,SAGnB,EAAKpB,QAAU,IAAI,GAAQ,EAAKD,SAHb,SAIb,EAAKC,QAAQwT,OAJA,0DAMnBpG,MAAM,yDACNgB,QAAQC,IAAR,MAPmB,8DsB/C3B,GAAO3O,OAAS,EAED,U,ICJRF,MAAM,S,GACT,eAA4C,SAAzC,yCAAqC,G,yCAD1C,eAEM,MAFN,GAEM,CADJ,KCDJ,MAAMwX,GAAS,GACfA,GAAOtX,OAAS,GAED,UCATuX,GAAS,CACb,CACEC,KAAM,IACN3Z,KAAM,WACN4Z,UAAWC,GACXC,KAAM,CACJ5H,MAAO,oCAGX,CACEyH,KAAM,SACN3Z,KAAM,QACN4Z,UAAWG,KAITC,GAASC,eAAa,CAC1BC,QAASC,eAAiBC,gBAC1BV,YAIFM,GAAOK,YAAW,SAACrY,EAAIgR,EAAMsH,GAI3B,IAAMC,EAAmBvY,EAAGwY,QAAQhZ,QAAQiZ,UAAUC,MAAK,SAAApa,GAAC,OAAIA,EAAEwZ,MAAQxZ,EAAEwZ,KAAK5H,SAG3EyI,EAAkB3Y,EAAGwY,QAAQhZ,QAAQiZ,UAAUC,MAAK,SAAApa,GAAC,OAAIA,EAAEwZ,MAAQxZ,EAAEwZ,KAAKc,YAE1EC,EAA0B7H,EAAKwH,QAAQhZ,QAAQiZ,UAAUC,MAAK,SAAApa,GAAC,OAAIA,EAAEwZ,MAAQxZ,EAAEwZ,KAAKc,YAa1F,GAVGL,EACDO,SAAS5I,MAAQqI,EAAiBT,KAAK5H,MAC/B2I,IACRC,SAAS5I,MAAQ2I,EAAwBf,KAAK5H,OAIhDrJ,MAAMmK,KAAK8H,SAASC,iBAAiB,iCAAiC3H,KAAI,SAAA4H,GAAE,OAAIA,EAAGC,WAAWC,YAAYF,OAGtGL,EAAiB,OAAOL,IAG5BK,EAAgBb,KAAKc,SAASxH,KAAI,SAAA+H,GAChC,IAAMjU,EAAM4T,SAASM,cAAc,QASnC,OAPA/c,OAAO2H,KAAKmV,GAAQ7G,SAAQ,SAAAvT,GAC1BmG,EAAImU,aAAata,EAAKoa,EAAOpa,OAI/BmG,EAAImU,aAAa,6BAA8B,IAExCnU,KAGNoN,SAAQ,SAAApN,GAAG,OAAI4T,SAASQ,KAAKC,YAAYrU,MAE5CoT,OAGaN,U,aCnEAwB,mBAAY,CACzBC,MAAO,GACPC,UAAW,GACXC,QAAS,GACThd,QAAS,KCALid,GAAMC,eAAUC,GACtBF,GAAIG,IAAI/B,IACR4B,GAAIG,IAAIC,IACRJ,GAAIG,IAAIE,GAERL,GAAIM,MAAM,S,6GCXV,W,oCCAA,W,oCCAA,W,2DCAA,W,gFCAA,W,kCCAA,W","file":"js/app.4cc1435c.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/analyseOTA/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./PieChart.vue?vue&type=style&index=0&id=6d824429&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./PartitionDetail.vue?vue&type=style&index=0&id=c892fb34&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./OperationDetail.vue?vue&type=style&index=0&id=225704de&scoped=true&lang=css\"","import '@mdi/font/css/materialdesignicons.css'\nimport 'vuetify/lib/styles/main.sass'\nimport { createVuetify } from 'vuetify'\nimport * as components from 'vuetify/lib/components'\nimport * as directives from 'vuetify/lib/directives'\n\nexport default createVuetify({\n  components,\n  directives,\n})\n","<template>\n  <v-app>\n    <v-app-bar\n      rounded\n      color=\"primary\"\n    >\n      <v-app-bar-title> OTA Analyzer </v-app-bar-title>\n      <v-spacer />\n      <v-btn\n        v-for=\"link in links\"\n        :key=\"`${link}-header-link`\"\n        :to=\"{ name: link }\"\n        class=\"ml-5\"\n        color=\"primary\"\n      >\n        {{ link }}\n      </v-btn>\n    </v-app-bar>\n    <v-main>\n      <v-container fluid>\n        <router-view />\n      </v-container>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      links: ['Analysis', 'About'],\n    }\n  },\n}\n</script>\n\n<style>\nh3 {\n  text-align: center;\n}\n</style>","import { render } from \"./App.vue?vue&type=template&id=272f92fd\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=272f92fd&lang=css\"\nscript.render = render\n\nexport default script","<template>\n  <v-row>\n    <v-col\n      cols=\"12\"\n      md=\"6\"\n    >\n      <BaseFile\n        label=\"Please drag and drop an OTA package or Select one\"\n        @file-select=\"unpackOTA\"\n      />\n      <PayloadDetail\n        v-if=\"zipFile && payload\"\n        :zipFile=\"zipFile\"\n        :payload=\"payload\"\n      />\n    </v-col>\n    <v-divider\n      vertical\n    />\n    <v-col\n      cols=\"12\"\n      md=\"6\"\n    >\n      <PayloadComposition\n        v-if=\"zipFile && payload.manifest\"\n        :manifest=\"payload.manifest\"\n      />\n    </v-col>\n  </v-row>\n</template>\n\n<script>\nimport BaseFile from '@/components/BaseFile.vue'\nimport PayloadDetail from '@/components/PayloadDetail.vue'\nimport PayloadComposition from '@/components/PayloadComposition.vue'\nimport { Payload } from '@/services/payload.js'\n\nexport default {\n  components: {\n    BaseFile,\n    PayloadDetail,\n    PayloadComposition,\n  },\n  data() {\n    return {\n      zipFile: null,\n      payload: null,\n    }\n  },\n  methods: {\n    async unpackOTA(files) {\n      this.zipFile = files[0]\n      try {\n        this.payload = new Payload(this.zipFile)\n        await this.payload.init()\n      } catch (err) {\n        alert('Please check if this is a correct OTA package (.zip).')\n        console.log(err)\n      }\n    },\n  },\n}\n</script>\n","<template>\n  <label class=\"file-select ma-5\">\n    <div\n      class=\"select-button\"\n      @dragover=\"dragover\"\n      @dragleave=\"dragleave\"\n      @drop=\"drop\"\n    >\n      <span v-if=\"label\">{{ !fileName ? label : '' }}</span>\n      <span v-else>Select File</span>\n      <div v-if=\"fileName\"> File selected: {{ fileName }}</div>\n    </div>\n    <input\n      ref=\"file\"\n      type=\"file\"\n      accept=\".zip\"\n      @change=\"handleFileChange\"\n    >\n  </label>\n</template>\n\n<script>\nexport default {\n  props: {\n    label: {\n      type: String,\n      default: '',\n    },\n  },\n  data() {\n    return {\n      fileName: '',\n    }\n  },\n  methods: {\n    handleFileChange(event) {\n      this.$emit('file-select', this.$refs.file.files)\n      this.fileName = this.$refs.file.files[0].name\n    },\n    dragover(event) {\n      event.preventDefault()\n      if (!event.currentTarget.classList.contains('file-hover')) {\n        event.currentTarget.classList.add('file-hover')\n      }\n    },\n    dragleave(event) {\n      event.currentTarget.classList.remove('file-hover')\n    },\n    drop(event) {\n      event.preventDefault()\n      this.$refs.file.files = event.dataTransfer.files\n      this.handleFileChange(event)\n      event.currentTarget.classList.remove('file-hover')\n    },\n  },\n}\n</script>\n\n<style scoped>\n.file-select > .select-button {\n  padding: 3rem;\n  border-radius: 0.3rem;\n  border: 4px dashed #eaebec;\n  text-align: center;\n  font-weight: bold;\n  cursor: pointer;\n}\n\n.file-select > input[type='file'] {\n  display: none;\n}\n\n.file-hover {\n  background-color: #95e995;\n}\n</style>","import { render } from \"./BaseFile.vue?vue&type=template&id=6b3bd7f8&scoped=true\"\nimport script from \"./BaseFile.vue?vue&type=script&lang=js\"\nexport * from \"./BaseFile.vue?vue&type=script&lang=js\"\n\nimport \"./BaseFile.vue?vue&type=style&index=0&id=6b3bd7f8&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-6b3bd7f8\"\n\nexport default script","<template>\n  <BasicInfo\n    :zipFile=\"zipFile\"\n    :payload=\"payload\"\n    class=\"mb-5\"\n  />\n  <v-divider />\n  <div v-if=\"payload\">\n    <h3>Partition List</h3>\n    <v-row\n      v-if=\"payload.manifest\"\n      class=\"mb-5\"\n    >\n      <v-col\n        v-for=\"partition in payload.manifest.partitions\"\n        :key=\"partition.partitionName\"\n        cols=\"12\"\n        md=\"4\"\n      >\n        <v-card\n          elevation=\"5\"\n          hover\n          shaped\n          class=\"partial-info\"\n        >\n          <h4> {{ partition.partitionName }} </h4>\n          <p v-if=\"partition.estimateCowSize\">\n            <strong> Estimate COW Size: </strong> {{ partition.estimateCowSize }} Bytes\n          </p>\n          <p v-else>\n            <strong> Estimate COW Size: </strong> 0 Bytes\n          </p>\n          <PartitionDetail :partition=\"partition\" />\n        </v-card>\n      </v-col>\n    </v-row>\n    <v-divider />\n    <h3>Metadata Signature</h3>\n    <div\n      v-if=\"payload.metadata_signature\"\n      class=\"signature\"\n    >\n      <span style=\"white-space: pre-wrap\">\n        {{ octToHex(payload.metadata_signature.signatures[0].data) }}\n      </span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport PartitionDetail from './PartitionDetail.vue'\nimport BasicInfo from '@/components/BasicInfo.vue'\nimport { Payload } from '@/services/payload.js'\n\nexport default {\n  components: {\n    PartitionDetail,\n    BasicInfo,\n  },\n  props: {\n    zipFile: {\n      type: File,\n      default: null,\n    },\n    payload: {\n      type: Payload,\n      default: null,\n    },\n  },\n  methods: {\n    octToHex: octToHex,\n  },\n}\n\nfunction octToHex(bufferArray) {\n  let hex_table = ''\n  for (let i = 0; i < bufferArray.length; i++) {\n    hex_table += bufferArray[i].toString(16) + ' '\n    if ((i + 1) % 16 == 0) {\n      hex_table += '\\n'\n    }\n  }\n  return hex_table\n}\n</script>\n\n<style scoped>\n.signature {\n  overflow: scroll;\n  height: 200px;\n  width: 100%;\n  word-break: break-all;\n  text-align: center;\n}\n\n.partial-info {\n  padding: 5px;\n}\n</style>","<template>\n  <p\n    class=\"toggle\"\n    @click=\"toggle()\"\n  >\n    Total Operations: {{ partition.operations.length }}\n    <ul\n      v-if=\"showOPs\"\n    >\n      <li\n        v-for=\"operation in partition.operations\"\n        :key=\"operation.dataSha256Hash\"\n      >\n        <OperationDetail\n          :operation=\"operation\"\n          :mapType=\"opType.mapType\"\n        />\n      </li>\n    </ul>\n  </p>\n</template>\n\n<script>\nimport { OpType } from '@/services/payload.js'\nimport OperationDetail from '@/components/OperationDetail.vue'\n\nexport default {\n  components: {\n    OperationDetail,\n  },\n  props: {\n    partition: {\n      type: Object,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      showOPs: false,\n      opType: null,\n    }\n  },\n  created() {\n    this.opType = new OpType()\n  },\n  methods: {\n    toggle() {\n      this.showOPs = !this.showOPs\n    },\n  },\n}\n</script>\n\n<style scoped>\n.toggle {\n  display: block;\n  cursor: pointer;\n  color: #00c255;\n}\n\nli {\n  list-style-type: none;\n}\n</style>","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\nimport * as $protobuf from \"protobufjs/minimal\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const chromeos_update_engine = $root.chromeos_update_engine = (() => {\n\n    /**\n     * Namespace chromeos_update_engine.\n     * @exports chromeos_update_engine\n     * @namespace\n     */\n    const chromeos_update_engine = {};\n\n    chromeos_update_engine.Extent = (function() {\n\n        /**\n         * Properties of an Extent.\n         * @memberof chromeos_update_engine\n         * @interface IExtent\n         * @property {number|Long|null} [startBlock] Extent startBlock\n         * @property {number|Long|null} [numBlocks] Extent numBlocks\n         */\n\n        /**\n         * Constructs a new Extent.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents an Extent.\n         * @implements IExtent\n         * @constructor\n         * @param {chromeos_update_engine.IExtent=} [properties] Properties to set\n         */\n        function Extent(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Extent startBlock.\n         * @member {number|Long} startBlock\n         * @memberof chromeos_update_engine.Extent\n         * @instance\n         */\n        Extent.prototype.startBlock = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Extent numBlocks.\n         * @member {number|Long} numBlocks\n         * @memberof chromeos_update_engine.Extent\n         * @instance\n         */\n        Extent.prototype.numBlocks = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new Extent instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {chromeos_update_engine.IExtent=} [properties] Properties to set\n         * @returns {chromeos_update_engine.Extent} Extent instance\n         */\n        Extent.create = function create(properties) {\n            return new Extent(properties);\n        };\n\n        /**\n         * Encodes the specified Extent message. Does not implicitly {@link chromeos_update_engine.Extent.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {chromeos_update_engine.IExtent} message Extent message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Extent.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.startBlock != null && Object.hasOwnProperty.call(message, \"startBlock\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.startBlock);\n            if (message.numBlocks != null && Object.hasOwnProperty.call(message, \"numBlocks\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.numBlocks);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Extent message, length delimited. Does not implicitly {@link chromeos_update_engine.Extent.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {chromeos_update_engine.IExtent} message Extent message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Extent.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Extent message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.Extent} Extent\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Extent.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.Extent();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.startBlock = reader.uint64();\n                    break;\n                case 2:\n                    message.numBlocks = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Extent message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.Extent} Extent\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Extent.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Extent message.\n         * @function verify\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Extent.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.startBlock != null && message.hasOwnProperty(\"startBlock\"))\n                if (!$util.isInteger(message.startBlock) && !(message.startBlock && $util.isInteger(message.startBlock.low) && $util.isInteger(message.startBlock.high)))\n                    return \"startBlock: integer|Long expected\";\n            if (message.numBlocks != null && message.hasOwnProperty(\"numBlocks\"))\n                if (!$util.isInteger(message.numBlocks) && !(message.numBlocks && $util.isInteger(message.numBlocks.low) && $util.isInteger(message.numBlocks.high)))\n                    return \"numBlocks: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an Extent message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.Extent} Extent\n         */\n        Extent.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.Extent)\n                return object;\n            let message = new $root.chromeos_update_engine.Extent();\n            if (object.startBlock != null)\n                if ($util.Long)\n                    (message.startBlock = $util.Long.fromValue(object.startBlock)).unsigned = true;\n                else if (typeof object.startBlock === \"string\")\n                    message.startBlock = parseInt(object.startBlock, 10);\n                else if (typeof object.startBlock === \"number\")\n                    message.startBlock = object.startBlock;\n                else if (typeof object.startBlock === \"object\")\n                    message.startBlock = new $util.LongBits(object.startBlock.low >>> 0, object.startBlock.high >>> 0).toNumber(true);\n            if (object.numBlocks != null)\n                if ($util.Long)\n                    (message.numBlocks = $util.Long.fromValue(object.numBlocks)).unsigned = true;\n                else if (typeof object.numBlocks === \"string\")\n                    message.numBlocks = parseInt(object.numBlocks, 10);\n                else if (typeof object.numBlocks === \"number\")\n                    message.numBlocks = object.numBlocks;\n                else if (typeof object.numBlocks === \"object\")\n                    message.numBlocks = new $util.LongBits(object.numBlocks.low >>> 0, object.numBlocks.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Extent message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.Extent\n         * @static\n         * @param {chromeos_update_engine.Extent} message Extent\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Extent.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.startBlock = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.startBlock = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.numBlocks = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.numBlocks = options.longs === String ? \"0\" : 0;\n            }\n            if (message.startBlock != null && message.hasOwnProperty(\"startBlock\"))\n                if (typeof message.startBlock === \"number\")\n                    object.startBlock = options.longs === String ? String(message.startBlock) : message.startBlock;\n                else\n                    object.startBlock = options.longs === String ? $util.Long.prototype.toString.call(message.startBlock) : options.longs === Number ? new $util.LongBits(message.startBlock.low >>> 0, message.startBlock.high >>> 0).toNumber(true) : message.startBlock;\n            if (message.numBlocks != null && message.hasOwnProperty(\"numBlocks\"))\n                if (typeof message.numBlocks === \"number\")\n                    object.numBlocks = options.longs === String ? String(message.numBlocks) : message.numBlocks;\n                else\n                    object.numBlocks = options.longs === String ? $util.Long.prototype.toString.call(message.numBlocks) : options.longs === Number ? new $util.LongBits(message.numBlocks.low >>> 0, message.numBlocks.high >>> 0).toNumber(true) : message.numBlocks;\n            return object;\n        };\n\n        /**\n         * Converts this Extent to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.Extent\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Extent.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Extent;\n    })();\n\n    chromeos_update_engine.Signatures = (function() {\n\n        /**\n         * Properties of a Signatures.\n         * @memberof chromeos_update_engine\n         * @interface ISignatures\n         * @property {Array.<chromeos_update_engine.Signatures.ISignature>|null} [signatures] Signatures signatures\n         */\n\n        /**\n         * Constructs a new Signatures.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a Signatures.\n         * @implements ISignatures\n         * @constructor\n         * @param {chromeos_update_engine.ISignatures=} [properties] Properties to set\n         */\n        function Signatures(properties) {\n            this.signatures = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Signatures signatures.\n         * @member {Array.<chromeos_update_engine.Signatures.ISignature>} signatures\n         * @memberof chromeos_update_engine.Signatures\n         * @instance\n         */\n        Signatures.prototype.signatures = $util.emptyArray;\n\n        /**\n         * Creates a new Signatures instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {chromeos_update_engine.ISignatures=} [properties] Properties to set\n         * @returns {chromeos_update_engine.Signatures} Signatures instance\n         */\n        Signatures.create = function create(properties) {\n            return new Signatures(properties);\n        };\n\n        /**\n         * Encodes the specified Signatures message. Does not implicitly {@link chromeos_update_engine.Signatures.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {chromeos_update_engine.ISignatures} message Signatures message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Signatures.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.signatures != null && message.signatures.length)\n                for (let i = 0; i < message.signatures.length; ++i)\n                    $root.chromeos_update_engine.Signatures.Signature.encode(message.signatures[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Signatures message, length delimited. Does not implicitly {@link chromeos_update_engine.Signatures.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {chromeos_update_engine.ISignatures} message Signatures message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Signatures.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Signatures message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.Signatures} Signatures\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Signatures.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.Signatures();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.signatures && message.signatures.length))\n                        message.signatures = [];\n                    message.signatures.push($root.chromeos_update_engine.Signatures.Signature.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Signatures message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.Signatures} Signatures\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Signatures.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Signatures message.\n         * @function verify\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Signatures.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.signatures != null && message.hasOwnProperty(\"signatures\")) {\n                if (!Array.isArray(message.signatures))\n                    return \"signatures: array expected\";\n                for (let i = 0; i < message.signatures.length; ++i) {\n                    let error = $root.chromeos_update_engine.Signatures.Signature.verify(message.signatures[i]);\n                    if (error)\n                        return \"signatures.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Signatures message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.Signatures} Signatures\n         */\n        Signatures.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.Signatures)\n                return object;\n            let message = new $root.chromeos_update_engine.Signatures();\n            if (object.signatures) {\n                if (!Array.isArray(object.signatures))\n                    throw TypeError(\".chromeos_update_engine.Signatures.signatures: array expected\");\n                message.signatures = [];\n                for (let i = 0; i < object.signatures.length; ++i) {\n                    if (typeof object.signatures[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.Signatures.signatures: object expected\");\n                    message.signatures[i] = $root.chromeos_update_engine.Signatures.Signature.fromObject(object.signatures[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Signatures message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.Signatures\n         * @static\n         * @param {chromeos_update_engine.Signatures} message Signatures\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Signatures.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.signatures = [];\n            if (message.signatures && message.signatures.length) {\n                object.signatures = [];\n                for (let j = 0; j < message.signatures.length; ++j)\n                    object.signatures[j] = $root.chromeos_update_engine.Signatures.Signature.toObject(message.signatures[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Signatures to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.Signatures\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Signatures.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        Signatures.Signature = (function() {\n\n            /**\n             * Properties of a Signature.\n             * @memberof chromeos_update_engine.Signatures\n             * @interface ISignature\n             * @property {number|null} [version] Signature version\n             * @property {Uint8Array|null} [data] Signature data\n             * @property {number|null} [unpaddedSignatureSize] Signature unpaddedSignatureSize\n             */\n\n            /**\n             * Constructs a new Signature.\n             * @memberof chromeos_update_engine.Signatures\n             * @classdesc Represents a Signature.\n             * @implements ISignature\n             * @constructor\n             * @param {chromeos_update_engine.Signatures.ISignature=} [properties] Properties to set\n             */\n            function Signature(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Signature version.\n             * @member {number} version\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @instance\n             */\n            Signature.prototype.version = 0;\n\n            /**\n             * Signature data.\n             * @member {Uint8Array} data\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @instance\n             */\n            Signature.prototype.data = $util.newBuffer([]);\n\n            /**\n             * Signature unpaddedSignatureSize.\n             * @member {number} unpaddedSignatureSize\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @instance\n             */\n            Signature.prototype.unpaddedSignatureSize = 0;\n\n            /**\n             * Creates a new Signature instance using the specified properties.\n             * @function create\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {chromeos_update_engine.Signatures.ISignature=} [properties] Properties to set\n             * @returns {chromeos_update_engine.Signatures.Signature} Signature instance\n             */\n            Signature.create = function create(properties) {\n                return new Signature(properties);\n            };\n\n            /**\n             * Encodes the specified Signature message. Does not implicitly {@link chromeos_update_engine.Signatures.Signature.verify|verify} messages.\n             * @function encode\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {chromeos_update_engine.Signatures.ISignature} message Signature message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Signature.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.version);\n                if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);\n                if (message.unpaddedSignatureSize != null && Object.hasOwnProperty.call(message, \"unpaddedSignatureSize\"))\n                    writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.unpaddedSignatureSize);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Signature message, length delimited. Does not implicitly {@link chromeos_update_engine.Signatures.Signature.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {chromeos_update_engine.Signatures.ISignature} message Signature message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Signature.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Signature message from the specified reader or buffer.\n             * @function decode\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {chromeos_update_engine.Signatures.Signature} Signature\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Signature.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.Signatures.Signature();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.version = reader.uint32();\n                        break;\n                    case 2:\n                        message.data = reader.bytes();\n                        break;\n                    case 3:\n                        message.unpaddedSignatureSize = reader.fixed32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Signature message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {chromeos_update_engine.Signatures.Signature} Signature\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Signature.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Signature message.\n             * @function verify\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Signature.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.version != null && message.hasOwnProperty(\"version\"))\n                    if (!$util.isInteger(message.version))\n                        return \"version: integer expected\";\n                if (message.data != null && message.hasOwnProperty(\"data\"))\n                    if (!(message.data && typeof message.data.length === \"number\" || $util.isString(message.data)))\n                        return \"data: buffer expected\";\n                if (message.unpaddedSignatureSize != null && message.hasOwnProperty(\"unpaddedSignatureSize\"))\n                    if (!$util.isInteger(message.unpaddedSignatureSize))\n                        return \"unpaddedSignatureSize: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Signature message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {chromeos_update_engine.Signatures.Signature} Signature\n             */\n            Signature.fromObject = function fromObject(object) {\n                if (object instanceof $root.chromeos_update_engine.Signatures.Signature)\n                    return object;\n                let message = new $root.chromeos_update_engine.Signatures.Signature();\n                if (object.version != null)\n                    message.version = object.version >>> 0;\n                if (object.data != null)\n                    if (typeof object.data === \"string\")\n                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);\n                    else if (object.data.length)\n                        message.data = object.data;\n                if (object.unpaddedSignatureSize != null)\n                    message.unpaddedSignatureSize = object.unpaddedSignatureSize >>> 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Signature message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @static\n             * @param {chromeos_update_engine.Signatures.Signature} message Signature\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Signature.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.version = 0;\n                    if (options.bytes === String)\n                        object.data = \"\";\n                    else {\n                        object.data = [];\n                        if (options.bytes !== Array)\n                            object.data = $util.newBuffer(object.data);\n                    }\n                    object.unpaddedSignatureSize = 0;\n                }\n                if (message.version != null && message.hasOwnProperty(\"version\"))\n                    object.version = message.version;\n                if (message.data != null && message.hasOwnProperty(\"data\"))\n                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;\n                if (message.unpaddedSignatureSize != null && message.hasOwnProperty(\"unpaddedSignatureSize\"))\n                    object.unpaddedSignatureSize = message.unpaddedSignatureSize;\n                return object;\n            };\n\n            /**\n             * Converts this Signature to JSON.\n             * @function toJSON\n             * @memberof chromeos_update_engine.Signatures.Signature\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Signature.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Signature;\n        })();\n\n        return Signatures;\n    })();\n\n    chromeos_update_engine.PartitionInfo = (function() {\n\n        /**\n         * Properties of a PartitionInfo.\n         * @memberof chromeos_update_engine\n         * @interface IPartitionInfo\n         * @property {number|Long|null} [size] PartitionInfo size\n         * @property {Uint8Array|null} [hash] PartitionInfo hash\n         */\n\n        /**\n         * Constructs a new PartitionInfo.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a PartitionInfo.\n         * @implements IPartitionInfo\n         * @constructor\n         * @param {chromeos_update_engine.IPartitionInfo=} [properties] Properties to set\n         */\n        function PartitionInfo(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PartitionInfo size.\n         * @member {number|Long} size\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @instance\n         */\n        PartitionInfo.prototype.size = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * PartitionInfo hash.\n         * @member {Uint8Array} hash\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @instance\n         */\n        PartitionInfo.prototype.hash = $util.newBuffer([]);\n\n        /**\n         * Creates a new PartitionInfo instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {chromeos_update_engine.IPartitionInfo=} [properties] Properties to set\n         * @returns {chromeos_update_engine.PartitionInfo} PartitionInfo instance\n         */\n        PartitionInfo.create = function create(properties) {\n            return new PartitionInfo(properties);\n        };\n\n        /**\n         * Encodes the specified PartitionInfo message. Does not implicitly {@link chromeos_update_engine.PartitionInfo.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {chromeos_update_engine.IPartitionInfo} message PartitionInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PartitionInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.size != null && Object.hasOwnProperty.call(message, \"size\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.size);\n            if (message.hash != null && Object.hasOwnProperty.call(message, \"hash\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.hash);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified PartitionInfo message, length delimited. Does not implicitly {@link chromeos_update_engine.PartitionInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {chromeos_update_engine.IPartitionInfo} message PartitionInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PartitionInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PartitionInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.PartitionInfo} PartitionInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PartitionInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.PartitionInfo();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.size = reader.uint64();\n                    break;\n                case 2:\n                    message.hash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a PartitionInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.PartitionInfo} PartitionInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PartitionInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PartitionInfo message.\n         * @function verify\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PartitionInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))\n                    return \"size: integer|Long expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                if (!(message.hash && typeof message.hash.length === \"number\" || $util.isString(message.hash)))\n                    return \"hash: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a PartitionInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.PartitionInfo} PartitionInfo\n         */\n        PartitionInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.PartitionInfo)\n                return object;\n            let message = new $root.chromeos_update_engine.PartitionInfo();\n            if (object.size != null)\n                if ($util.Long)\n                    (message.size = $util.Long.fromValue(object.size)).unsigned = true;\n                else if (typeof object.size === \"string\")\n                    message.size = parseInt(object.size, 10);\n                else if (typeof object.size === \"number\")\n                    message.size = object.size;\n                else if (typeof object.size === \"object\")\n                    message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber(true);\n            if (object.hash != null)\n                if (typeof object.hash === \"string\")\n                    $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);\n                else if (object.hash.length)\n                    message.hash = object.hash;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a PartitionInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @static\n         * @param {chromeos_update_engine.PartitionInfo} message PartitionInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PartitionInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.size = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.hash = \"\";\n                else {\n                    object.hash = [];\n                    if (options.bytes !== Array)\n                        object.hash = $util.newBuffer(object.hash);\n                }\n            }\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (typeof message.size === \"number\")\n                    object.size = options.longs === String ? String(message.size) : message.size;\n                else\n                    object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber(true) : message.size;\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;\n            return object;\n        };\n\n        /**\n         * Converts this PartitionInfo to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.PartitionInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PartitionInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return PartitionInfo;\n    })();\n\n    chromeos_update_engine.ImageInfo = (function() {\n\n        /**\n         * Properties of an ImageInfo.\n         * @memberof chromeos_update_engine\n         * @interface IImageInfo\n         * @property {string|null} [board] ImageInfo board\n         * @property {string|null} [key] ImageInfo key\n         * @property {string|null} [channel] ImageInfo channel\n         * @property {string|null} [version] ImageInfo version\n         * @property {string|null} [buildChannel] ImageInfo buildChannel\n         * @property {string|null} [buildVersion] ImageInfo buildVersion\n         */\n\n        /**\n         * Constructs a new ImageInfo.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents an ImageInfo.\n         * @implements IImageInfo\n         * @constructor\n         * @param {chromeos_update_engine.IImageInfo=} [properties] Properties to set\n         */\n        function ImageInfo(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ImageInfo board.\n         * @member {string} board\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         */\n        ImageInfo.prototype.board = \"\";\n\n        /**\n         * ImageInfo key.\n         * @member {string} key\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         */\n        ImageInfo.prototype.key = \"\";\n\n        /**\n         * ImageInfo channel.\n         * @member {string} channel\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         */\n        ImageInfo.prototype.channel = \"\";\n\n        /**\n         * ImageInfo version.\n         * @member {string} version\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         */\n        ImageInfo.prototype.version = \"\";\n\n        /**\n         * ImageInfo buildChannel.\n         * @member {string} buildChannel\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         */\n        ImageInfo.prototype.buildChannel = \"\";\n\n        /**\n         * ImageInfo buildVersion.\n         * @member {string} buildVersion\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         */\n        ImageInfo.prototype.buildVersion = \"\";\n\n        /**\n         * Creates a new ImageInfo instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {chromeos_update_engine.IImageInfo=} [properties] Properties to set\n         * @returns {chromeos_update_engine.ImageInfo} ImageInfo instance\n         */\n        ImageInfo.create = function create(properties) {\n            return new ImageInfo(properties);\n        };\n\n        /**\n         * Encodes the specified ImageInfo message. Does not implicitly {@link chromeos_update_engine.ImageInfo.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {chromeos_update_engine.IImageInfo} message ImageInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ImageInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.board != null && Object.hasOwnProperty.call(message, \"board\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.board);\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.key);\n            if (message.channel != null && Object.hasOwnProperty.call(message, \"channel\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.channel);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.version);\n            if (message.buildChannel != null && Object.hasOwnProperty.call(message, \"buildChannel\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.buildChannel);\n            if (message.buildVersion != null && Object.hasOwnProperty.call(message, \"buildVersion\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.buildVersion);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ImageInfo message, length delimited. Does not implicitly {@link chromeos_update_engine.ImageInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {chromeos_update_engine.IImageInfo} message ImageInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ImageInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ImageInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.ImageInfo} ImageInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ImageInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.ImageInfo();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.board = reader.string();\n                    break;\n                case 2:\n                    message.key = reader.string();\n                    break;\n                case 3:\n                    message.channel = reader.string();\n                    break;\n                case 4:\n                    message.version = reader.string();\n                    break;\n                case 5:\n                    message.buildChannel = reader.string();\n                    break;\n                case 6:\n                    message.buildVersion = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an ImageInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.ImageInfo} ImageInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ImageInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ImageInfo message.\n         * @function verify\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ImageInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.board != null && message.hasOwnProperty(\"board\"))\n                if (!$util.isString(message.board))\n                    return \"board: string expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.channel != null && message.hasOwnProperty(\"channel\"))\n                if (!$util.isString(message.channel))\n                    return \"channel: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isString(message.version))\n                    return \"version: string expected\";\n            if (message.buildChannel != null && message.hasOwnProperty(\"buildChannel\"))\n                if (!$util.isString(message.buildChannel))\n                    return \"buildChannel: string expected\";\n            if (message.buildVersion != null && message.hasOwnProperty(\"buildVersion\"))\n                if (!$util.isString(message.buildVersion))\n                    return \"buildVersion: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an ImageInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.ImageInfo} ImageInfo\n         */\n        ImageInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.ImageInfo)\n                return object;\n            let message = new $root.chromeos_update_engine.ImageInfo();\n            if (object.board != null)\n                message.board = String(object.board);\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.channel != null)\n                message.channel = String(object.channel);\n            if (object.version != null)\n                message.version = String(object.version);\n            if (object.buildChannel != null)\n                message.buildChannel = String(object.buildChannel);\n            if (object.buildVersion != null)\n                message.buildVersion = String(object.buildVersion);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ImageInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.ImageInfo\n         * @static\n         * @param {chromeos_update_engine.ImageInfo} message ImageInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ImageInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.board = \"\";\n                object.key = \"\";\n                object.channel = \"\";\n                object.version = \"\";\n                object.buildChannel = \"\";\n                object.buildVersion = \"\";\n            }\n            if (message.board != null && message.hasOwnProperty(\"board\"))\n                object.board = message.board;\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.channel != null && message.hasOwnProperty(\"channel\"))\n                object.channel = message.channel;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                object.version = message.version;\n            if (message.buildChannel != null && message.hasOwnProperty(\"buildChannel\"))\n                object.buildChannel = message.buildChannel;\n            if (message.buildVersion != null && message.hasOwnProperty(\"buildVersion\"))\n                object.buildVersion = message.buildVersion;\n            return object;\n        };\n\n        /**\n         * Converts this ImageInfo to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.ImageInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ImageInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ImageInfo;\n    })();\n\n    chromeos_update_engine.InstallOperation = (function() {\n\n        /**\n         * Properties of an InstallOperation.\n         * @memberof chromeos_update_engine\n         * @interface IInstallOperation\n         * @property {chromeos_update_engine.InstallOperation.Type} type InstallOperation type\n         * @property {number|Long|null} [dataOffset] InstallOperation dataOffset\n         * @property {number|Long|null} [dataLength] InstallOperation dataLength\n         * @property {Array.<chromeos_update_engine.IExtent>|null} [srcExtents] InstallOperation srcExtents\n         * @property {number|Long|null} [srcLength] InstallOperation srcLength\n         * @property {Array.<chromeos_update_engine.IExtent>|null} [dstExtents] InstallOperation dstExtents\n         * @property {number|Long|null} [dstLength] InstallOperation dstLength\n         * @property {Uint8Array|null} [dataSha256Hash] InstallOperation dataSha256Hash\n         * @property {Uint8Array|null} [srcSha256Hash] InstallOperation srcSha256Hash\n         * @property {Object.<string,number>|null} [xorMap] InstallOperation xorMap\n         */\n\n        /**\n         * Constructs a new InstallOperation.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents an InstallOperation.\n         * @implements IInstallOperation\n         * @constructor\n         * @param {chromeos_update_engine.IInstallOperation=} [properties] Properties to set\n         */\n        function InstallOperation(properties) {\n            this.srcExtents = [];\n            this.dstExtents = [];\n            this.xorMap = {};\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * InstallOperation type.\n         * @member {chromeos_update_engine.InstallOperation.Type} type\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.type = 0;\n\n        /**\n         * InstallOperation dataOffset.\n         * @member {number|Long} dataOffset\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dataOffset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * InstallOperation dataLength.\n         * @member {number|Long} dataLength\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dataLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * InstallOperation srcExtents.\n         * @member {Array.<chromeos_update_engine.IExtent>} srcExtents\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.srcExtents = $util.emptyArray;\n\n        /**\n         * InstallOperation srcLength.\n         * @member {number|Long} srcLength\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.srcLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * InstallOperation dstExtents.\n         * @member {Array.<chromeos_update_engine.IExtent>} dstExtents\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dstExtents = $util.emptyArray;\n\n        /**\n         * InstallOperation dstLength.\n         * @member {number|Long} dstLength\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dstLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * InstallOperation dataSha256Hash.\n         * @member {Uint8Array} dataSha256Hash\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.dataSha256Hash = $util.newBuffer([]);\n\n        /**\n         * InstallOperation srcSha256Hash.\n         * @member {Uint8Array} srcSha256Hash\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.srcSha256Hash = $util.newBuffer([]);\n\n        /**\n         * InstallOperation xorMap.\n         * @member {Object.<string,number>} xorMap\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         */\n        InstallOperation.prototype.xorMap = $util.emptyObject;\n\n        /**\n         * Creates a new InstallOperation instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {chromeos_update_engine.IInstallOperation=} [properties] Properties to set\n         * @returns {chromeos_update_engine.InstallOperation} InstallOperation instance\n         */\n        InstallOperation.create = function create(properties) {\n            return new InstallOperation(properties);\n        };\n\n        /**\n         * Encodes the specified InstallOperation message. Does not implicitly {@link chromeos_update_engine.InstallOperation.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {chromeos_update_engine.IInstallOperation} message InstallOperation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InstallOperation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);\n            if (message.dataOffset != null && Object.hasOwnProperty.call(message, \"dataOffset\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.dataOffset);\n            if (message.dataLength != null && Object.hasOwnProperty.call(message, \"dataLength\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.dataLength);\n            if (message.srcExtents != null && message.srcExtents.length)\n                for (let i = 0; i < message.srcExtents.length; ++i)\n                    $root.chromeos_update_engine.Extent.encode(message.srcExtents[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.srcLength != null && Object.hasOwnProperty.call(message, \"srcLength\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.srcLength);\n            if (message.dstExtents != null && message.dstExtents.length)\n                for (let i = 0; i < message.dstExtents.length; ++i)\n                    $root.chromeos_update_engine.Extent.encode(message.dstExtents[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.dstLength != null && Object.hasOwnProperty.call(message, \"dstLength\"))\n                writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.dstLength);\n            if (message.dataSha256Hash != null && Object.hasOwnProperty.call(message, \"dataSha256Hash\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.dataSha256Hash);\n            if (message.srcSha256Hash != null && Object.hasOwnProperty.call(message, \"srcSha256Hash\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.srcSha256Hash);\n            if (message.xorMap != null && Object.hasOwnProperty.call(message, \"xorMap\"))\n                for (let keys = Object.keys(message.xorMap), i = 0; i < keys.length; ++i)\n                    writer.uint32(/* id 10, wireType 2 =*/82).fork().uint32(/* id 1, wireType 0 =*/8).uint32(keys[i]).uint32(/* id 2, wireType 0 =*/16).uint32(message.xorMap[keys[i]]).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified InstallOperation message, length delimited. Does not implicitly {@link chromeos_update_engine.InstallOperation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {chromeos_update_engine.IInstallOperation} message InstallOperation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InstallOperation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an InstallOperation message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.InstallOperation} InstallOperation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InstallOperation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.InstallOperation(), key, value;\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.dataOffset = reader.uint64();\n                    break;\n                case 3:\n                    message.dataLength = reader.uint64();\n                    break;\n                case 4:\n                    if (!(message.srcExtents && message.srcExtents.length))\n                        message.srcExtents = [];\n                    message.srcExtents.push($root.chromeos_update_engine.Extent.decode(reader, reader.uint32()));\n                    break;\n                case 5:\n                    message.srcLength = reader.uint64();\n                    break;\n                case 6:\n                    if (!(message.dstExtents && message.dstExtents.length))\n                        message.dstExtents = [];\n                    message.dstExtents.push($root.chromeos_update_engine.Extent.decode(reader, reader.uint32()));\n                    break;\n                case 7:\n                    message.dstLength = reader.uint64();\n                    break;\n                case 8:\n                    message.dataSha256Hash = reader.bytes();\n                    break;\n                case 9:\n                    message.srcSha256Hash = reader.bytes();\n                    break;\n                case 10:\n                    if (message.xorMap === $util.emptyObject)\n                        message.xorMap = {};\n                    let end2 = reader.uint32() + reader.pos;\n                    key = 0;\n                    value = 0;\n                    while (reader.pos < end2) {\n                        let tag2 = reader.uint32();\n                        switch (tag2 >>> 3) {\n                        case 1:\n                            key = reader.uint32();\n                            break;\n                        case 2:\n                            value = reader.uint32();\n                            break;\n                        default:\n                            reader.skipType(tag2 & 7);\n                            break;\n                        }\n                    }\n                    message.xorMap[key] = value;\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            if (!message.hasOwnProperty(\"type\"))\n                throw $util.ProtocolError(\"missing required 'type'\", { instance: message });\n            return message;\n        };\n\n        /**\n         * Decodes an InstallOperation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.InstallOperation} InstallOperation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InstallOperation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an InstallOperation message.\n         * @function verify\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        InstallOperation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            switch (message.type) {\n            default:\n                return \"type: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 8:\n            case 6:\n            case 7:\n            case 10:\n            case 9:\n                break;\n            }\n            if (message.dataOffset != null && message.hasOwnProperty(\"dataOffset\"))\n                if (!$util.isInteger(message.dataOffset) && !(message.dataOffset && $util.isInteger(message.dataOffset.low) && $util.isInteger(message.dataOffset.high)))\n                    return \"dataOffset: integer|Long expected\";\n            if (message.dataLength != null && message.hasOwnProperty(\"dataLength\"))\n                if (!$util.isInteger(message.dataLength) && !(message.dataLength && $util.isInteger(message.dataLength.low) && $util.isInteger(message.dataLength.high)))\n                    return \"dataLength: integer|Long expected\";\n            if (message.srcExtents != null && message.hasOwnProperty(\"srcExtents\")) {\n                if (!Array.isArray(message.srcExtents))\n                    return \"srcExtents: array expected\";\n                for (let i = 0; i < message.srcExtents.length; ++i) {\n                    let error = $root.chromeos_update_engine.Extent.verify(message.srcExtents[i]);\n                    if (error)\n                        return \"srcExtents.\" + error;\n                }\n            }\n            if (message.srcLength != null && message.hasOwnProperty(\"srcLength\"))\n                if (!$util.isInteger(message.srcLength) && !(message.srcLength && $util.isInteger(message.srcLength.low) && $util.isInteger(message.srcLength.high)))\n                    return \"srcLength: integer|Long expected\";\n            if (message.dstExtents != null && message.hasOwnProperty(\"dstExtents\")) {\n                if (!Array.isArray(message.dstExtents))\n                    return \"dstExtents: array expected\";\n                for (let i = 0; i < message.dstExtents.length; ++i) {\n                    let error = $root.chromeos_update_engine.Extent.verify(message.dstExtents[i]);\n                    if (error)\n                        return \"dstExtents.\" + error;\n                }\n            }\n            if (message.dstLength != null && message.hasOwnProperty(\"dstLength\"))\n                if (!$util.isInteger(message.dstLength) && !(message.dstLength && $util.isInteger(message.dstLength.low) && $util.isInteger(message.dstLength.high)))\n                    return \"dstLength: integer|Long expected\";\n            if (message.dataSha256Hash != null && message.hasOwnProperty(\"dataSha256Hash\"))\n                if (!(message.dataSha256Hash && typeof message.dataSha256Hash.length === \"number\" || $util.isString(message.dataSha256Hash)))\n                    return \"dataSha256Hash: buffer expected\";\n            if (message.srcSha256Hash != null && message.hasOwnProperty(\"srcSha256Hash\"))\n                if (!(message.srcSha256Hash && typeof message.srcSha256Hash.length === \"number\" || $util.isString(message.srcSha256Hash)))\n                    return \"srcSha256Hash: buffer expected\";\n            if (message.xorMap != null && message.hasOwnProperty(\"xorMap\")) {\n                if (!$util.isObject(message.xorMap))\n                    return \"xorMap: object expected\";\n                let key = Object.keys(message.xorMap);\n                for (let i = 0; i < key.length; ++i) {\n                    if (!$util.key32Re.test(key[i]))\n                        return \"xorMap: integer key{k:uint32} expected\";\n                    if (!$util.isInteger(message.xorMap[key[i]]))\n                        return \"xorMap: integer{k:uint32} expected\";\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an InstallOperation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.InstallOperation} InstallOperation\n         */\n        InstallOperation.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.InstallOperation)\n                return object;\n            let message = new $root.chromeos_update_engine.InstallOperation();\n            switch (object.type) {\n            case \"REPLACE\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"REPLACE_BZ\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"MOVE\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"BSDIFF\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"SOURCE_COPY\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"SOURCE_BSDIFF\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"REPLACE_XZ\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"ZERO\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"DISCARD\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"BROTLI_BSDIFF\":\n            case 10:\n                message.type = 10;\n                break;\n            case \"PUFFDIFF\":\n            case 9:\n                message.type = 9;\n                break;\n            }\n            if (object.dataOffset != null)\n                if ($util.Long)\n                    (message.dataOffset = $util.Long.fromValue(object.dataOffset)).unsigned = true;\n                else if (typeof object.dataOffset === \"string\")\n                    message.dataOffset = parseInt(object.dataOffset, 10);\n                else if (typeof object.dataOffset === \"number\")\n                    message.dataOffset = object.dataOffset;\n                else if (typeof object.dataOffset === \"object\")\n                    message.dataOffset = new $util.LongBits(object.dataOffset.low >>> 0, object.dataOffset.high >>> 0).toNumber(true);\n            if (object.dataLength != null)\n                if ($util.Long)\n                    (message.dataLength = $util.Long.fromValue(object.dataLength)).unsigned = true;\n                else if (typeof object.dataLength === \"string\")\n                    message.dataLength = parseInt(object.dataLength, 10);\n                else if (typeof object.dataLength === \"number\")\n                    message.dataLength = object.dataLength;\n                else if (typeof object.dataLength === \"object\")\n                    message.dataLength = new $util.LongBits(object.dataLength.low >>> 0, object.dataLength.high >>> 0).toNumber(true);\n            if (object.srcExtents) {\n                if (!Array.isArray(object.srcExtents))\n                    throw TypeError(\".chromeos_update_engine.InstallOperation.srcExtents: array expected\");\n                message.srcExtents = [];\n                for (let i = 0; i < object.srcExtents.length; ++i) {\n                    if (typeof object.srcExtents[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.InstallOperation.srcExtents: object expected\");\n                    message.srcExtents[i] = $root.chromeos_update_engine.Extent.fromObject(object.srcExtents[i]);\n                }\n            }\n            if (object.srcLength != null)\n                if ($util.Long)\n                    (message.srcLength = $util.Long.fromValue(object.srcLength)).unsigned = true;\n                else if (typeof object.srcLength === \"string\")\n                    message.srcLength = parseInt(object.srcLength, 10);\n                else if (typeof object.srcLength === \"number\")\n                    message.srcLength = object.srcLength;\n                else if (typeof object.srcLength === \"object\")\n                    message.srcLength = new $util.LongBits(object.srcLength.low >>> 0, object.srcLength.high >>> 0).toNumber(true);\n            if (object.dstExtents) {\n                if (!Array.isArray(object.dstExtents))\n                    throw TypeError(\".chromeos_update_engine.InstallOperation.dstExtents: array expected\");\n                message.dstExtents = [];\n                for (let i = 0; i < object.dstExtents.length; ++i) {\n                    if (typeof object.dstExtents[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.InstallOperation.dstExtents: object expected\");\n                    message.dstExtents[i] = $root.chromeos_update_engine.Extent.fromObject(object.dstExtents[i]);\n                }\n            }\n            if (object.dstLength != null)\n                if ($util.Long)\n                    (message.dstLength = $util.Long.fromValue(object.dstLength)).unsigned = true;\n                else if (typeof object.dstLength === \"string\")\n                    message.dstLength = parseInt(object.dstLength, 10);\n                else if (typeof object.dstLength === \"number\")\n                    message.dstLength = object.dstLength;\n                else if (typeof object.dstLength === \"object\")\n                    message.dstLength = new $util.LongBits(object.dstLength.low >>> 0, object.dstLength.high >>> 0).toNumber(true);\n            if (object.dataSha256Hash != null)\n                if (typeof object.dataSha256Hash === \"string\")\n                    $util.base64.decode(object.dataSha256Hash, message.dataSha256Hash = $util.newBuffer($util.base64.length(object.dataSha256Hash)), 0);\n                else if (object.dataSha256Hash.length)\n                    message.dataSha256Hash = object.dataSha256Hash;\n            if (object.srcSha256Hash != null)\n                if (typeof object.srcSha256Hash === \"string\")\n                    $util.base64.decode(object.srcSha256Hash, message.srcSha256Hash = $util.newBuffer($util.base64.length(object.srcSha256Hash)), 0);\n                else if (object.srcSha256Hash.length)\n                    message.srcSha256Hash = object.srcSha256Hash;\n            if (object.xorMap) {\n                if (typeof object.xorMap !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.InstallOperation.xorMap: object expected\");\n                message.xorMap = {};\n                for (let keys = Object.keys(object.xorMap), i = 0; i < keys.length; ++i)\n                    message.xorMap[keys[i]] = object.xorMap[keys[i]] >>> 0;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an InstallOperation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.InstallOperation\n         * @static\n         * @param {chromeos_update_engine.InstallOperation} message InstallOperation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        InstallOperation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.srcExtents = [];\n                object.dstExtents = [];\n            }\n            if (options.objects || options.defaults)\n                object.xorMap = {};\n            if (options.defaults) {\n                object.type = options.enums === String ? \"REPLACE\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.dataOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.dataOffset = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.dataLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.dataLength = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.srcLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.srcLength = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.dstLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.dstLength = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.dataSha256Hash = \"\";\n                else {\n                    object.dataSha256Hash = [];\n                    if (options.bytes !== Array)\n                        object.dataSha256Hash = $util.newBuffer(object.dataSha256Hash);\n                }\n                if (options.bytes === String)\n                    object.srcSha256Hash = \"\";\n                else {\n                    object.srcSha256Hash = [];\n                    if (options.bytes !== Array)\n                        object.srcSha256Hash = $util.newBuffer(object.srcSha256Hash);\n                }\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.chromeos_update_engine.InstallOperation.Type[message.type] : message.type;\n            if (message.dataOffset != null && message.hasOwnProperty(\"dataOffset\"))\n                if (typeof message.dataOffset === \"number\")\n                    object.dataOffset = options.longs === String ? String(message.dataOffset) : message.dataOffset;\n                else\n                    object.dataOffset = options.longs === String ? $util.Long.prototype.toString.call(message.dataOffset) : options.longs === Number ? new $util.LongBits(message.dataOffset.low >>> 0, message.dataOffset.high >>> 0).toNumber(true) : message.dataOffset;\n            if (message.dataLength != null && message.hasOwnProperty(\"dataLength\"))\n                if (typeof message.dataLength === \"number\")\n                    object.dataLength = options.longs === String ? String(message.dataLength) : message.dataLength;\n                else\n                    object.dataLength = options.longs === String ? $util.Long.prototype.toString.call(message.dataLength) : options.longs === Number ? new $util.LongBits(message.dataLength.low >>> 0, message.dataLength.high >>> 0).toNumber(true) : message.dataLength;\n            if (message.srcExtents && message.srcExtents.length) {\n                object.srcExtents = [];\n                for (let j = 0; j < message.srcExtents.length; ++j)\n                    object.srcExtents[j] = $root.chromeos_update_engine.Extent.toObject(message.srcExtents[j], options);\n            }\n            if (message.srcLength != null && message.hasOwnProperty(\"srcLength\"))\n                if (typeof message.srcLength === \"number\")\n                    object.srcLength = options.longs === String ? String(message.srcLength) : message.srcLength;\n                else\n                    object.srcLength = options.longs === String ? $util.Long.prototype.toString.call(message.srcLength) : options.longs === Number ? new $util.LongBits(message.srcLength.low >>> 0, message.srcLength.high >>> 0).toNumber(true) : message.srcLength;\n            if (message.dstExtents && message.dstExtents.length) {\n                object.dstExtents = [];\n                for (let j = 0; j < message.dstExtents.length; ++j)\n                    object.dstExtents[j] = $root.chromeos_update_engine.Extent.toObject(message.dstExtents[j], options);\n            }\n            if (message.dstLength != null && message.hasOwnProperty(\"dstLength\"))\n                if (typeof message.dstLength === \"number\")\n                    object.dstLength = options.longs === String ? String(message.dstLength) : message.dstLength;\n                else\n                    object.dstLength = options.longs === String ? $util.Long.prototype.toString.call(message.dstLength) : options.longs === Number ? new $util.LongBits(message.dstLength.low >>> 0, message.dstLength.high >>> 0).toNumber(true) : message.dstLength;\n            if (message.dataSha256Hash != null && message.hasOwnProperty(\"dataSha256Hash\"))\n                object.dataSha256Hash = options.bytes === String ? $util.base64.encode(message.dataSha256Hash, 0, message.dataSha256Hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.dataSha256Hash) : message.dataSha256Hash;\n            if (message.srcSha256Hash != null && message.hasOwnProperty(\"srcSha256Hash\"))\n                object.srcSha256Hash = options.bytes === String ? $util.base64.encode(message.srcSha256Hash, 0, message.srcSha256Hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.srcSha256Hash) : message.srcSha256Hash;\n            let keys2;\n            if (message.xorMap && (keys2 = Object.keys(message.xorMap)).length) {\n                object.xorMap = {};\n                for (let j = 0; j < keys2.length; ++j)\n                    object.xorMap[keys2[j]] = message.xorMap[keys2[j]];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this InstallOperation to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.InstallOperation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        InstallOperation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Type enum.\n         * @name chromeos_update_engine.InstallOperation.Type\n         * @enum {number}\n         * @property {number} REPLACE=0 REPLACE value\n         * @property {number} REPLACE_BZ=1 REPLACE_BZ value\n         * @property {number} MOVE=2 MOVE value\n         * @property {number} BSDIFF=3 BSDIFF value\n         * @property {number} SOURCE_COPY=4 SOURCE_COPY value\n         * @property {number} SOURCE_BSDIFF=5 SOURCE_BSDIFF value\n         * @property {number} REPLACE_XZ=8 REPLACE_XZ value\n         * @property {number} ZERO=6 ZERO value\n         * @property {number} DISCARD=7 DISCARD value\n         * @property {number} BROTLI_BSDIFF=10 BROTLI_BSDIFF value\n         * @property {number} PUFFDIFF=9 PUFFDIFF value\n         */\n        InstallOperation.Type = (function() {\n            const valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"REPLACE\"] = 0;\n            values[valuesById[1] = \"REPLACE_BZ\"] = 1;\n            values[valuesById[2] = \"MOVE\"] = 2;\n            values[valuesById[3] = \"BSDIFF\"] = 3;\n            values[valuesById[4] = \"SOURCE_COPY\"] = 4;\n            values[valuesById[5] = \"SOURCE_BSDIFF\"] = 5;\n            values[valuesById[8] = \"REPLACE_XZ\"] = 8;\n            values[valuesById[6] = \"ZERO\"] = 6;\n            values[valuesById[7] = \"DISCARD\"] = 7;\n            values[valuesById[10] = \"BROTLI_BSDIFF\"] = 10;\n            values[valuesById[9] = \"PUFFDIFF\"] = 9;\n            return values;\n        })();\n\n        return InstallOperation;\n    })();\n\n    chromeos_update_engine.CowMergeOperation = (function() {\n\n        /**\n         * Properties of a CowMergeOperation.\n         * @memberof chromeos_update_engine\n         * @interface ICowMergeOperation\n         * @property {chromeos_update_engine.CowMergeOperation.Type|null} [type] CowMergeOperation type\n         * @property {chromeos_update_engine.IExtent|null} [srcExtent] CowMergeOperation srcExtent\n         * @property {chromeos_update_engine.IExtent|null} [dstExtent] CowMergeOperation dstExtent\n         * @property {number|Long|null} [srcOffset] CowMergeOperation srcOffset\n         */\n\n        /**\n         * Constructs a new CowMergeOperation.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a CowMergeOperation.\n         * @implements ICowMergeOperation\n         * @constructor\n         * @param {chromeos_update_engine.ICowMergeOperation=} [properties] Properties to set\n         */\n        function CowMergeOperation(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CowMergeOperation type.\n         * @member {chromeos_update_engine.CowMergeOperation.Type} type\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         */\n        CowMergeOperation.prototype.type = 0;\n\n        /**\n         * CowMergeOperation srcExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} srcExtent\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         */\n        CowMergeOperation.prototype.srcExtent = null;\n\n        /**\n         * CowMergeOperation dstExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} dstExtent\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         */\n        CowMergeOperation.prototype.dstExtent = null;\n\n        /**\n         * CowMergeOperation srcOffset.\n         * @member {number|Long} srcOffset\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         */\n        CowMergeOperation.prototype.srcOffset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new CowMergeOperation instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {chromeos_update_engine.ICowMergeOperation=} [properties] Properties to set\n         * @returns {chromeos_update_engine.CowMergeOperation} CowMergeOperation instance\n         */\n        CowMergeOperation.create = function create(properties) {\n            return new CowMergeOperation(properties);\n        };\n\n        /**\n         * Encodes the specified CowMergeOperation message. Does not implicitly {@link chromeos_update_engine.CowMergeOperation.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {chromeos_update_engine.ICowMergeOperation} message CowMergeOperation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CowMergeOperation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);\n            if (message.srcExtent != null && Object.hasOwnProperty.call(message, \"srcExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.srcExtent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.dstExtent != null && Object.hasOwnProperty.call(message, \"dstExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.dstExtent, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.srcOffset != null && Object.hasOwnProperty.call(message, \"srcOffset\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.srcOffset);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CowMergeOperation message, length delimited. Does not implicitly {@link chromeos_update_engine.CowMergeOperation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {chromeos_update_engine.ICowMergeOperation} message CowMergeOperation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CowMergeOperation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CowMergeOperation message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.CowMergeOperation} CowMergeOperation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CowMergeOperation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.CowMergeOperation();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.srcExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.dstExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.srcOffset = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CowMergeOperation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.CowMergeOperation} CowMergeOperation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CowMergeOperation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CowMergeOperation message.\n         * @function verify\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CowMergeOperation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n                }\n            if (message.srcExtent != null && message.hasOwnProperty(\"srcExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.srcExtent);\n                if (error)\n                    return \"srcExtent.\" + error;\n            }\n            if (message.dstExtent != null && message.hasOwnProperty(\"dstExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.dstExtent);\n                if (error)\n                    return \"dstExtent.\" + error;\n            }\n            if (message.srcOffset != null && message.hasOwnProperty(\"srcOffset\"))\n                if (!$util.isInteger(message.srcOffset) && !(message.srcOffset && $util.isInteger(message.srcOffset.low) && $util.isInteger(message.srcOffset.high)))\n                    return \"srcOffset: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a CowMergeOperation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.CowMergeOperation} CowMergeOperation\n         */\n        CowMergeOperation.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.CowMergeOperation)\n                return object;\n            let message = new $root.chromeos_update_engine.CowMergeOperation();\n            switch (object.type) {\n            case \"COW_COPY\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"COW_XOR\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"COW_REPLACE\":\n            case 2:\n                message.type = 2;\n                break;\n            }\n            if (object.srcExtent != null) {\n                if (typeof object.srcExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.CowMergeOperation.srcExtent: object expected\");\n                message.srcExtent = $root.chromeos_update_engine.Extent.fromObject(object.srcExtent);\n            }\n            if (object.dstExtent != null) {\n                if (typeof object.dstExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.CowMergeOperation.dstExtent: object expected\");\n                message.dstExtent = $root.chromeos_update_engine.Extent.fromObject(object.dstExtent);\n            }\n            if (object.srcOffset != null)\n                if ($util.Long)\n                    (message.srcOffset = $util.Long.fromValue(object.srcOffset)).unsigned = true;\n                else if (typeof object.srcOffset === \"string\")\n                    message.srcOffset = parseInt(object.srcOffset, 10);\n                else if (typeof object.srcOffset === \"number\")\n                    message.srcOffset = object.srcOffset;\n                else if (typeof object.srcOffset === \"object\")\n                    message.srcOffset = new $util.LongBits(object.srcOffset.low >>> 0, object.srcOffset.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CowMergeOperation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @static\n         * @param {chromeos_update_engine.CowMergeOperation} message CowMergeOperation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CowMergeOperation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.type = options.enums === String ? \"COW_COPY\" : 0;\n                object.srcExtent = null;\n                object.dstExtent = null;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.srcOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.srcOffset = options.longs === String ? \"0\" : 0;\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.chromeos_update_engine.CowMergeOperation.Type[message.type] : message.type;\n            if (message.srcExtent != null && message.hasOwnProperty(\"srcExtent\"))\n                object.srcExtent = $root.chromeos_update_engine.Extent.toObject(message.srcExtent, options);\n            if (message.dstExtent != null && message.hasOwnProperty(\"dstExtent\"))\n                object.dstExtent = $root.chromeos_update_engine.Extent.toObject(message.dstExtent, options);\n            if (message.srcOffset != null && message.hasOwnProperty(\"srcOffset\"))\n                if (typeof message.srcOffset === \"number\")\n                    object.srcOffset = options.longs === String ? String(message.srcOffset) : message.srcOffset;\n                else\n                    object.srcOffset = options.longs === String ? $util.Long.prototype.toString.call(message.srcOffset) : options.longs === Number ? new $util.LongBits(message.srcOffset.low >>> 0, message.srcOffset.high >>> 0).toNumber(true) : message.srcOffset;\n            return object;\n        };\n\n        /**\n         * Converts this CowMergeOperation to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.CowMergeOperation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CowMergeOperation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Type enum.\n         * @name chromeos_update_engine.CowMergeOperation.Type\n         * @enum {number}\n         * @property {number} COW_COPY=0 COW_COPY value\n         * @property {number} COW_XOR=1 COW_XOR value\n         * @property {number} COW_REPLACE=2 COW_REPLACE value\n         */\n        CowMergeOperation.Type = (function() {\n            const valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"COW_COPY\"] = 0;\n            values[valuesById[1] = \"COW_XOR\"] = 1;\n            values[valuesById[2] = \"COW_REPLACE\"] = 2;\n            return values;\n        })();\n\n        return CowMergeOperation;\n    })();\n\n    chromeos_update_engine.PartitionUpdate = (function() {\n\n        /**\n         * Properties of a PartitionUpdate.\n         * @memberof chromeos_update_engine\n         * @interface IPartitionUpdate\n         * @property {string} partitionName PartitionUpdate partitionName\n         * @property {boolean|null} [runPostinstall] PartitionUpdate runPostinstall\n         * @property {string|null} [postinstallPath] PartitionUpdate postinstallPath\n         * @property {string|null} [filesystemType] PartitionUpdate filesystemType\n         * @property {Array.<chromeos_update_engine.Signatures.ISignature>|null} [newPartitionSignature] PartitionUpdate newPartitionSignature\n         * @property {chromeos_update_engine.IPartitionInfo|null} [oldPartitionInfo] PartitionUpdate oldPartitionInfo\n         * @property {chromeos_update_engine.IPartitionInfo|null} [newPartitionInfo] PartitionUpdate newPartitionInfo\n         * @property {Array.<chromeos_update_engine.IInstallOperation>|null} [operations] PartitionUpdate operations\n         * @property {boolean|null} [postinstallOptional] PartitionUpdate postinstallOptional\n         * @property {chromeos_update_engine.IExtent|null} [hashTreeDataExtent] PartitionUpdate hashTreeDataExtent\n         * @property {chromeos_update_engine.IExtent|null} [hashTreeExtent] PartitionUpdate hashTreeExtent\n         * @property {string|null} [hashTreeAlgorithm] PartitionUpdate hashTreeAlgorithm\n         * @property {Uint8Array|null} [hashTreeSalt] PartitionUpdate hashTreeSalt\n         * @property {chromeos_update_engine.IExtent|null} [fecDataExtent] PartitionUpdate fecDataExtent\n         * @property {chromeos_update_engine.IExtent|null} [fecExtent] PartitionUpdate fecExtent\n         * @property {number|null} [fecRoots] PartitionUpdate fecRoots\n         * @property {string|null} [version] PartitionUpdate version\n         * @property {Array.<chromeos_update_engine.ICowMergeOperation>|null} [mergeOperations] PartitionUpdate mergeOperations\n         * @property {number|Long|null} [estimateCowSize] PartitionUpdate estimateCowSize\n         */\n\n        /**\n         * Constructs a new PartitionUpdate.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a PartitionUpdate.\n         * @implements IPartitionUpdate\n         * @constructor\n         * @param {chromeos_update_engine.IPartitionUpdate=} [properties] Properties to set\n         */\n        function PartitionUpdate(properties) {\n            this.newPartitionSignature = [];\n            this.operations = [];\n            this.mergeOperations = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PartitionUpdate partitionName.\n         * @member {string} partitionName\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.partitionName = \"\";\n\n        /**\n         * PartitionUpdate runPostinstall.\n         * @member {boolean} runPostinstall\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.runPostinstall = false;\n\n        /**\n         * PartitionUpdate postinstallPath.\n         * @member {string} postinstallPath\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.postinstallPath = \"\";\n\n        /**\n         * PartitionUpdate filesystemType.\n         * @member {string} filesystemType\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.filesystemType = \"\";\n\n        /**\n         * PartitionUpdate newPartitionSignature.\n         * @member {Array.<chromeos_update_engine.Signatures.ISignature>} newPartitionSignature\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.newPartitionSignature = $util.emptyArray;\n\n        /**\n         * PartitionUpdate oldPartitionInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} oldPartitionInfo\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.oldPartitionInfo = null;\n\n        /**\n         * PartitionUpdate newPartitionInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} newPartitionInfo\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.newPartitionInfo = null;\n\n        /**\n         * PartitionUpdate operations.\n         * @member {Array.<chromeos_update_engine.IInstallOperation>} operations\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.operations = $util.emptyArray;\n\n        /**\n         * PartitionUpdate postinstallOptional.\n         * @member {boolean} postinstallOptional\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.postinstallOptional = false;\n\n        /**\n         * PartitionUpdate hashTreeDataExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} hashTreeDataExtent\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.hashTreeDataExtent = null;\n\n        /**\n         * PartitionUpdate hashTreeExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} hashTreeExtent\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.hashTreeExtent = null;\n\n        /**\n         * PartitionUpdate hashTreeAlgorithm.\n         * @member {string} hashTreeAlgorithm\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.hashTreeAlgorithm = \"\";\n\n        /**\n         * PartitionUpdate hashTreeSalt.\n         * @member {Uint8Array} hashTreeSalt\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.hashTreeSalt = $util.newBuffer([]);\n\n        /**\n         * PartitionUpdate fecDataExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} fecDataExtent\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.fecDataExtent = null;\n\n        /**\n         * PartitionUpdate fecExtent.\n         * @member {chromeos_update_engine.IExtent|null|undefined} fecExtent\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.fecExtent = null;\n\n        /**\n         * PartitionUpdate fecRoots.\n         * @member {number} fecRoots\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.fecRoots = 2;\n\n        /**\n         * PartitionUpdate version.\n         * @member {string} version\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.version = \"\";\n\n        /**\n         * PartitionUpdate mergeOperations.\n         * @member {Array.<chromeos_update_engine.ICowMergeOperation>} mergeOperations\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.mergeOperations = $util.emptyArray;\n\n        /**\n         * PartitionUpdate estimateCowSize.\n         * @member {number|Long} estimateCowSize\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         */\n        PartitionUpdate.prototype.estimateCowSize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new PartitionUpdate instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {chromeos_update_engine.IPartitionUpdate=} [properties] Properties to set\n         * @returns {chromeos_update_engine.PartitionUpdate} PartitionUpdate instance\n         */\n        PartitionUpdate.create = function create(properties) {\n            return new PartitionUpdate(properties);\n        };\n\n        /**\n         * Encodes the specified PartitionUpdate message. Does not implicitly {@link chromeos_update_engine.PartitionUpdate.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {chromeos_update_engine.IPartitionUpdate} message PartitionUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PartitionUpdate.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.partitionName);\n            if (message.runPostinstall != null && Object.hasOwnProperty.call(message, \"runPostinstall\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.runPostinstall);\n            if (message.postinstallPath != null && Object.hasOwnProperty.call(message, \"postinstallPath\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.postinstallPath);\n            if (message.filesystemType != null && Object.hasOwnProperty.call(message, \"filesystemType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.filesystemType);\n            if (message.newPartitionSignature != null && message.newPartitionSignature.length)\n                for (let i = 0; i < message.newPartitionSignature.length; ++i)\n                    $root.chromeos_update_engine.Signatures.Signature.encode(message.newPartitionSignature[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.oldPartitionInfo != null && Object.hasOwnProperty.call(message, \"oldPartitionInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.oldPartitionInfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.newPartitionInfo != null && Object.hasOwnProperty.call(message, \"newPartitionInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.newPartitionInfo, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.operations != null && message.operations.length)\n                for (let i = 0; i < message.operations.length; ++i)\n                    $root.chromeos_update_engine.InstallOperation.encode(message.operations[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.postinstallOptional != null && Object.hasOwnProperty.call(message, \"postinstallOptional\"))\n                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.postinstallOptional);\n            if (message.hashTreeDataExtent != null && Object.hasOwnProperty.call(message, \"hashTreeDataExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.hashTreeDataExtent, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.hashTreeExtent != null && Object.hasOwnProperty.call(message, \"hashTreeExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.hashTreeExtent, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.hashTreeAlgorithm != null && Object.hasOwnProperty.call(message, \"hashTreeAlgorithm\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.hashTreeAlgorithm);\n            if (message.hashTreeSalt != null && Object.hasOwnProperty.call(message, \"hashTreeSalt\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).bytes(message.hashTreeSalt);\n            if (message.fecDataExtent != null && Object.hasOwnProperty.call(message, \"fecDataExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.fecDataExtent, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.fecExtent != null && Object.hasOwnProperty.call(message, \"fecExtent\"))\n                $root.chromeos_update_engine.Extent.encode(message.fecExtent, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.fecRoots != null && Object.hasOwnProperty.call(message, \"fecRoots\"))\n                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.fecRoots);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 17, wireType 2 =*/138).string(message.version);\n            if (message.mergeOperations != null && message.mergeOperations.length)\n                for (let i = 0; i < message.mergeOperations.length; ++i)\n                    $root.chromeos_update_engine.CowMergeOperation.encode(message.mergeOperations[i], writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n            if (message.estimateCowSize != null && Object.hasOwnProperty.call(message, \"estimateCowSize\"))\n                writer.uint32(/* id 19, wireType 0 =*/152).uint64(message.estimateCowSize);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified PartitionUpdate message, length delimited. Does not implicitly {@link chromeos_update_engine.PartitionUpdate.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {chromeos_update_engine.IPartitionUpdate} message PartitionUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PartitionUpdate.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PartitionUpdate message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.PartitionUpdate} PartitionUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PartitionUpdate.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.PartitionUpdate();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.partitionName = reader.string();\n                    break;\n                case 2:\n                    message.runPostinstall = reader.bool();\n                    break;\n                case 3:\n                    message.postinstallPath = reader.string();\n                    break;\n                case 4:\n                    message.filesystemType = reader.string();\n                    break;\n                case 5:\n                    if (!(message.newPartitionSignature && message.newPartitionSignature.length))\n                        message.newPartitionSignature = [];\n                    message.newPartitionSignature.push($root.chromeos_update_engine.Signatures.Signature.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.oldPartitionInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.newPartitionInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    if (!(message.operations && message.operations.length))\n                        message.operations = [];\n                    message.operations.push($root.chromeos_update_engine.InstallOperation.decode(reader, reader.uint32()));\n                    break;\n                case 9:\n                    message.postinstallOptional = reader.bool();\n                    break;\n                case 10:\n                    message.hashTreeDataExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.hashTreeExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.hashTreeAlgorithm = reader.string();\n                    break;\n                case 13:\n                    message.hashTreeSalt = reader.bytes();\n                    break;\n                case 14:\n                    message.fecDataExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 15:\n                    message.fecExtent = $root.chromeos_update_engine.Extent.decode(reader, reader.uint32());\n                    break;\n                case 16:\n                    message.fecRoots = reader.uint32();\n                    break;\n                case 17:\n                    message.version = reader.string();\n                    break;\n                case 18:\n                    if (!(message.mergeOperations && message.mergeOperations.length))\n                        message.mergeOperations = [];\n                    message.mergeOperations.push($root.chromeos_update_engine.CowMergeOperation.decode(reader, reader.uint32()));\n                    break;\n                case 19:\n                    message.estimateCowSize = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            if (!message.hasOwnProperty(\"partitionName\"))\n                throw $util.ProtocolError(\"missing required 'partitionName'\", { instance: message });\n            return message;\n        };\n\n        /**\n         * Decodes a PartitionUpdate message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.PartitionUpdate} PartitionUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PartitionUpdate.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PartitionUpdate message.\n         * @function verify\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PartitionUpdate.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (!$util.isString(message.partitionName))\n                return \"partitionName: string expected\";\n            if (message.runPostinstall != null && message.hasOwnProperty(\"runPostinstall\"))\n                if (typeof message.runPostinstall !== \"boolean\")\n                    return \"runPostinstall: boolean expected\";\n            if (message.postinstallPath != null && message.hasOwnProperty(\"postinstallPath\"))\n                if (!$util.isString(message.postinstallPath))\n                    return \"postinstallPath: string expected\";\n            if (message.filesystemType != null && message.hasOwnProperty(\"filesystemType\"))\n                if (!$util.isString(message.filesystemType))\n                    return \"filesystemType: string expected\";\n            if (message.newPartitionSignature != null && message.hasOwnProperty(\"newPartitionSignature\")) {\n                if (!Array.isArray(message.newPartitionSignature))\n                    return \"newPartitionSignature: array expected\";\n                for (let i = 0; i < message.newPartitionSignature.length; ++i) {\n                    let error = $root.chromeos_update_engine.Signatures.Signature.verify(message.newPartitionSignature[i]);\n                    if (error)\n                        return \"newPartitionSignature.\" + error;\n                }\n            }\n            if (message.oldPartitionInfo != null && message.hasOwnProperty(\"oldPartitionInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.oldPartitionInfo);\n                if (error)\n                    return \"oldPartitionInfo.\" + error;\n            }\n            if (message.newPartitionInfo != null && message.hasOwnProperty(\"newPartitionInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.newPartitionInfo);\n                if (error)\n                    return \"newPartitionInfo.\" + error;\n            }\n            if (message.operations != null && message.hasOwnProperty(\"operations\")) {\n                if (!Array.isArray(message.operations))\n                    return \"operations: array expected\";\n                for (let i = 0; i < message.operations.length; ++i) {\n                    let error = $root.chromeos_update_engine.InstallOperation.verify(message.operations[i]);\n                    if (error)\n                        return \"operations.\" + error;\n                }\n            }\n            if (message.postinstallOptional != null && message.hasOwnProperty(\"postinstallOptional\"))\n                if (typeof message.postinstallOptional !== \"boolean\")\n                    return \"postinstallOptional: boolean expected\";\n            if (message.hashTreeDataExtent != null && message.hasOwnProperty(\"hashTreeDataExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.hashTreeDataExtent);\n                if (error)\n                    return \"hashTreeDataExtent.\" + error;\n            }\n            if (message.hashTreeExtent != null && message.hasOwnProperty(\"hashTreeExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.hashTreeExtent);\n                if (error)\n                    return \"hashTreeExtent.\" + error;\n            }\n            if (message.hashTreeAlgorithm != null && message.hasOwnProperty(\"hashTreeAlgorithm\"))\n                if (!$util.isString(message.hashTreeAlgorithm))\n                    return \"hashTreeAlgorithm: string expected\";\n            if (message.hashTreeSalt != null && message.hasOwnProperty(\"hashTreeSalt\"))\n                if (!(message.hashTreeSalt && typeof message.hashTreeSalt.length === \"number\" || $util.isString(message.hashTreeSalt)))\n                    return \"hashTreeSalt: buffer expected\";\n            if (message.fecDataExtent != null && message.hasOwnProperty(\"fecDataExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.fecDataExtent);\n                if (error)\n                    return \"fecDataExtent.\" + error;\n            }\n            if (message.fecExtent != null && message.hasOwnProperty(\"fecExtent\")) {\n                let error = $root.chromeos_update_engine.Extent.verify(message.fecExtent);\n                if (error)\n                    return \"fecExtent.\" + error;\n            }\n            if (message.fecRoots != null && message.hasOwnProperty(\"fecRoots\"))\n                if (!$util.isInteger(message.fecRoots))\n                    return \"fecRoots: integer expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isString(message.version))\n                    return \"version: string expected\";\n            if (message.mergeOperations != null && message.hasOwnProperty(\"mergeOperations\")) {\n                if (!Array.isArray(message.mergeOperations))\n                    return \"mergeOperations: array expected\";\n                for (let i = 0; i < message.mergeOperations.length; ++i) {\n                    let error = $root.chromeos_update_engine.CowMergeOperation.verify(message.mergeOperations[i]);\n                    if (error)\n                        return \"mergeOperations.\" + error;\n                }\n            }\n            if (message.estimateCowSize != null && message.hasOwnProperty(\"estimateCowSize\"))\n                if (!$util.isInteger(message.estimateCowSize) && !(message.estimateCowSize && $util.isInteger(message.estimateCowSize.low) && $util.isInteger(message.estimateCowSize.high)))\n                    return \"estimateCowSize: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a PartitionUpdate message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.PartitionUpdate} PartitionUpdate\n         */\n        PartitionUpdate.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.PartitionUpdate)\n                return object;\n            let message = new $root.chromeos_update_engine.PartitionUpdate();\n            if (object.partitionName != null)\n                message.partitionName = String(object.partitionName);\n            if (object.runPostinstall != null)\n                message.runPostinstall = Boolean(object.runPostinstall);\n            if (object.postinstallPath != null)\n                message.postinstallPath = String(object.postinstallPath);\n            if (object.filesystemType != null)\n                message.filesystemType = String(object.filesystemType);\n            if (object.newPartitionSignature) {\n                if (!Array.isArray(object.newPartitionSignature))\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.newPartitionSignature: array expected\");\n                message.newPartitionSignature = [];\n                for (let i = 0; i < object.newPartitionSignature.length; ++i) {\n                    if (typeof object.newPartitionSignature[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.PartitionUpdate.newPartitionSignature: object expected\");\n                    message.newPartitionSignature[i] = $root.chromeos_update_engine.Signatures.Signature.fromObject(object.newPartitionSignature[i]);\n                }\n            }\n            if (object.oldPartitionInfo != null) {\n                if (typeof object.oldPartitionInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.oldPartitionInfo: object expected\");\n                message.oldPartitionInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.oldPartitionInfo);\n            }\n            if (object.newPartitionInfo != null) {\n                if (typeof object.newPartitionInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.newPartitionInfo: object expected\");\n                message.newPartitionInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.newPartitionInfo);\n            }\n            if (object.operations) {\n                if (!Array.isArray(object.operations))\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.operations: array expected\");\n                message.operations = [];\n                for (let i = 0; i < object.operations.length; ++i) {\n                    if (typeof object.operations[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.PartitionUpdate.operations: object expected\");\n                    message.operations[i] = $root.chromeos_update_engine.InstallOperation.fromObject(object.operations[i]);\n                }\n            }\n            if (object.postinstallOptional != null)\n                message.postinstallOptional = Boolean(object.postinstallOptional);\n            if (object.hashTreeDataExtent != null) {\n                if (typeof object.hashTreeDataExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.hashTreeDataExtent: object expected\");\n                message.hashTreeDataExtent = $root.chromeos_update_engine.Extent.fromObject(object.hashTreeDataExtent);\n            }\n            if (object.hashTreeExtent != null) {\n                if (typeof object.hashTreeExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.hashTreeExtent: object expected\");\n                message.hashTreeExtent = $root.chromeos_update_engine.Extent.fromObject(object.hashTreeExtent);\n            }\n            if (object.hashTreeAlgorithm != null)\n                message.hashTreeAlgorithm = String(object.hashTreeAlgorithm);\n            if (object.hashTreeSalt != null)\n                if (typeof object.hashTreeSalt === \"string\")\n                    $util.base64.decode(object.hashTreeSalt, message.hashTreeSalt = $util.newBuffer($util.base64.length(object.hashTreeSalt)), 0);\n                else if (object.hashTreeSalt.length)\n                    message.hashTreeSalt = object.hashTreeSalt;\n            if (object.fecDataExtent != null) {\n                if (typeof object.fecDataExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.fecDataExtent: object expected\");\n                message.fecDataExtent = $root.chromeos_update_engine.Extent.fromObject(object.fecDataExtent);\n            }\n            if (object.fecExtent != null) {\n                if (typeof object.fecExtent !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.fecExtent: object expected\");\n                message.fecExtent = $root.chromeos_update_engine.Extent.fromObject(object.fecExtent);\n            }\n            if (object.fecRoots != null)\n                message.fecRoots = object.fecRoots >>> 0;\n            if (object.version != null)\n                message.version = String(object.version);\n            if (object.mergeOperations) {\n                if (!Array.isArray(object.mergeOperations))\n                    throw TypeError(\".chromeos_update_engine.PartitionUpdate.mergeOperations: array expected\");\n                message.mergeOperations = [];\n                for (let i = 0; i < object.mergeOperations.length; ++i) {\n                    if (typeof object.mergeOperations[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.PartitionUpdate.mergeOperations: object expected\");\n                    message.mergeOperations[i] = $root.chromeos_update_engine.CowMergeOperation.fromObject(object.mergeOperations[i]);\n                }\n            }\n            if (object.estimateCowSize != null)\n                if ($util.Long)\n                    (message.estimateCowSize = $util.Long.fromValue(object.estimateCowSize)).unsigned = true;\n                else if (typeof object.estimateCowSize === \"string\")\n                    message.estimateCowSize = parseInt(object.estimateCowSize, 10);\n                else if (typeof object.estimateCowSize === \"number\")\n                    message.estimateCowSize = object.estimateCowSize;\n                else if (typeof object.estimateCowSize === \"object\")\n                    message.estimateCowSize = new $util.LongBits(object.estimateCowSize.low >>> 0, object.estimateCowSize.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a PartitionUpdate message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @static\n         * @param {chromeos_update_engine.PartitionUpdate} message PartitionUpdate\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PartitionUpdate.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.newPartitionSignature = [];\n                object.operations = [];\n                object.mergeOperations = [];\n            }\n            if (options.defaults) {\n                object.partitionName = \"\";\n                object.runPostinstall = false;\n                object.postinstallPath = \"\";\n                object.filesystemType = \"\";\n                object.oldPartitionInfo = null;\n                object.newPartitionInfo = null;\n                object.postinstallOptional = false;\n                object.hashTreeDataExtent = null;\n                object.hashTreeExtent = null;\n                object.hashTreeAlgorithm = \"\";\n                if (options.bytes === String)\n                    object.hashTreeSalt = \"\";\n                else {\n                    object.hashTreeSalt = [];\n                    if (options.bytes !== Array)\n                        object.hashTreeSalt = $util.newBuffer(object.hashTreeSalt);\n                }\n                object.fecDataExtent = null;\n                object.fecExtent = null;\n                object.fecRoots = 2;\n                object.version = \"\";\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.estimateCowSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.estimateCowSize = options.longs === String ? \"0\" : 0;\n            }\n            if (message.partitionName != null && message.hasOwnProperty(\"partitionName\"))\n                object.partitionName = message.partitionName;\n            if (message.runPostinstall != null && message.hasOwnProperty(\"runPostinstall\"))\n                object.runPostinstall = message.runPostinstall;\n            if (message.postinstallPath != null && message.hasOwnProperty(\"postinstallPath\"))\n                object.postinstallPath = message.postinstallPath;\n            if (message.filesystemType != null && message.hasOwnProperty(\"filesystemType\"))\n                object.filesystemType = message.filesystemType;\n            if (message.newPartitionSignature && message.newPartitionSignature.length) {\n                object.newPartitionSignature = [];\n                for (let j = 0; j < message.newPartitionSignature.length; ++j)\n                    object.newPartitionSignature[j] = $root.chromeos_update_engine.Signatures.Signature.toObject(message.newPartitionSignature[j], options);\n            }\n            if (message.oldPartitionInfo != null && message.hasOwnProperty(\"oldPartitionInfo\"))\n                object.oldPartitionInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.oldPartitionInfo, options);\n            if (message.newPartitionInfo != null && message.hasOwnProperty(\"newPartitionInfo\"))\n                object.newPartitionInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.newPartitionInfo, options);\n            if (message.operations && message.operations.length) {\n                object.operations = [];\n                for (let j = 0; j < message.operations.length; ++j)\n                    object.operations[j] = $root.chromeos_update_engine.InstallOperation.toObject(message.operations[j], options);\n            }\n            if (message.postinstallOptional != null && message.hasOwnProperty(\"postinstallOptional\"))\n                object.postinstallOptional = message.postinstallOptional;\n            if (message.hashTreeDataExtent != null && message.hasOwnProperty(\"hashTreeDataExtent\"))\n                object.hashTreeDataExtent = $root.chromeos_update_engine.Extent.toObject(message.hashTreeDataExtent, options);\n            if (message.hashTreeExtent != null && message.hasOwnProperty(\"hashTreeExtent\"))\n                object.hashTreeExtent = $root.chromeos_update_engine.Extent.toObject(message.hashTreeExtent, options);\n            if (message.hashTreeAlgorithm != null && message.hasOwnProperty(\"hashTreeAlgorithm\"))\n                object.hashTreeAlgorithm = message.hashTreeAlgorithm;\n            if (message.hashTreeSalt != null && message.hasOwnProperty(\"hashTreeSalt\"))\n                object.hashTreeSalt = options.bytes === String ? $util.base64.encode(message.hashTreeSalt, 0, message.hashTreeSalt.length) : options.bytes === Array ? Array.prototype.slice.call(message.hashTreeSalt) : message.hashTreeSalt;\n            if (message.fecDataExtent != null && message.hasOwnProperty(\"fecDataExtent\"))\n                object.fecDataExtent = $root.chromeos_update_engine.Extent.toObject(message.fecDataExtent, options);\n            if (message.fecExtent != null && message.hasOwnProperty(\"fecExtent\"))\n                object.fecExtent = $root.chromeos_update_engine.Extent.toObject(message.fecExtent, options);\n            if (message.fecRoots != null && message.hasOwnProperty(\"fecRoots\"))\n                object.fecRoots = message.fecRoots;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                object.version = message.version;\n            if (message.mergeOperations && message.mergeOperations.length) {\n                object.mergeOperations = [];\n                for (let j = 0; j < message.mergeOperations.length; ++j)\n                    object.mergeOperations[j] = $root.chromeos_update_engine.CowMergeOperation.toObject(message.mergeOperations[j], options);\n            }\n            if (message.estimateCowSize != null && message.hasOwnProperty(\"estimateCowSize\"))\n                if (typeof message.estimateCowSize === \"number\")\n                    object.estimateCowSize = options.longs === String ? String(message.estimateCowSize) : message.estimateCowSize;\n                else\n                    object.estimateCowSize = options.longs === String ? $util.Long.prototype.toString.call(message.estimateCowSize) : options.longs === Number ? new $util.LongBits(message.estimateCowSize.low >>> 0, message.estimateCowSize.high >>> 0).toNumber(true) : message.estimateCowSize;\n            return object;\n        };\n\n        /**\n         * Converts this PartitionUpdate to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.PartitionUpdate\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PartitionUpdate.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return PartitionUpdate;\n    })();\n\n    chromeos_update_engine.DynamicPartitionGroup = (function() {\n\n        /**\n         * Properties of a DynamicPartitionGroup.\n         * @memberof chromeos_update_engine\n         * @interface IDynamicPartitionGroup\n         * @property {string} name DynamicPartitionGroup name\n         * @property {number|Long|null} [size] DynamicPartitionGroup size\n         * @property {Array.<string>|null} [partitionNames] DynamicPartitionGroup partitionNames\n         */\n\n        /**\n         * Constructs a new DynamicPartitionGroup.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a DynamicPartitionGroup.\n         * @implements IDynamicPartitionGroup\n         * @constructor\n         * @param {chromeos_update_engine.IDynamicPartitionGroup=} [properties] Properties to set\n         */\n        function DynamicPartitionGroup(properties) {\n            this.partitionNames = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DynamicPartitionGroup name.\n         * @member {string} name\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @instance\n         */\n        DynamicPartitionGroup.prototype.name = \"\";\n\n        /**\n         * DynamicPartitionGroup size.\n         * @member {number|Long} size\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @instance\n         */\n        DynamicPartitionGroup.prototype.size = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * DynamicPartitionGroup partitionNames.\n         * @member {Array.<string>} partitionNames\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @instance\n         */\n        DynamicPartitionGroup.prototype.partitionNames = $util.emptyArray;\n\n        /**\n         * Creates a new DynamicPartitionGroup instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionGroup=} [properties] Properties to set\n         * @returns {chromeos_update_engine.DynamicPartitionGroup} DynamicPartitionGroup instance\n         */\n        DynamicPartitionGroup.create = function create(properties) {\n            return new DynamicPartitionGroup(properties);\n        };\n\n        /**\n         * Encodes the specified DynamicPartitionGroup message. Does not implicitly {@link chromeos_update_engine.DynamicPartitionGroup.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionGroup} message DynamicPartitionGroup message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DynamicPartitionGroup.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.size != null && Object.hasOwnProperty.call(message, \"size\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.size);\n            if (message.partitionNames != null && message.partitionNames.length)\n                for (let i = 0; i < message.partitionNames.length; ++i)\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.partitionNames[i]);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified DynamicPartitionGroup message, length delimited. Does not implicitly {@link chromeos_update_engine.DynamicPartitionGroup.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionGroup} message DynamicPartitionGroup message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DynamicPartitionGroup.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DynamicPartitionGroup message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.DynamicPartitionGroup} DynamicPartitionGroup\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DynamicPartitionGroup.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.DynamicPartitionGroup();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.size = reader.uint64();\n                    break;\n                case 3:\n                    if (!(message.partitionNames && message.partitionNames.length))\n                        message.partitionNames = [];\n                    message.partitionNames.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            if (!message.hasOwnProperty(\"name\"))\n                throw $util.ProtocolError(\"missing required 'name'\", { instance: message });\n            return message;\n        };\n\n        /**\n         * Decodes a DynamicPartitionGroup message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.DynamicPartitionGroup} DynamicPartitionGroup\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DynamicPartitionGroup.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DynamicPartitionGroup message.\n         * @function verify\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DynamicPartitionGroup.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))\n                    return \"size: integer|Long expected\";\n            if (message.partitionNames != null && message.hasOwnProperty(\"partitionNames\")) {\n                if (!Array.isArray(message.partitionNames))\n                    return \"partitionNames: array expected\";\n                for (let i = 0; i < message.partitionNames.length; ++i)\n                    if (!$util.isString(message.partitionNames[i]))\n                        return \"partitionNames: string[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a DynamicPartitionGroup message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.DynamicPartitionGroup} DynamicPartitionGroup\n         */\n        DynamicPartitionGroup.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.DynamicPartitionGroup)\n                return object;\n            let message = new $root.chromeos_update_engine.DynamicPartitionGroup();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.size != null)\n                if ($util.Long)\n                    (message.size = $util.Long.fromValue(object.size)).unsigned = true;\n                else if (typeof object.size === \"string\")\n                    message.size = parseInt(object.size, 10);\n                else if (typeof object.size === \"number\")\n                    message.size = object.size;\n                else if (typeof object.size === \"object\")\n                    message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber(true);\n            if (object.partitionNames) {\n                if (!Array.isArray(object.partitionNames))\n                    throw TypeError(\".chromeos_update_engine.DynamicPartitionGroup.partitionNames: array expected\");\n                message.partitionNames = [];\n                for (let i = 0; i < object.partitionNames.length; ++i)\n                    message.partitionNames[i] = String(object.partitionNames[i]);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a DynamicPartitionGroup message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @static\n         * @param {chromeos_update_engine.DynamicPartitionGroup} message DynamicPartitionGroup\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DynamicPartitionGroup.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.partitionNames = [];\n            if (options.defaults) {\n                object.name = \"\";\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.size = options.longs === String ? \"0\" : 0;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (typeof message.size === \"number\")\n                    object.size = options.longs === String ? String(message.size) : message.size;\n                else\n                    object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber(true) : message.size;\n            if (message.partitionNames && message.partitionNames.length) {\n                object.partitionNames = [];\n                for (let j = 0; j < message.partitionNames.length; ++j)\n                    object.partitionNames[j] = message.partitionNames[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this DynamicPartitionGroup to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.DynamicPartitionGroup\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DynamicPartitionGroup.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DynamicPartitionGroup;\n    })();\n\n    chromeos_update_engine.DynamicPartitionMetadata = (function() {\n\n        /**\n         * Properties of a DynamicPartitionMetadata.\n         * @memberof chromeos_update_engine\n         * @interface IDynamicPartitionMetadata\n         * @property {Array.<chromeos_update_engine.IDynamicPartitionGroup>|null} [groups] DynamicPartitionMetadata groups\n         * @property {boolean|null} [snapshotEnabled] DynamicPartitionMetadata snapshotEnabled\n         * @property {boolean|null} [vabcEnabled] DynamicPartitionMetadata vabcEnabled\n         * @property {string|null} [vabcCompressionParam] DynamicPartitionMetadata vabcCompressionParam\n         * @property {number|null} [cowVersion] DynamicPartitionMetadata cowVersion\n         */\n\n        /**\n         * Constructs a new DynamicPartitionMetadata.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a DynamicPartitionMetadata.\n         * @implements IDynamicPartitionMetadata\n         * @constructor\n         * @param {chromeos_update_engine.IDynamicPartitionMetadata=} [properties] Properties to set\n         */\n        function DynamicPartitionMetadata(properties) {\n            this.groups = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DynamicPartitionMetadata groups.\n         * @member {Array.<chromeos_update_engine.IDynamicPartitionGroup>} groups\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.groups = $util.emptyArray;\n\n        /**\n         * DynamicPartitionMetadata snapshotEnabled.\n         * @member {boolean} snapshotEnabled\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.snapshotEnabled = false;\n\n        /**\n         * DynamicPartitionMetadata vabcEnabled.\n         * @member {boolean} vabcEnabled\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.vabcEnabled = false;\n\n        /**\n         * DynamicPartitionMetadata vabcCompressionParam.\n         * @member {string} vabcCompressionParam\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.vabcCompressionParam = \"\";\n\n        /**\n         * DynamicPartitionMetadata cowVersion.\n         * @member {number} cowVersion\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         */\n        DynamicPartitionMetadata.prototype.cowVersion = 0;\n\n        /**\n         * Creates a new DynamicPartitionMetadata instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionMetadata=} [properties] Properties to set\n         * @returns {chromeos_update_engine.DynamicPartitionMetadata} DynamicPartitionMetadata instance\n         */\n        DynamicPartitionMetadata.create = function create(properties) {\n            return new DynamicPartitionMetadata(properties);\n        };\n\n        /**\n         * Encodes the specified DynamicPartitionMetadata message. Does not implicitly {@link chromeos_update_engine.DynamicPartitionMetadata.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionMetadata} message DynamicPartitionMetadata message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DynamicPartitionMetadata.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.groups != null && message.groups.length)\n                for (let i = 0; i < message.groups.length; ++i)\n                    $root.chromeos_update_engine.DynamicPartitionGroup.encode(message.groups[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.snapshotEnabled != null && Object.hasOwnProperty.call(message, \"snapshotEnabled\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.snapshotEnabled);\n            if (message.vabcEnabled != null && Object.hasOwnProperty.call(message, \"vabcEnabled\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.vabcEnabled);\n            if (message.vabcCompressionParam != null && Object.hasOwnProperty.call(message, \"vabcCompressionParam\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.vabcCompressionParam);\n            if (message.cowVersion != null && Object.hasOwnProperty.call(message, \"cowVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.cowVersion);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified DynamicPartitionMetadata message, length delimited. Does not implicitly {@link chromeos_update_engine.DynamicPartitionMetadata.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {chromeos_update_engine.IDynamicPartitionMetadata} message DynamicPartitionMetadata message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DynamicPartitionMetadata.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DynamicPartitionMetadata message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.DynamicPartitionMetadata} DynamicPartitionMetadata\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DynamicPartitionMetadata.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.DynamicPartitionMetadata();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.groups && message.groups.length))\n                        message.groups = [];\n                    message.groups.push($root.chromeos_update_engine.DynamicPartitionGroup.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.snapshotEnabled = reader.bool();\n                    break;\n                case 3:\n                    message.vabcEnabled = reader.bool();\n                    break;\n                case 4:\n                    message.vabcCompressionParam = reader.string();\n                    break;\n                case 5:\n                    message.cowVersion = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a DynamicPartitionMetadata message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.DynamicPartitionMetadata} DynamicPartitionMetadata\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DynamicPartitionMetadata.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DynamicPartitionMetadata message.\n         * @function verify\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DynamicPartitionMetadata.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.groups != null && message.hasOwnProperty(\"groups\")) {\n                if (!Array.isArray(message.groups))\n                    return \"groups: array expected\";\n                for (let i = 0; i < message.groups.length; ++i) {\n                    let error = $root.chromeos_update_engine.DynamicPartitionGroup.verify(message.groups[i]);\n                    if (error)\n                        return \"groups.\" + error;\n                }\n            }\n            if (message.snapshotEnabled != null && message.hasOwnProperty(\"snapshotEnabled\"))\n                if (typeof message.snapshotEnabled !== \"boolean\")\n                    return \"snapshotEnabled: boolean expected\";\n            if (message.vabcEnabled != null && message.hasOwnProperty(\"vabcEnabled\"))\n                if (typeof message.vabcEnabled !== \"boolean\")\n                    return \"vabcEnabled: boolean expected\";\n            if (message.vabcCompressionParam != null && message.hasOwnProperty(\"vabcCompressionParam\"))\n                if (!$util.isString(message.vabcCompressionParam))\n                    return \"vabcCompressionParam: string expected\";\n            if (message.cowVersion != null && message.hasOwnProperty(\"cowVersion\"))\n                if (!$util.isInteger(message.cowVersion))\n                    return \"cowVersion: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a DynamicPartitionMetadata message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.DynamicPartitionMetadata} DynamicPartitionMetadata\n         */\n        DynamicPartitionMetadata.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.DynamicPartitionMetadata)\n                return object;\n            let message = new $root.chromeos_update_engine.DynamicPartitionMetadata();\n            if (object.groups) {\n                if (!Array.isArray(object.groups))\n                    throw TypeError(\".chromeos_update_engine.DynamicPartitionMetadata.groups: array expected\");\n                message.groups = [];\n                for (let i = 0; i < object.groups.length; ++i) {\n                    if (typeof object.groups[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.DynamicPartitionMetadata.groups: object expected\");\n                    message.groups[i] = $root.chromeos_update_engine.DynamicPartitionGroup.fromObject(object.groups[i]);\n                }\n            }\n            if (object.snapshotEnabled != null)\n                message.snapshotEnabled = Boolean(object.snapshotEnabled);\n            if (object.vabcEnabled != null)\n                message.vabcEnabled = Boolean(object.vabcEnabled);\n            if (object.vabcCompressionParam != null)\n                message.vabcCompressionParam = String(object.vabcCompressionParam);\n            if (object.cowVersion != null)\n                message.cowVersion = object.cowVersion >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a DynamicPartitionMetadata message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @static\n         * @param {chromeos_update_engine.DynamicPartitionMetadata} message DynamicPartitionMetadata\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DynamicPartitionMetadata.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.groups = [];\n            if (options.defaults) {\n                object.snapshotEnabled = false;\n                object.vabcEnabled = false;\n                object.vabcCompressionParam = \"\";\n                object.cowVersion = 0;\n            }\n            if (message.groups && message.groups.length) {\n                object.groups = [];\n                for (let j = 0; j < message.groups.length; ++j)\n                    object.groups[j] = $root.chromeos_update_engine.DynamicPartitionGroup.toObject(message.groups[j], options);\n            }\n            if (message.snapshotEnabled != null && message.hasOwnProperty(\"snapshotEnabled\"))\n                object.snapshotEnabled = message.snapshotEnabled;\n            if (message.vabcEnabled != null && message.hasOwnProperty(\"vabcEnabled\"))\n                object.vabcEnabled = message.vabcEnabled;\n            if (message.vabcCompressionParam != null && message.hasOwnProperty(\"vabcCompressionParam\"))\n                object.vabcCompressionParam = message.vabcCompressionParam;\n            if (message.cowVersion != null && message.hasOwnProperty(\"cowVersion\"))\n                object.cowVersion = message.cowVersion;\n            return object;\n        };\n\n        /**\n         * Converts this DynamicPartitionMetadata to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.DynamicPartitionMetadata\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DynamicPartitionMetadata.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DynamicPartitionMetadata;\n    })();\n\n    chromeos_update_engine.ApexInfo = (function() {\n\n        /**\n         * Properties of an ApexInfo.\n         * @memberof chromeos_update_engine\n         * @interface IApexInfo\n         * @property {string|null} [packageName] ApexInfo packageName\n         * @property {number|Long|null} [version] ApexInfo version\n         * @property {boolean|null} [isCompressed] ApexInfo isCompressed\n         * @property {number|Long|null} [decompressedSize] ApexInfo decompressedSize\n         */\n\n        /**\n         * Constructs a new ApexInfo.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents an ApexInfo.\n         * @implements IApexInfo\n         * @constructor\n         * @param {chromeos_update_engine.IApexInfo=} [properties] Properties to set\n         */\n        function ApexInfo(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ApexInfo packageName.\n         * @member {string} packageName\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         */\n        ApexInfo.prototype.packageName = \"\";\n\n        /**\n         * ApexInfo version.\n         * @member {number|Long} version\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         */\n        ApexInfo.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ApexInfo isCompressed.\n         * @member {boolean} isCompressed\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         */\n        ApexInfo.prototype.isCompressed = false;\n\n        /**\n         * ApexInfo decompressedSize.\n         * @member {number|Long} decompressedSize\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         */\n        ApexInfo.prototype.decompressedSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new ApexInfo instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {chromeos_update_engine.IApexInfo=} [properties] Properties to set\n         * @returns {chromeos_update_engine.ApexInfo} ApexInfo instance\n         */\n        ApexInfo.create = function create(properties) {\n            return new ApexInfo(properties);\n        };\n\n        /**\n         * Encodes the specified ApexInfo message. Does not implicitly {@link chromeos_update_engine.ApexInfo.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {chromeos_update_engine.IApexInfo} message ApexInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApexInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.packageName != null && Object.hasOwnProperty.call(message, \"packageName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.packageName);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            if (message.isCompressed != null && Object.hasOwnProperty.call(message, \"isCompressed\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isCompressed);\n            if (message.decompressedSize != null && Object.hasOwnProperty.call(message, \"decompressedSize\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.decompressedSize);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ApexInfo message, length delimited. Does not implicitly {@link chromeos_update_engine.ApexInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {chromeos_update_engine.IApexInfo} message ApexInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApexInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ApexInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.ApexInfo} ApexInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApexInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.ApexInfo();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.packageName = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                case 3:\n                    message.isCompressed = reader.bool();\n                    break;\n                case 4:\n                    message.decompressedSize = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an ApexInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.ApexInfo} ApexInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApexInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ApexInfo message.\n         * @function verify\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ApexInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.packageName != null && message.hasOwnProperty(\"packageName\"))\n                if (!$util.isString(message.packageName))\n                    return \"packageName: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            if (message.isCompressed != null && message.hasOwnProperty(\"isCompressed\"))\n                if (typeof message.isCompressed !== \"boolean\")\n                    return \"isCompressed: boolean expected\";\n            if (message.decompressedSize != null && message.hasOwnProperty(\"decompressedSize\"))\n                if (!$util.isInteger(message.decompressedSize) && !(message.decompressedSize && $util.isInteger(message.decompressedSize.low) && $util.isInteger(message.decompressedSize.high)))\n                    return \"decompressedSize: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an ApexInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.ApexInfo} ApexInfo\n         */\n        ApexInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.ApexInfo)\n                return object;\n            let message = new $root.chromeos_update_engine.ApexInfo();\n            if (object.packageName != null)\n                message.packageName = String(object.packageName);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            if (object.isCompressed != null)\n                message.isCompressed = Boolean(object.isCompressed);\n            if (object.decompressedSize != null)\n                if ($util.Long)\n                    (message.decompressedSize = $util.Long.fromValue(object.decompressedSize)).unsigned = false;\n                else if (typeof object.decompressedSize === \"string\")\n                    message.decompressedSize = parseInt(object.decompressedSize, 10);\n                else if (typeof object.decompressedSize === \"number\")\n                    message.decompressedSize = object.decompressedSize;\n                else if (typeof object.decompressedSize === \"object\")\n                    message.decompressedSize = new $util.LongBits(object.decompressedSize.low >>> 0, object.decompressedSize.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ApexInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.ApexInfo\n         * @static\n         * @param {chromeos_update_engine.ApexInfo} message ApexInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ApexInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.packageName = \"\";\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n                object.isCompressed = false;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.decompressedSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.decompressedSize = options.longs === String ? \"0\" : 0;\n            }\n            if (message.packageName != null && message.hasOwnProperty(\"packageName\"))\n                object.packageName = message.packageName;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            if (message.isCompressed != null && message.hasOwnProperty(\"isCompressed\"))\n                object.isCompressed = message.isCompressed;\n            if (message.decompressedSize != null && message.hasOwnProperty(\"decompressedSize\"))\n                if (typeof message.decompressedSize === \"number\")\n                    object.decompressedSize = options.longs === String ? String(message.decompressedSize) : message.decompressedSize;\n                else\n                    object.decompressedSize = options.longs === String ? $util.Long.prototype.toString.call(message.decompressedSize) : options.longs === Number ? new $util.LongBits(message.decompressedSize.low >>> 0, message.decompressedSize.high >>> 0).toNumber() : message.decompressedSize;\n            return object;\n        };\n\n        /**\n         * Converts this ApexInfo to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.ApexInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ApexInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ApexInfo;\n    })();\n\n    chromeos_update_engine.ApexMetadata = (function() {\n\n        /**\n         * Properties of an ApexMetadata.\n         * @memberof chromeos_update_engine\n         * @interface IApexMetadata\n         * @property {Array.<chromeos_update_engine.IApexInfo>|null} [apexInfo] ApexMetadata apexInfo\n         */\n\n        /**\n         * Constructs a new ApexMetadata.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents an ApexMetadata.\n         * @implements IApexMetadata\n         * @constructor\n         * @param {chromeos_update_engine.IApexMetadata=} [properties] Properties to set\n         */\n        function ApexMetadata(properties) {\n            this.apexInfo = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ApexMetadata apexInfo.\n         * @member {Array.<chromeos_update_engine.IApexInfo>} apexInfo\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @instance\n         */\n        ApexMetadata.prototype.apexInfo = $util.emptyArray;\n\n        /**\n         * Creates a new ApexMetadata instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {chromeos_update_engine.IApexMetadata=} [properties] Properties to set\n         * @returns {chromeos_update_engine.ApexMetadata} ApexMetadata instance\n         */\n        ApexMetadata.create = function create(properties) {\n            return new ApexMetadata(properties);\n        };\n\n        /**\n         * Encodes the specified ApexMetadata message. Does not implicitly {@link chromeos_update_engine.ApexMetadata.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {chromeos_update_engine.IApexMetadata} message ApexMetadata message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApexMetadata.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.apexInfo != null && message.apexInfo.length)\n                for (let i = 0; i < message.apexInfo.length; ++i)\n                    $root.chromeos_update_engine.ApexInfo.encode(message.apexInfo[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ApexMetadata message, length delimited. Does not implicitly {@link chromeos_update_engine.ApexMetadata.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {chromeos_update_engine.IApexMetadata} message ApexMetadata message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApexMetadata.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ApexMetadata message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.ApexMetadata} ApexMetadata\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApexMetadata.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.ApexMetadata();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.apexInfo && message.apexInfo.length))\n                        message.apexInfo = [];\n                    message.apexInfo.push($root.chromeos_update_engine.ApexInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an ApexMetadata message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.ApexMetadata} ApexMetadata\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApexMetadata.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ApexMetadata message.\n         * @function verify\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ApexMetadata.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.apexInfo != null && message.hasOwnProperty(\"apexInfo\")) {\n                if (!Array.isArray(message.apexInfo))\n                    return \"apexInfo: array expected\";\n                for (let i = 0; i < message.apexInfo.length; ++i) {\n                    let error = $root.chromeos_update_engine.ApexInfo.verify(message.apexInfo[i]);\n                    if (error)\n                        return \"apexInfo.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an ApexMetadata message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.ApexMetadata} ApexMetadata\n         */\n        ApexMetadata.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.ApexMetadata)\n                return object;\n            let message = new $root.chromeos_update_engine.ApexMetadata();\n            if (object.apexInfo) {\n                if (!Array.isArray(object.apexInfo))\n                    throw TypeError(\".chromeos_update_engine.ApexMetadata.apexInfo: array expected\");\n                message.apexInfo = [];\n                for (let i = 0; i < object.apexInfo.length; ++i) {\n                    if (typeof object.apexInfo[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.ApexMetadata.apexInfo: object expected\");\n                    message.apexInfo[i] = $root.chromeos_update_engine.ApexInfo.fromObject(object.apexInfo[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ApexMetadata message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @static\n         * @param {chromeos_update_engine.ApexMetadata} message ApexMetadata\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ApexMetadata.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.apexInfo = [];\n            if (message.apexInfo && message.apexInfo.length) {\n                object.apexInfo = [];\n                for (let j = 0; j < message.apexInfo.length; ++j)\n                    object.apexInfo[j] = $root.chromeos_update_engine.ApexInfo.toObject(message.apexInfo[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ApexMetadata to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.ApexMetadata\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ApexMetadata.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ApexMetadata;\n    })();\n\n    chromeos_update_engine.DeltaArchiveManifest = (function() {\n\n        /**\n         * Properties of a DeltaArchiveManifest.\n         * @memberof chromeos_update_engine\n         * @interface IDeltaArchiveManifest\n         * @property {Array.<chromeos_update_engine.IInstallOperation>|null} [installOperations] DeltaArchiveManifest installOperations\n         * @property {Array.<chromeos_update_engine.IInstallOperation>|null} [kernelInstallOperations] DeltaArchiveManifest kernelInstallOperations\n         * @property {number|null} [blockSize] DeltaArchiveManifest blockSize\n         * @property {number|Long|null} [signaturesOffset] DeltaArchiveManifest signaturesOffset\n         * @property {number|Long|null} [signaturesSize] DeltaArchiveManifest signaturesSize\n         * @property {chromeos_update_engine.IPartitionInfo|null} [oldKernelInfo] DeltaArchiveManifest oldKernelInfo\n         * @property {chromeos_update_engine.IPartitionInfo|null} [newKernelInfo] DeltaArchiveManifest newKernelInfo\n         * @property {chromeos_update_engine.IPartitionInfo|null} [oldRootfsInfo] DeltaArchiveManifest oldRootfsInfo\n         * @property {chromeos_update_engine.IPartitionInfo|null} [newRootfsInfo] DeltaArchiveManifest newRootfsInfo\n         * @property {chromeos_update_engine.IImageInfo|null} [oldImageInfo] DeltaArchiveManifest oldImageInfo\n         * @property {chromeos_update_engine.IImageInfo|null} [newImageInfo] DeltaArchiveManifest newImageInfo\n         * @property {number|null} [minorVersion] DeltaArchiveManifest minorVersion\n         * @property {Array.<chromeos_update_engine.IPartitionUpdate>|null} [partitions] DeltaArchiveManifest partitions\n         * @property {number|Long|null} [maxTimestamp] DeltaArchiveManifest maxTimestamp\n         * @property {chromeos_update_engine.IDynamicPartitionMetadata|null} [dynamicPartitionMetadata] DeltaArchiveManifest dynamicPartitionMetadata\n         * @property {boolean|null} [partialUpdate] DeltaArchiveManifest partialUpdate\n         * @property {Array.<chromeos_update_engine.IApexInfo>|null} [apexInfo] DeltaArchiveManifest apexInfo\n         */\n\n        /**\n         * Constructs a new DeltaArchiveManifest.\n         * @memberof chromeos_update_engine\n         * @classdesc Represents a DeltaArchiveManifest.\n         * @implements IDeltaArchiveManifest\n         * @constructor\n         * @param {chromeos_update_engine.IDeltaArchiveManifest=} [properties] Properties to set\n         */\n        function DeltaArchiveManifest(properties) {\n            this.installOperations = [];\n            this.kernelInstallOperations = [];\n            this.partitions = [];\n            this.apexInfo = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DeltaArchiveManifest installOperations.\n         * @member {Array.<chromeos_update_engine.IInstallOperation>} installOperations\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.installOperations = $util.emptyArray;\n\n        /**\n         * DeltaArchiveManifest kernelInstallOperations.\n         * @member {Array.<chromeos_update_engine.IInstallOperation>} kernelInstallOperations\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.kernelInstallOperations = $util.emptyArray;\n\n        /**\n         * DeltaArchiveManifest blockSize.\n         * @member {number} blockSize\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.blockSize = 4096;\n\n        /**\n         * DeltaArchiveManifest signaturesOffset.\n         * @member {number|Long} signaturesOffset\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.signaturesOffset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * DeltaArchiveManifest signaturesSize.\n         * @member {number|Long} signaturesSize\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.signaturesSize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * DeltaArchiveManifest oldKernelInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} oldKernelInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.oldKernelInfo = null;\n\n        /**\n         * DeltaArchiveManifest newKernelInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} newKernelInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.newKernelInfo = null;\n\n        /**\n         * DeltaArchiveManifest oldRootfsInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} oldRootfsInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.oldRootfsInfo = null;\n\n        /**\n         * DeltaArchiveManifest newRootfsInfo.\n         * @member {chromeos_update_engine.IPartitionInfo|null|undefined} newRootfsInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.newRootfsInfo = null;\n\n        /**\n         * DeltaArchiveManifest oldImageInfo.\n         * @member {chromeos_update_engine.IImageInfo|null|undefined} oldImageInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.oldImageInfo = null;\n\n        /**\n         * DeltaArchiveManifest newImageInfo.\n         * @member {chromeos_update_engine.IImageInfo|null|undefined} newImageInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.newImageInfo = null;\n\n        /**\n         * DeltaArchiveManifest minorVersion.\n         * @member {number} minorVersion\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.minorVersion = 0;\n\n        /**\n         * DeltaArchiveManifest partitions.\n         * @member {Array.<chromeos_update_engine.IPartitionUpdate>} partitions\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.partitions = $util.emptyArray;\n\n        /**\n         * DeltaArchiveManifest maxTimestamp.\n         * @member {number|Long} maxTimestamp\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.maxTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * DeltaArchiveManifest dynamicPartitionMetadata.\n         * @member {chromeos_update_engine.IDynamicPartitionMetadata|null|undefined} dynamicPartitionMetadata\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.dynamicPartitionMetadata = null;\n\n        /**\n         * DeltaArchiveManifest partialUpdate.\n         * @member {boolean} partialUpdate\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.partialUpdate = false;\n\n        /**\n         * DeltaArchiveManifest apexInfo.\n         * @member {Array.<chromeos_update_engine.IApexInfo>} apexInfo\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         */\n        DeltaArchiveManifest.prototype.apexInfo = $util.emptyArray;\n\n        /**\n         * Creates a new DeltaArchiveManifest instance using the specified properties.\n         * @function create\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {chromeos_update_engine.IDeltaArchiveManifest=} [properties] Properties to set\n         * @returns {chromeos_update_engine.DeltaArchiveManifest} DeltaArchiveManifest instance\n         */\n        DeltaArchiveManifest.create = function create(properties) {\n            return new DeltaArchiveManifest(properties);\n        };\n\n        /**\n         * Encodes the specified DeltaArchiveManifest message. Does not implicitly {@link chromeos_update_engine.DeltaArchiveManifest.verify|verify} messages.\n         * @function encode\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {chromeos_update_engine.IDeltaArchiveManifest} message DeltaArchiveManifest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DeltaArchiveManifest.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.installOperations != null && message.installOperations.length)\n                for (let i = 0; i < message.installOperations.length; ++i)\n                    $root.chromeos_update_engine.InstallOperation.encode(message.installOperations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.kernelInstallOperations != null && message.kernelInstallOperations.length)\n                for (let i = 0; i < message.kernelInstallOperations.length; ++i)\n                    $root.chromeos_update_engine.InstallOperation.encode(message.kernelInstallOperations[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.blockSize != null && Object.hasOwnProperty.call(message, \"blockSize\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.blockSize);\n            if (message.signaturesOffset != null && Object.hasOwnProperty.call(message, \"signaturesOffset\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.signaturesOffset);\n            if (message.signaturesSize != null && Object.hasOwnProperty.call(message, \"signaturesSize\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.signaturesSize);\n            if (message.oldKernelInfo != null && Object.hasOwnProperty.call(message, \"oldKernelInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.oldKernelInfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.newKernelInfo != null && Object.hasOwnProperty.call(message, \"newKernelInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.newKernelInfo, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.oldRootfsInfo != null && Object.hasOwnProperty.call(message, \"oldRootfsInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.oldRootfsInfo, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.newRootfsInfo != null && Object.hasOwnProperty.call(message, \"newRootfsInfo\"))\n                $root.chromeos_update_engine.PartitionInfo.encode(message.newRootfsInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.oldImageInfo != null && Object.hasOwnProperty.call(message, \"oldImageInfo\"))\n                $root.chromeos_update_engine.ImageInfo.encode(message.oldImageInfo, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.newImageInfo != null && Object.hasOwnProperty.call(message, \"newImageInfo\"))\n                $root.chromeos_update_engine.ImageInfo.encode(message.newImageInfo, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.minorVersion != null && Object.hasOwnProperty.call(message, \"minorVersion\"))\n                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.minorVersion);\n            if (message.partitions != null && message.partitions.length)\n                for (let i = 0; i < message.partitions.length; ++i)\n                    $root.chromeos_update_engine.PartitionUpdate.encode(message.partitions[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.maxTimestamp != null && Object.hasOwnProperty.call(message, \"maxTimestamp\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int64(message.maxTimestamp);\n            if (message.dynamicPartitionMetadata != null && Object.hasOwnProperty.call(message, \"dynamicPartitionMetadata\"))\n                $root.chromeos_update_engine.DynamicPartitionMetadata.encode(message.dynamicPartitionMetadata, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.partialUpdate != null && Object.hasOwnProperty.call(message, \"partialUpdate\"))\n                writer.uint32(/* id 16, wireType 0 =*/128).bool(message.partialUpdate);\n            if (message.apexInfo != null && message.apexInfo.length)\n                for (let i = 0; i < message.apexInfo.length; ++i)\n                    $root.chromeos_update_engine.ApexInfo.encode(message.apexInfo[i], writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified DeltaArchiveManifest message, length delimited. Does not implicitly {@link chromeos_update_engine.DeltaArchiveManifest.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {chromeos_update_engine.IDeltaArchiveManifest} message DeltaArchiveManifest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DeltaArchiveManifest.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DeltaArchiveManifest message from the specified reader or buffer.\n         * @function decode\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {chromeos_update_engine.DeltaArchiveManifest} DeltaArchiveManifest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DeltaArchiveManifest.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.chromeos_update_engine.DeltaArchiveManifest();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.installOperations && message.installOperations.length))\n                        message.installOperations = [];\n                    message.installOperations.push($root.chromeos_update_engine.InstallOperation.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    if (!(message.kernelInstallOperations && message.kernelInstallOperations.length))\n                        message.kernelInstallOperations = [];\n                    message.kernelInstallOperations.push($root.chromeos_update_engine.InstallOperation.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.blockSize = reader.uint32();\n                    break;\n                case 4:\n                    message.signaturesOffset = reader.uint64();\n                    break;\n                case 5:\n                    message.signaturesSize = reader.uint64();\n                    break;\n                case 6:\n                    message.oldKernelInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.newKernelInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.oldRootfsInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.newRootfsInfo = $root.chromeos_update_engine.PartitionInfo.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.oldImageInfo = $root.chromeos_update_engine.ImageInfo.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.newImageInfo = $root.chromeos_update_engine.ImageInfo.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.minorVersion = reader.uint32();\n                    break;\n                case 13:\n                    if (!(message.partitions && message.partitions.length))\n                        message.partitions = [];\n                    message.partitions.push($root.chromeos_update_engine.PartitionUpdate.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.maxTimestamp = reader.int64();\n                    break;\n                case 15:\n                    message.dynamicPartitionMetadata = $root.chromeos_update_engine.DynamicPartitionMetadata.decode(reader, reader.uint32());\n                    break;\n                case 16:\n                    message.partialUpdate = reader.bool();\n                    break;\n                case 17:\n                    if (!(message.apexInfo && message.apexInfo.length))\n                        message.apexInfo = [];\n                    message.apexInfo.push($root.chromeos_update_engine.ApexInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a DeltaArchiveManifest message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {chromeos_update_engine.DeltaArchiveManifest} DeltaArchiveManifest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DeltaArchiveManifest.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DeltaArchiveManifest message.\n         * @function verify\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DeltaArchiveManifest.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.installOperations != null && message.hasOwnProperty(\"installOperations\")) {\n                if (!Array.isArray(message.installOperations))\n                    return \"installOperations: array expected\";\n                for (let i = 0; i < message.installOperations.length; ++i) {\n                    let error = $root.chromeos_update_engine.InstallOperation.verify(message.installOperations[i]);\n                    if (error)\n                        return \"installOperations.\" + error;\n                }\n            }\n            if (message.kernelInstallOperations != null && message.hasOwnProperty(\"kernelInstallOperations\")) {\n                if (!Array.isArray(message.kernelInstallOperations))\n                    return \"kernelInstallOperations: array expected\";\n                for (let i = 0; i < message.kernelInstallOperations.length; ++i) {\n                    let error = $root.chromeos_update_engine.InstallOperation.verify(message.kernelInstallOperations[i]);\n                    if (error)\n                        return \"kernelInstallOperations.\" + error;\n                }\n            }\n            if (message.blockSize != null && message.hasOwnProperty(\"blockSize\"))\n                if (!$util.isInteger(message.blockSize))\n                    return \"blockSize: integer expected\";\n            if (message.signaturesOffset != null && message.hasOwnProperty(\"signaturesOffset\"))\n                if (!$util.isInteger(message.signaturesOffset) && !(message.signaturesOffset && $util.isInteger(message.signaturesOffset.low) && $util.isInteger(message.signaturesOffset.high)))\n                    return \"signaturesOffset: integer|Long expected\";\n            if (message.signaturesSize != null && message.hasOwnProperty(\"signaturesSize\"))\n                if (!$util.isInteger(message.signaturesSize) && !(message.signaturesSize && $util.isInteger(message.signaturesSize.low) && $util.isInteger(message.signaturesSize.high)))\n                    return \"signaturesSize: integer|Long expected\";\n            if (message.oldKernelInfo != null && message.hasOwnProperty(\"oldKernelInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.oldKernelInfo);\n                if (error)\n                    return \"oldKernelInfo.\" + error;\n            }\n            if (message.newKernelInfo != null && message.hasOwnProperty(\"newKernelInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.newKernelInfo);\n                if (error)\n                    return \"newKernelInfo.\" + error;\n            }\n            if (message.oldRootfsInfo != null && message.hasOwnProperty(\"oldRootfsInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.oldRootfsInfo);\n                if (error)\n                    return \"oldRootfsInfo.\" + error;\n            }\n            if (message.newRootfsInfo != null && message.hasOwnProperty(\"newRootfsInfo\")) {\n                let error = $root.chromeos_update_engine.PartitionInfo.verify(message.newRootfsInfo);\n                if (error)\n                    return \"newRootfsInfo.\" + error;\n            }\n            if (message.oldImageInfo != null && message.hasOwnProperty(\"oldImageInfo\")) {\n                let error = $root.chromeos_update_engine.ImageInfo.verify(message.oldImageInfo);\n                if (error)\n                    return \"oldImageInfo.\" + error;\n            }\n            if (message.newImageInfo != null && message.hasOwnProperty(\"newImageInfo\")) {\n                let error = $root.chromeos_update_engine.ImageInfo.verify(message.newImageInfo);\n                if (error)\n                    return \"newImageInfo.\" + error;\n            }\n            if (message.minorVersion != null && message.hasOwnProperty(\"minorVersion\"))\n                if (!$util.isInteger(message.minorVersion))\n                    return \"minorVersion: integer expected\";\n            if (message.partitions != null && message.hasOwnProperty(\"partitions\")) {\n                if (!Array.isArray(message.partitions))\n                    return \"partitions: array expected\";\n                for (let i = 0; i < message.partitions.length; ++i) {\n                    let error = $root.chromeos_update_engine.PartitionUpdate.verify(message.partitions[i]);\n                    if (error)\n                        return \"partitions.\" + error;\n                }\n            }\n            if (message.maxTimestamp != null && message.hasOwnProperty(\"maxTimestamp\"))\n                if (!$util.isInteger(message.maxTimestamp) && !(message.maxTimestamp && $util.isInteger(message.maxTimestamp.low) && $util.isInteger(message.maxTimestamp.high)))\n                    return \"maxTimestamp: integer|Long expected\";\n            if (message.dynamicPartitionMetadata != null && message.hasOwnProperty(\"dynamicPartitionMetadata\")) {\n                let error = $root.chromeos_update_engine.DynamicPartitionMetadata.verify(message.dynamicPartitionMetadata);\n                if (error)\n                    return \"dynamicPartitionMetadata.\" + error;\n            }\n            if (message.partialUpdate != null && message.hasOwnProperty(\"partialUpdate\"))\n                if (typeof message.partialUpdate !== \"boolean\")\n                    return \"partialUpdate: boolean expected\";\n            if (message.apexInfo != null && message.hasOwnProperty(\"apexInfo\")) {\n                if (!Array.isArray(message.apexInfo))\n                    return \"apexInfo: array expected\";\n                for (let i = 0; i < message.apexInfo.length; ++i) {\n                    let error = $root.chromeos_update_engine.ApexInfo.verify(message.apexInfo[i]);\n                    if (error)\n                        return \"apexInfo.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a DeltaArchiveManifest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {chromeos_update_engine.DeltaArchiveManifest} DeltaArchiveManifest\n         */\n        DeltaArchiveManifest.fromObject = function fromObject(object) {\n            if (object instanceof $root.chromeos_update_engine.DeltaArchiveManifest)\n                return object;\n            let message = new $root.chromeos_update_engine.DeltaArchiveManifest();\n            if (object.installOperations) {\n                if (!Array.isArray(object.installOperations))\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.installOperations: array expected\");\n                message.installOperations = [];\n                for (let i = 0; i < object.installOperations.length; ++i) {\n                    if (typeof object.installOperations[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.installOperations: object expected\");\n                    message.installOperations[i] = $root.chromeos_update_engine.InstallOperation.fromObject(object.installOperations[i]);\n                }\n            }\n            if (object.kernelInstallOperations) {\n                if (!Array.isArray(object.kernelInstallOperations))\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.kernelInstallOperations: array expected\");\n                message.kernelInstallOperations = [];\n                for (let i = 0; i < object.kernelInstallOperations.length; ++i) {\n                    if (typeof object.kernelInstallOperations[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.kernelInstallOperations: object expected\");\n                    message.kernelInstallOperations[i] = $root.chromeos_update_engine.InstallOperation.fromObject(object.kernelInstallOperations[i]);\n                }\n            }\n            if (object.blockSize != null)\n                message.blockSize = object.blockSize >>> 0;\n            if (object.signaturesOffset != null)\n                if ($util.Long)\n                    (message.signaturesOffset = $util.Long.fromValue(object.signaturesOffset)).unsigned = true;\n                else if (typeof object.signaturesOffset === \"string\")\n                    message.signaturesOffset = parseInt(object.signaturesOffset, 10);\n                else if (typeof object.signaturesOffset === \"number\")\n                    message.signaturesOffset = object.signaturesOffset;\n                else if (typeof object.signaturesOffset === \"object\")\n                    message.signaturesOffset = new $util.LongBits(object.signaturesOffset.low >>> 0, object.signaturesOffset.high >>> 0).toNumber(true);\n            if (object.signaturesSize != null)\n                if ($util.Long)\n                    (message.signaturesSize = $util.Long.fromValue(object.signaturesSize)).unsigned = true;\n                else if (typeof object.signaturesSize === \"string\")\n                    message.signaturesSize = parseInt(object.signaturesSize, 10);\n                else if (typeof object.signaturesSize === \"number\")\n                    message.signaturesSize = object.signaturesSize;\n                else if (typeof object.signaturesSize === \"object\")\n                    message.signaturesSize = new $util.LongBits(object.signaturesSize.low >>> 0, object.signaturesSize.high >>> 0).toNumber(true);\n            if (object.oldKernelInfo != null) {\n                if (typeof object.oldKernelInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.oldKernelInfo: object expected\");\n                message.oldKernelInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.oldKernelInfo);\n            }\n            if (object.newKernelInfo != null) {\n                if (typeof object.newKernelInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.newKernelInfo: object expected\");\n                message.newKernelInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.newKernelInfo);\n            }\n            if (object.oldRootfsInfo != null) {\n                if (typeof object.oldRootfsInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.oldRootfsInfo: object expected\");\n                message.oldRootfsInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.oldRootfsInfo);\n            }\n            if (object.newRootfsInfo != null) {\n                if (typeof object.newRootfsInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.newRootfsInfo: object expected\");\n                message.newRootfsInfo = $root.chromeos_update_engine.PartitionInfo.fromObject(object.newRootfsInfo);\n            }\n            if (object.oldImageInfo != null) {\n                if (typeof object.oldImageInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.oldImageInfo: object expected\");\n                message.oldImageInfo = $root.chromeos_update_engine.ImageInfo.fromObject(object.oldImageInfo);\n            }\n            if (object.newImageInfo != null) {\n                if (typeof object.newImageInfo !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.newImageInfo: object expected\");\n                message.newImageInfo = $root.chromeos_update_engine.ImageInfo.fromObject(object.newImageInfo);\n            }\n            if (object.minorVersion != null)\n                message.minorVersion = object.minorVersion >>> 0;\n            if (object.partitions) {\n                if (!Array.isArray(object.partitions))\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.partitions: array expected\");\n                message.partitions = [];\n                for (let i = 0; i < object.partitions.length; ++i) {\n                    if (typeof object.partitions[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.partitions: object expected\");\n                    message.partitions[i] = $root.chromeos_update_engine.PartitionUpdate.fromObject(object.partitions[i]);\n                }\n            }\n            if (object.maxTimestamp != null)\n                if ($util.Long)\n                    (message.maxTimestamp = $util.Long.fromValue(object.maxTimestamp)).unsigned = false;\n                else if (typeof object.maxTimestamp === \"string\")\n                    message.maxTimestamp = parseInt(object.maxTimestamp, 10);\n                else if (typeof object.maxTimestamp === \"number\")\n                    message.maxTimestamp = object.maxTimestamp;\n                else if (typeof object.maxTimestamp === \"object\")\n                    message.maxTimestamp = new $util.LongBits(object.maxTimestamp.low >>> 0, object.maxTimestamp.high >>> 0).toNumber();\n            if (object.dynamicPartitionMetadata != null) {\n                if (typeof object.dynamicPartitionMetadata !== \"object\")\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.dynamicPartitionMetadata: object expected\");\n                message.dynamicPartitionMetadata = $root.chromeos_update_engine.DynamicPartitionMetadata.fromObject(object.dynamicPartitionMetadata);\n            }\n            if (object.partialUpdate != null)\n                message.partialUpdate = Boolean(object.partialUpdate);\n            if (object.apexInfo) {\n                if (!Array.isArray(object.apexInfo))\n                    throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.apexInfo: array expected\");\n                message.apexInfo = [];\n                for (let i = 0; i < object.apexInfo.length; ++i) {\n                    if (typeof object.apexInfo[i] !== \"object\")\n                        throw TypeError(\".chromeos_update_engine.DeltaArchiveManifest.apexInfo: object expected\");\n                    message.apexInfo[i] = $root.chromeos_update_engine.ApexInfo.fromObject(object.apexInfo[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a DeltaArchiveManifest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @static\n         * @param {chromeos_update_engine.DeltaArchiveManifest} message DeltaArchiveManifest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DeltaArchiveManifest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.installOperations = [];\n                object.kernelInstallOperations = [];\n                object.partitions = [];\n                object.apexInfo = [];\n            }\n            if (options.defaults) {\n                object.blockSize = 4096;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.signaturesOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.signaturesOffset = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.signaturesSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.signaturesSize = options.longs === String ? \"0\" : 0;\n                object.oldKernelInfo = null;\n                object.newKernelInfo = null;\n                object.oldRootfsInfo = null;\n                object.newRootfsInfo = null;\n                object.oldImageInfo = null;\n                object.newImageInfo = null;\n                object.minorVersion = 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.maxTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.maxTimestamp = options.longs === String ? \"0\" : 0;\n                object.dynamicPartitionMetadata = null;\n                object.partialUpdate = false;\n            }\n            if (message.installOperations && message.installOperations.length) {\n                object.installOperations = [];\n                for (let j = 0; j < message.installOperations.length; ++j)\n                    object.installOperations[j] = $root.chromeos_update_engine.InstallOperation.toObject(message.installOperations[j], options);\n            }\n            if (message.kernelInstallOperations && message.kernelInstallOperations.length) {\n                object.kernelInstallOperations = [];\n                for (let j = 0; j < message.kernelInstallOperations.length; ++j)\n                    object.kernelInstallOperations[j] = $root.chromeos_update_engine.InstallOperation.toObject(message.kernelInstallOperations[j], options);\n            }\n            if (message.blockSize != null && message.hasOwnProperty(\"blockSize\"))\n                object.blockSize = message.blockSize;\n            if (message.signaturesOffset != null && message.hasOwnProperty(\"signaturesOffset\"))\n                if (typeof message.signaturesOffset === \"number\")\n                    object.signaturesOffset = options.longs === String ? String(message.signaturesOffset) : message.signaturesOffset;\n                else\n                    object.signaturesOffset = options.longs === String ? $util.Long.prototype.toString.call(message.signaturesOffset) : options.longs === Number ? new $util.LongBits(message.signaturesOffset.low >>> 0, message.signaturesOffset.high >>> 0).toNumber(true) : message.signaturesOffset;\n            if (message.signaturesSize != null && message.hasOwnProperty(\"signaturesSize\"))\n                if (typeof message.signaturesSize === \"number\")\n                    object.signaturesSize = options.longs === String ? String(message.signaturesSize) : message.signaturesSize;\n                else\n                    object.signaturesSize = options.longs === String ? $util.Long.prototype.toString.call(message.signaturesSize) : options.longs === Number ? new $util.LongBits(message.signaturesSize.low >>> 0, message.signaturesSize.high >>> 0).toNumber(true) : message.signaturesSize;\n            if (message.oldKernelInfo != null && message.hasOwnProperty(\"oldKernelInfo\"))\n                object.oldKernelInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.oldKernelInfo, options);\n            if (message.newKernelInfo != null && message.hasOwnProperty(\"newKernelInfo\"))\n                object.newKernelInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.newKernelInfo, options);\n            if (message.oldRootfsInfo != null && message.hasOwnProperty(\"oldRootfsInfo\"))\n                object.oldRootfsInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.oldRootfsInfo, options);\n            if (message.newRootfsInfo != null && message.hasOwnProperty(\"newRootfsInfo\"))\n                object.newRootfsInfo = $root.chromeos_update_engine.PartitionInfo.toObject(message.newRootfsInfo, options);\n            if (message.oldImageInfo != null && message.hasOwnProperty(\"oldImageInfo\"))\n                object.oldImageInfo = $root.chromeos_update_engine.ImageInfo.toObject(message.oldImageInfo, options);\n            if (message.newImageInfo != null && message.hasOwnProperty(\"newImageInfo\"))\n                object.newImageInfo = $root.chromeos_update_engine.ImageInfo.toObject(message.newImageInfo, options);\n            if (message.minorVersion != null && message.hasOwnProperty(\"minorVersion\"))\n                object.minorVersion = message.minorVersion;\n            if (message.partitions && message.partitions.length) {\n                object.partitions = [];\n                for (let j = 0; j < message.partitions.length; ++j)\n                    object.partitions[j] = $root.chromeos_update_engine.PartitionUpdate.toObject(message.partitions[j], options);\n            }\n            if (message.maxTimestamp != null && message.hasOwnProperty(\"maxTimestamp\"))\n                if (typeof message.maxTimestamp === \"number\")\n                    object.maxTimestamp = options.longs === String ? String(message.maxTimestamp) : message.maxTimestamp;\n                else\n                    object.maxTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.maxTimestamp) : options.longs === Number ? new $util.LongBits(message.maxTimestamp.low >>> 0, message.maxTimestamp.high >>> 0).toNumber() : message.maxTimestamp;\n            if (message.dynamicPartitionMetadata != null && message.hasOwnProperty(\"dynamicPartitionMetadata\"))\n                object.dynamicPartitionMetadata = $root.chromeos_update_engine.DynamicPartitionMetadata.toObject(message.dynamicPartitionMetadata, options);\n            if (message.partialUpdate != null && message.hasOwnProperty(\"partialUpdate\"))\n                object.partialUpdate = message.partialUpdate;\n            if (message.apexInfo && message.apexInfo.length) {\n                object.apexInfo = [];\n                for (let j = 0; j < message.apexInfo.length; ++j)\n                    object.apexInfo[j] = $root.chromeos_update_engine.ApexInfo.toObject(message.apexInfo[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this DeltaArchiveManifest to JSON.\n         * @function toJSON\n         * @memberof chromeos_update_engine.DeltaArchiveManifest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DeltaArchiveManifest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DeltaArchiveManifest;\n    })();\n\n    return chromeos_update_engine;\n})();\n\nexport { $root as default };\n","/**\n * @fileoverview Class paypload is used to read in and\n * parse the payload.bin file from a OTA.zip file.\n * Class OpType creates a Map that can resolve the\n * operation type.\n * @package zip.js\n * @package protobufjs\n */\n\nimport * as zip from '@zip.js/zip.js/dist/zip-full.min.js'\nimport { chromeos_update_engine as update_metadata_pb } from './update_metadata_pb.js'\n\nconst /** Number */ _MAGIC = 'CrAU'\nconst /** Number */ _VERSION_SIZE = 8\nconst /** Number */ _MANIFEST_LEN_SIZE = 8\nconst /** Number */ _METADATA_SIGNATURE_LEN_SIZE = 4\nconst /** Number */ _BRILLO_MAJOR_PAYLOAD_VERSION = 2\n\nexport class Payload {\n  /**\n   * This class parses the metadata of a OTA package.\n   * @param {File} file A OTA.zip file read from user's machine.\n   */\n  constructor(file) {\n    this.packedFile = new zip.ZipReader(new zip.BlobReader(file))\n    this.cursor = 0\n  }\n\n  async unzipPayload() {\n    let /** Array<Entry> */ entries = await this.packedFile.getEntries()\n    this.payload = null\n    for (let entry of entries) {\n      if (entry.filename == 'payload.bin') {\n        //TODO: only read in the manifest instead of the whole payload\n        this.payload = await entry.getData(new zip.BlobWriter())\n      }\n    }\n    if (!this.payload) {\n      alert('Please select a legit OTA package')\n      return\n    }\n    this.buffer = await this.payload.arrayBuffer()\n  }\n\n  /**\n   * Read in an integer from binary bufferArray.\n   * @param {Int} size the size of a integer being read in\n   * @return {Int} an integer.\n   */\n  readInt(size) {\n    let /** DataView */ view = new DataView(\n      this.buffer.slice(this.cursor, this.cursor + size))\n    this.cursor += size\n    switch (size) {\n    case 2:\n      return view.getUInt16(0)\n    case 4:\n      return view.getUint32(0)\n    case 8:\n      return Number(view.getBigUint64(0))\n    default:\n      throw 'Cannot read this integer with size ' + size\n    }\n  }\n\n  readHeader() {\n    let /** TextDecoder */ decoder = new TextDecoder()\n    try {\n      this.magic = decoder.decode(\n        this.buffer.slice(this.cursor, _MAGIC.length))\n      this.cursor += _MAGIC.length\n      if (this.magic != _MAGIC) {\n        alert('MAGIC is not correct, please double check.')\n      }\n      this.header_version = this.readInt(_VERSION_SIZE)\n      this.manifest_len = this.readInt(_MANIFEST_LEN_SIZE)\n      if (this.header_version == _BRILLO_MAJOR_PAYLOAD_VERSION) {\n        this.metadata_signature_len = this.readInt(_METADATA_SIGNATURE_LEN_SIZE)\n      }\n    } catch (err) {\n      console.log(err)\n      return\n    }\n  }\n\n  /**\n   * Read in the manifest in an OTA.zip file.\n   * The structure of the manifest can be found in:\n   * aosp/system/update_engine/update_metadata.proto\n   */\n  readManifest() {\n    let /** Array<Uint8> */ manifest_raw = new Uint8Array(this.buffer.slice(\n      this.cursor, this.cursor + this.manifest_len\n    ))\n    this.cursor += this.manifest_len\n    this.manifest = update_metadata_pb.DeltaArchiveManifest\n      .decode(manifest_raw)\n  }\n\n  readSignature() {\n    let /** Array<Uint8>*/ signature_raw = new Uint8Array(this.buffer.slice(\n      this.cursor, this.cursor + this.metadata_signature_len\n    ))\n    this.cursor += this.metadata_signature_len\n    this.metadata_signature = update_metadata_pb.Signatures\n      .decode(signature_raw)\n  }\n\n  async init() {\n    await this.unzipPayload()\n    this.readHeader()\n    this.readManifest()\n    this.readSignature()\n  }\n\n}\n\nexport class OpType {\n  /**\n   * OpType.mapType create a map that could resolve the operation\n   * types. The operation types are encoded as numbers in\n   * update_metadata.proto and must be decoded before any usage.\n   */\n  constructor() {\n    let /** Array<{String: Number}>*/ types = update_metadata_pb.InstallOperation.Type\n    this.mapType = new Map()\n    for (let key in types) {\n      this.mapType.set(types[key], key)\n    }\n  }\n}\n\nexport class MergeOpType {\n  /**\n   * MergeOpType create a map that could resolve the COW merge operation\n   * types. This is very similar to OpType class except that one is for\n   * installation operations.\n   */\n  constructor() {\n    let /** Array<{String: Number}>*/ types =\n      update_metadata_pb.CowMergeOperation.Type\n    this.mapType = new Map()\n    for (let key in types) {\n      this.mapType.set(types[key], key)\n    }\n  }\n}","<template>\n  <ul>\n    <h5> {{ mapType.get(operation.type) }} </h5>\n    <li v-if=\"operation.hasOwnProperty('dataOffset')\">\n      <strong> Data offset: </strong> {{ operation.dataOffset }}\n    </li>\n    <li v-if=\"operation.hasOwnProperty('dataLength')\">\n      <strong> Data length: </strong> {{ operation.dataLength }}\n    </li>\n    <li v-if=\"operation.hasOwnProperty('srcExtents')\">\n      <strong> Source: </strong> {{ operation.srcExtents.length }} extents ({{ srcTotalBlocks }}\n      blocks)\n      <br>\n      {{ srcBlocks }}\n    </li>\n    <li v-if=\"operation.hasOwnProperty('dstExtents')\">\n      <strong> Destination: </strong> {{ operation.dstExtents.length }} extents ({{ dstTotalBlocks }}\n      blocks)\n      <br>\n      {{ dstBlocks }}\n    </li>\n  </ul>\n  <v-divider />\n</template>\n\n<script>\nimport { numBlocks, displayBlocks } from '../services/payload_composition.js'\n\nexport default {\n  props: {\n    operation: {\n      type: Object,\n      required: true,\n    },\n    mapType: {\n      type: Map,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      srcTotalBlocks: null,\n      srcBlocks: null,\n      dstTotalBlocks: null,\n      dstBlocks: null,\n    }\n  },\n  mounted() {\n    if (this.operation.srcExtents) {\n      this.srcTotalBlocks = numBlocks(this.operation.srcExtents)\n      this.srcBlocks = displayBlocks(this.operation.srcExtents)\n    }\n    if (this.operation.dstExtents) {\n      this.dstTotalBlocks = numBlocks(this.operation.dstExtents)\n      this.dstBlocks = displayBlocks(this.operation.dstExtents)\n    }\n  },\n}\n</script>\n\n<style scoped>\nul {\n  padding: 5px;\n}\n\nli {\n  color: black;\n  list-style-type: none;\n}\n\n</style>","export class EchartsData {\n  /**\n   * Given a set of [key, value] pairs and title, create an object for further\n   * usage in Vue-Echarts.\n   * @param {Map} statisticData\n   * @param {String} title\n   * @param {String} unit\n   * @param {Number} maximumEntries\n   */\n  constructor(statisticData, title, unit, maximumEntries = 15) {\n    this.statisticData = statisticData\n    this.title = title\n    this.unit = unit\n    this.maximumEntries = maximumEntries\n  }\n\n  /**\n   * Convert the raw data into a string.\n   * @return {String} A list of [key, value].\n   */\n  listData() {\n    let /** String */ table = ''\n    for (let [key, value] of this.statisticData) {\n      table += key + ' : ' + value.toString() + ' Blocks' + '\\n'\n    }\n    return table\n  }\n\n  /**\n   * Generate necessary parameters (option) for vue-echarts.\n   * Format of the parameters can be found here:\n   * https://echarts.apache.org/en/option.html\n   * @param {String} unit\n   * @return {Object} an ECharts option object.\n   */\n  getEchartsOption() {\n    if (this.statisticData.size > this.maximumEntries) {\n      this.statisticData = trimMap(this.statisticData, this.maximumEntries)\n    }\n    let /** Object */ option = new Object()\n    option.title = {\n      text: this.title,\n      left: \"center\"\n    }\n    option.tooltip = {\n      trigger: \"item\",\n      formatter: \"{a} <br/>{b} : {c} \" + this.unit + \" ({d}%)\"\n    }\n    option.legend = {\n      orient: \"horizontal\",\n      left: \"top\",\n      top: \"10%\",\n      data: Array.from(this.statisticData.keys())\n    }\n    option.series = [\n      {\n        name: this.title,\n        type: \"pie\",\n        radius: \"55%\",\n        center: [\"50%\", \"60%\"],\n        data: Array.from(this.statisticData).map((pair) => {\n          return { value: pair[1], name: pair[0] }\n        }),\n        emphasis: {\n          itemStyle: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: \"rgba(0, 0, 0, 0.5)\"\n          }\n        }\n      }\n    ]\n    return option\n  }\n}\n\n/**\n * When there are too many entries in the map, the pie chart can be very\n * crowded. This function will return the entries that have high values.\n * Specifically, the top <maximumEntries> will be stored and the others\n * will be added into an entry called 'other'.\n * @param {Map} map\n * @param {Number} maximumEntries\n * @return {Map}\n */\nfunction trimMap(map, maximumEntries) {\n  if (map.size <= maximumEntries) return map\n  let /** Map */ new_map = new Map()\n  for (let i=0; i<maximumEntries; i++) {\n    let /** Number */ curr = 0\n    let /** String */ currKey = ''\n    for (let [key, value] of map) {\n      if (!new_map.get(key)) {\n        if (value > curr) {\n          curr = value\n          currKey = key\n        }\n      }\n    }\n    new_map.set(currKey, curr)\n  }\n  let /** Number */ restTotal = 0\n  for (let [key, value] of map) {\n    if (!new_map.get(key)) {\n      restTotal += value\n    }\n  }\n  new_map.set('other', restTotal)\n  return new_map\n}","/**\n * @fileoverview Class MapParser will take in a Android build and construct\n * several file name maps (physical address: file name) according to it.\n * The map of each partitions is added by calling MapParser.add(partitionName).\n * You can query the file name being operated by calling\n * MapParser.query(address, datalength).\n */\n\nimport * as zip from '@zip.js/zip.js/dist/zip-full.min.js'\n\nexport class MapParser {\n  /**\n   * This class will take in a .zip Android build and construct a file type map\n   * @param {File} targetFile\n   */\n  constructor(targetFile) {\n    this.build = new zip.ZipReader(new zip.BlobReader(targetFile))\n    this.mapFiles = new Map()\n    this.maps = new Map()\n  }\n\n  /**\n   * Find the .map entries in the .zip build file. Store them as a map with\n   * pairs of (partition name: zip.js entry).\n   */\n  async init() {\n    let /** Array<Entry> */ entries = await this.build.getEntries()\n    const /** RegExp*/ regexPath = /IMAGES\\/[a-z_]*\\.map/g;\n    const /** RegExp*/ regexName = /[\\w_]+(?=\\.map)/g\n    entries.forEach((entry) => {\n      if (entry.filename.match(regexPath)) {\n        this.mapFiles.set(entry.filename.match(regexName)[0], entry)\n      }\n    });\n  }\n\n  /**\n   * According to the .map in the build, build a map for later query.\n   * @param {String} partitionName\n   * @param {Number} totalLength\n   */\n  async add(partitionName, totalLength) {\n    let /** Array<String> */ map = []\n    const /** RegExp */ regexNumber = /(?<![0-9\\-])\\d+(?![0-9\\-])/g\n    const /** Reg */ regexRange = /\\d+\\-\\d+/g\n    for (let i = 0; i < totalLength; i++) map[i] = 'unknown'\n    if (this.mapFiles.get(partitionName)) {\n      let /** String */mapText =\n        await this.mapFiles.get(partitionName).getData(\n          new zip.TextWriter()\n        )\n      let /** Array<String> */fileEntries = mapText.split('\\n')\n      // Each line of the .map file in Android build starts with the filename\n      // Followed by the block address, either a number or a range, for example:\n      // //system/apex/com.android.adbd.apex 54-66 66 66-2663\n      for (let entry of fileEntries) {\n        let /** Array<String> */ elements = entry.split(' ')\n        for (let j = 1; j < elements.length; j++) {\n          let /** Number */ left = 0\n          let /** Number */ right = 0\n          if (elements[j].match(regexRange)) {\n            left = parseInt(elements[j].match(/\\d+/g)[0])\n            right = parseInt(elements[j].match(/\\d+/g)[1])\n          } else {\n            left = parseInt(elements[j].match(regexNumber))\n            right = parseInt(elements[j].match(regexNumber))\n          }\n          InsertMap(map, elements[0], left, right)\n        }\n      }\n      this.maps.set(partitionName, map)\n    }\n    else {\n      this.maps.set(partitionName, map)\n    }\n  }\n\n  /**\n   * Return the filename of given address.\n   * @param {String} partitionName\n   * @param {Array<PartitionUpdate>} extents\n   * @return {Array<String>}\n   */\n  query(partitionName, extents) {\n    let /** Array<String> */ names = []\n    let /** Array<String> */ map = this.maps.get(partitionName)\n    for (let ext of extents) {\n      names.push(queryMap(map,\n        ext.startBlock,\n        ext.startBlock + ext.numBlocks))\n    }\n    return names\n  }\n}\n\n/**\n * Fill in the hashtable from <left> to <right> using <name>.\n * @param {Array<String>} map\n * @param {String} name\n * @param {Number} left\n * @param {Number} right\n */\nfunction InsertMap(map, name, left, right) {\n  for (let i = left; i <= right; i++) {\n    map[i] = name\n  }\n}\n\n/**\n * Query the hashtable <map> using index <address>.\n * @param {Array<String>} map\n * @param {Number} left\n * @param {Number} right\n */\nfunction queryMap(map, left, right) {\n  // Assuming the consecutive blocks belong to the same file\n  // Only the start block is queried here.\n  return map[left]\n}","/**\n * @fileoverview Offer functions that can be used to parse the partitionUpdate\n * and then do statistics over it. One can use analysePartitions to specify the\n * partitions been analysed and metrics.\n */\n\nimport { OpType, MergeOpType } from '@/services/payload.js'\nimport { EchartsData } from '@/services/echarts_data.js'\nimport { MapParser } from '@/services/map_parser.js'\n\n/**\n * Add a <value> to a element associated to <key>. If the element dose not\n * exists than its value will be initialized to zero.\n * @param {Map} map\n * @param {String} key\n * @param {Number} value\n */\nfunction addNumberToMap(map, key, value) {\n  if (!map.get(key)) {\n    map.set(key, 0)\n  }\n  map.set(key, map.get(key) + value)\n}\n\n/**\n * Return a statistics over the numbers of blocks (in destination) that are\n * being operated by different installation operation (e.g. REPLACE, BSDIFF).\n * Only partitions that are being passed in will be included.\n * @param {Array<PartitionUpdate>} partitions\n * @return {Map}\n */\nexport function operatedBlockStatistics(partitions) {\n  let /** Map */ operatedBlocks = new Map()\n  let /** OpType */ opType = new OpType()\n  for (let partition of partitions) {\n    for (let operation of partition.operations) {\n      let operationType = opType.mapType.get(operation.type)\n      addNumberToMap(\n        operatedBlocks,\n        operationType,\n        numBlocks(operation.dstExtents))\n    }\n  }\n  return operatedBlocks\n}\n\nexport function mergeOperationStatistics(partitions, blockSize) {\n  let /** Map */ mergeOperations = new Map()\n  let /** MergeOpType */ opType = new MergeOpType()\n  let /** Number */ totalBlocks = 0\n  for (let partition of partitions) {\n    for (let operation of partition.mergeOperations) {\n      let operationType = opType.mapType.get(operation.type)\n      addNumberToMap(\n        mergeOperations,\n        operationType,\n        operation.dstExtent.numBlocks)\n    }\n    // The total blocks number should be rounded up\n    totalBlocks += Math.ceil(partition.newPartitionInfo.size / blockSize)\n  }\n  // The COW merge operation is default to be COW_replace and not shown in\n  // the manifest info. We have to mannually add that part of operations,\n  // by subtracting the total blocks with other blocks.\n  mergeOperations.forEach((value, key) => totalBlocks -= value)\n  mergeOperations.set('COW_REPLACE', totalBlocks)\n  return mergeOperations\n}\n\n/**\n * Return a statistics over the disk usage of payload.bin, based on the type of\n * installation operations. Only partitions that are being passed in will be\n * included.\n * @param {Array<PartitionUpdate>} partitions\n * @return {Map}\n */\nexport function operatedPayloadStatistics(partitions) {\n  let /** Map */ operatedBlocks = new Map()\n  let /** OpType */ opType = new OpType()\n  for (let partition of partitions) {\n    for (let operation of partition.operations) {\n      let operationType = opType.mapType.get(operation.type)\n      addNumberToMap(\n        operatedBlocks,\n        operationType,\n        operation.dataLength)\n    }\n  }\n  return operatedBlocks\n}\n\n/**\n * Return a statistics over the disk usage of each file types in a OTA package.\n * A target file has to be provided and address-filename maps will be built.\n * Only partitions that are being passed in will be included.\n * @param {Array<PartitionUpdate>} partitions\n * @param {Number} blockSize\n * @param {File} targetFile\n * @return {Map}\n */\nexport async function operatedExtensionStatistics(partitions, blockSize, targetFile) {\n  let /** Map */ operatedExtensions = new Map()\n  if (!targetFile) {\n    return operatedExtensions\n  }\n  let buildMap = new MapParser(targetFile)\n  await buildMap.init()\n  for (let partition of partitions) {\n    await buildMap.add(\n      partition.partitionName,\n      Math.ceil(partition.newPartitionInfo.size / blockSize))\n    for (let operation of partition.operations) {\n      if (!operation.hasOwnProperty('dataLength')) continue\n      let operatedFileNames = buildMap.query(\n        partition.partitionName,\n        operation.dstExtents)\n      let extentDataLength = distributeExtensions(\n        operatedFileNames,\n        operation.dstExtents,\n        operation.dataLength\n      )\n      extentDataLength.forEach((value, key) => {\n        addNumberToMap(\n          operatedExtensions,\n          key,\n          value\n        )\n      })\n    }\n  }\n  return operatedExtensions\n}\n\n/**\n * Analyse the given partitions using the given metrics.\n * @param {String} metrics\n * @param {Array<PartitionUpdate>} partitions\n * @return {EchartsData}\n */\nexport async function analysePartitions(metrics, partitions, blockSize = 4096, targetFile = null) {\n  let /** Map */statisticsData\n  let /** Echartsdata */ echartsData\n  switch (metrics) {\n  case 'blocks':\n    statisticsData = operatedBlockStatistics(partitions)\n    echartsData = new EchartsData(\n      statisticsData,\n      'Operated blocks in target build',\n      'blocks'\n    )\n    break\n  case 'payload':\n    statisticsData = operatedPayloadStatistics(partitions)\n    echartsData = new EchartsData(\n      statisticsData,\n      'Payload disk usage',\n      'bytes'\n    )\n    break\n  case 'COWmerge':\n    statisticsData = mergeOperationStatistics(partitions, blockSize)\n    echartsData = new EchartsData(\n      statisticsData,\n      'COW merge operations',\n      'blocks'\n    )\n    break\n  case 'extensions':\n    try {\n      statisticsData = await operatedExtensionStatistics(partitions, blockSize, targetFile)\n    }\n    catch (err) {\n      throw err\n    }\n    echartsData = new EchartsData(\n      statisticsData,\n      'Size of operated filename extensions',\n      'bytes'\n    )\n  }\n  if (echartsData) {\n    return echartsData\n  } else {\n    throw 'Please double check if this is a proper AB OTA package.'\n  }\n}\n\n/**\n * Calculate the number of blocks being operated\n * @param {Array<InstallOperations>} exts\n * @return {number}\n */\nexport function numBlocks(exts) {\n  const accumulator = (total, ext) => total + ext.numBlocks\n  return exts.reduce(accumulator, 0)\n}\n\n/**\n * Return a string that indicates the blocks being operated\n * in the manner of (start_block, block_length)\n * @param {Array<InstallOperations>} exts\n * @return {string}\n */\nexport function displayBlocks(exts) {\n  const accumulator = (total, ext) =>\n    total + '(' + ext.startBlock + ',' + ext.numBlocks + ')'\n  return exts.reduce(accumulator, '')\n}\n\n/**\n * Return a map with pairs of (file extension, data length used by this\n * extension). The total data length will be distributed by the blocks ratio\n * of each extent.\n * @param {Array<String>} filenames\n * @param {Array<InstallOperations>} exts\n * @param {Number} length\n * @return {Map}\n */\nexport function distributeExtensions(filenames, exts, length) {\n  let totalBlocks = numBlocks(exts)\n  let distributedLengths = new Map()\n  for (let i = 0; i < filenames.length; i++) {\n    addNumberToMap(\n      distributedLengths,\n      name2Extension(filenames[i]),\n      Math.round(length * exts[i].numBlocks / totalBlocks)\n    )\n  }\n  return distributedLengths\n}\n\n/**\n * convert a filename into extension, for example:\n * '//system/apex/com.android.adbd.apex' => 'apex'\n * @param {String} filename\n * @return {String}\n */\nexport function name2Extension(filename) {\n  let elements = filename.split('.')\n  if (elements.length>1) {\n    return elements[elements.length - 1]\n  } else if (elements[0]==='unknown') {\n    return 'unknown'\n  } else {\n    return 'no-extension'\n  }\n}","import { render } from \"./OperationDetail.vue?vue&type=template&id=225704de&scoped=true\"\nimport script from \"./OperationDetail.vue?vue&type=script&lang=js\"\nexport * from \"./OperationDetail.vue?vue&type=script&lang=js\"\n\nimport \"./OperationDetail.vue?vue&type=style&index=0&id=225704de&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-225704de\"\n\nexport default script","import { render } from \"./PartitionDetail.vue?vue&type=template&id=c892fb34&scoped=true\"\nimport script from \"./PartitionDetail.vue?vue&type=script&lang=js\"\nexport * from \"./PartitionDetail.vue?vue&type=script&lang=js\"\n\nimport \"./PartitionDetail.vue?vue&type=style&index=0&id=c892fb34&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-c892fb34\"\n\nexport default script","<template>\n  <h3>Basic infos</h3>\n  <div v-if=\"zipFile\">\n    <ul class=\"align\">\n      <li><strong> File name </strong> {{ zipFile.name }}</li>\n      <li><strong> File size </strong> {{ zipFile.size }} Bytes</li>\n      <li>\n        <strong> File last modified date </strong>\n        {{ zipFile.lastModifiedDate }}\n      </li>\n    </ul>\n  </div>\n  <div v-if=\"payload && payload.manifest\">\n    <ul class=\"align\">\n      <li>\n        <strong> Incremental </strong>\n        <!-- Check if the first partition is incremental or not -->\n        <span v-if=\"payload.manifest.partitions[0].oldPartitionInfo\">\n          &#9989;\n        </span>\n        <span v-else> &#10062; </span>\n      </li>\n      <li>\n        <strong> Partial </strong>\n        <span v-if=\"payload.manifest.partialUpdate\"> &#9989; </span>\n        <span v-else> &#10062; </span>\n      </li>\n      <li>\n        <strong> VAB </strong>\n        <span v-if=\"payload.manifest.dynamicPartitionMetadata.snapshotEnabled\">\n          &#9989;\n        </span>\n        <span v-else> &#10062; </span>\n      </li>\n      <li>\n        <strong> VABC </strong>\n        <span v-if=\"payload.manifest.dynamicPartitionMetadata.vabcEnabled\">\n          &#9989;\n        </span>\n        <span v-else> &#10062; </span>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport { Payload } from '@/services/payload.js'\n\nexport default {\n  props: {\n    zipFile: {\n      type: File,\n      required: true,\n    },\n    payload: {\n      type: Payload,\n      required: true,\n    },\n  },\n}\n</script>\n\n<style scoped>\n.align strong {\n  display: inline-block;\n  width: 50%;\n  position: relative;\n  padding-right: 10px; /* Ensures colon does not overlay the text */\n  text-align: right;\n}\n\n.align strong::after {\n  content: ':';\n}\n</style>","import { render } from \"./BasicInfo.vue?vue&type=template&id=1b380fc5&scoped=true\"\nimport script from \"./BasicInfo.vue?vue&type=script&lang=js\"\nexport * from \"./BasicInfo.vue?vue&type=script&lang=js\"\n\nimport \"./BasicInfo.vue?vue&type=style&index=0&id=1b380fc5&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-1b380fc5\"\n\nexport default script","import { render } from \"./PayloadDetail.vue?vue&type=template&id=43a5d8cc&scoped=true\"\nimport script from \"./PayloadDetail.vue?vue&type=script&lang=js\"\nexport * from \"./PayloadDetail.vue?vue&type=script&lang=js\"\n\nimport \"./PayloadDetail.vue?vue&type=style&index=0&id=43a5d8cc&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-43a5d8cc\"\n\nexport default script","<template>\n  <PartialCheckbox\n    v-model=\"partitionInclude\"\n    :labels=\"updatePartitions\"\n  />\n  <div v-if=\"echartsData\">\n    <PieChart :echartsData=\"echartsData\" />\n  </div>\n  <v-divider />\n  <v-row>\n    <v-col\n      cols=\"12\"\n      md=\"6\"\n    >\n      <v-btn\n        block\n        @click=\"updateChart('blocks')\"\n      >\n        Analyse Installed Blocks (in target build)\n      </v-btn>\n    </v-col>\n    <v-col\n      cols=\"12\"\n      md=\"6\"\n    >\n      <v-btn\n        block\n        @click=\"updateChart('payload')\"\n      >\n        Analyse Payload Composition\n      </v-btn>\n    </v-col>\n  </v-row>\n  <v-row>\n    <v-col\n      cols=\"12\"\n      md=\"6\"\n    >\n      <v-btn\n        block\n        @click=\"updateChart('COWmerge')\"\n      >\n        Analyse COW Merge Operations\n      </v-btn>\n    </v-col>\n    <v-col\n      cols=\"12\"\n      md=\"6\"\n    >\n      <v-btn\n        block\n        :disabled=\"!targetFile\"\n        @click=\"updateChart('extensions')\"\n      >\n        Analyse File Extensions\n      </v-btn>\n    </v-col>\n  </v-row>\n  <v-row>\n    <v-col\n      cols=\"12\"\n      md=\"6\"\n    />\n    <v-col\n      cols=\"12\"\n      md=\"6\"\n    >\n      <BaseFile\n        label=\"Drag and drop or Select The target Android build\"\n        @file-select=\"selectBuild\"\n      />\n    </v-col>\n  </v-row>\n</template>\n\n<script>\nimport PartialCheckbox from '@/components/PartialCheckbox.vue'\nimport PieChart from '@/components/PieChart.vue'\nimport BaseFile from '@/components/BaseFile.vue'\nimport { analysePartitions } from '../services/payload_composition.js'\nimport { chromeos_update_engine as update_metadata_pb } from '../services/update_metadata_pb.js'\n\nexport default {\n  components: {\n    PartialCheckbox,\n    PieChart,\n    BaseFile,\n  },\n  props: {\n    manifest: {\n      type: update_metadata_pb.DeltaArchiveManifest,\n      default: () => [],\n    },\n  },\n  data() {\n    return {\n      partitionInclude: new Map(),\n      echartsData: null,\n      listData: '',\n      targetFile: null,\n    }\n  },\n  computed: {\n    updatePartitions() {\n      return this.manifest.partitions.map((partition) => {\n        return partition.partitionName\n      })\n    },\n  },\n  methods: {\n    async updateChart(metrics) {\n      let partitionSelected = this.manifest.partitions.filter((partition) =>\n        this.partitionInclude.get(partition.partitionName)\n      )\n      try {\n        this.echartsData = await analysePartitions(\n          metrics,\n          partitionSelected,\n          this.manifest.blockSize,\n          this.targetFile\n        )\n      } catch (err) {\n        alert('Cannot be processed for the following issue: ', err)\n      }\n    },\n    selectBuild(files) {\n      //TODO(lishutong) check the version of target file is same to the OTA target\n      this.targetFile = files[0]\n    },\n  },\n}\n</script>\n\n<style scoped>\n.list-data {\n  text-align: center;\n}\n</style>","<template>\n  <v-btn\n    block\n    type=\"button\"\n    class=\"my-5\"\n    @click=\"revertAllSelection\"\n  >\n    {{ selectAllText[selectAll] }}\n  </v-btn>\n  <v-row class=\"mb-5\">\n    <v-col\n      v-for=\"label in labels\"\n      :key=\"label\"\n      cols=\"12\"\n      md=\"4\"\n    >\n      <input\n        type=\"checkbox\"\n        :value=\"label\"\n        :checked=\"modelValue.get(label)\"\n        @change=\"updateSelected($event.target.value)\"\n      >\n      <label v-if=\"label\"> {{ label }} </label>\n    </v-col>\n  </v-row>\n</template>\n\n<script>\nexport default {\n  props: {\n    labels: {\n      type: Array,\n      default: new Array(),\n    },\n    modelValue: {\n      type: Map,\n      default: new Map(),\n    },\n  },\n  data() {\n    return {\n      selectAll: 1,\n      selectAllText: ['Select All', 'Unselect All'],\n    }\n  },\n  mounted() {\n    // Set the default value to be true once mounted\n    for (let key of this.labels) {\n      this.modelValue.set(key, true)\n    }\n  },\n  methods: {\n    updateSelected(newSelect) {\n      this.modelValue.set(newSelect, !this.modelValue.get(newSelect))\n      this.$emit('update:modelValue', this.modelValue)\n    },\n    revertAllSelection() {\n      this.selectAll = 1 - this.selectAll\n      for (let key of this.modelValue.keys()) {\n        this.modelValue.set(key, Boolean(this.selectAll))\n      }\n    },\n  },\n}\n</script>\n\n<style scoped>\nul > li {\n  display: inline-block;\n  list-style-type: none;\n  margin-left: 5%;\n  margin-right: 5%;\n  top: 0px;\n  height: 50px;\n}\n</style>","import { render } from \"./PartialCheckbox.vue?vue&type=template&id=2c8a15e8&scoped=true\"\nimport script from \"./PartialCheckbox.vue?vue&type=script&lang=js\"\nexport * from \"./PartialCheckbox.vue?vue&type=script&lang=js\"\n\nimport \"./PartialCheckbox.vue?vue&type=style&index=0&id=2c8a15e8&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-2c8a15e8\"\n\nexport default script","<template>\n  <v-chart\n    class=\"chart\"\n    :option=\"getEchartsOption\"\n  />\n</template>\n\n<script>\nimport { use } from 'echarts/core'\nimport { CanvasRenderer } from 'echarts/renderers'\nimport { PieChart } from 'echarts/charts'\nimport {\n  TitleComponent,\n  TooltipComponent,\n  LegendComponent,\n} from 'echarts/components'\nimport VChart, { THEME_KEY } from 'vue-echarts'\nimport { EchartsData } from '@/services/echarts_data.js'\n\nuse([\n  CanvasRenderer,\n  PieChart,\n  TitleComponent,\n  TooltipComponent,\n  LegendComponent,\n])\n\nexport default {\n  components: {\n    VChart,\n  },\n  provide: {\n    [THEME_KEY]: 'light',\n  },\n  props: {\n    echartsData: {\n      type: EchartsData,\n      required: true,\n    },\n  },\n  computed: {\n    getEchartsOption() {\n      return this.echartsData.getEchartsOption()\n    },\n  },\n}\n</script>\n\n<style scoped>\n.chart {\n  height: 400px;\n}\n</style>","import { render } from \"./PieChart.vue?vue&type=template&id=6d824429&scoped=true\"\nimport script from \"./PieChart.vue?vue&type=script&lang=js\"\nexport * from \"./PieChart.vue?vue&type=script&lang=js\"\n\nimport \"./PieChart.vue?vue&type=style&index=0&id=6d824429&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-6d824429\"\n\nexport default script","import { render } from \"./PayloadComposition.vue?vue&type=template&id=016d9374&scoped=true\"\nimport script from \"./PayloadComposition.vue?vue&type=script&lang=js\"\nexport * from \"./PayloadComposition.vue?vue&type=script&lang=js\"\n\nimport \"./PayloadComposition.vue?vue&type=style&index=0&id=016d9374&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-016d9374\"\n\nexport default script","import { render } from \"./PackageAnalysis.vue?vue&type=template&id=2c7b1b71\"\nimport script from \"./PackageAnalysis.vue?vue&type=script&lang=js\"\nexport * from \"./PackageAnalysis.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","<template>\n  <div class=\"about\">\n    <p>A GUI for the Android OTA generating.</p>\n  </div>\n</template>\n","import { render } from \"./About.vue?vue&type=template&id=3fc5473b\"\nconst script = {}\nscript.render = render\n\nexport default script","import { createRouter, createWebHistory } from 'vue-router'\nimport PackageAnalysis from '@/views/PackageAnalysis.vue'\nimport About from '@/views/About.vue'\n\nconst routes = [\n  {\n    path: '/',\n    name: 'Analysis',\n    component: PackageAnalysis,\n    meta: {\n      title: 'Analyse OTA package - from AOSP'\n    }\n  },\n  {\n    path: '/About',\n    name: 'About',\n    component: About\n  }\n]\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n})\n\n// This callback runs before every route change, including on page load.\nrouter.beforeEach((to, from, next) => {\n  // This goes through the matched routes from last to first, finding the closest route with a title.\n  // e.g., if we have `/some/deep/nested/route` and `/some`, `/deep`, and `/nested` have titles,\n  // `/nested`'s will be chosen.\n  const nearestWithTitle = to.matched.slice().reverse().find(r => r.meta && r.meta.title);\n\n  // Find the nearest route element with meta tags.\n  const nearestWithMeta = to.matched.slice().reverse().find(r => r.meta && r.meta.metaTags);\n\n  const previousNearestWithMeta = from.matched.slice().reverse().find(r => r.meta && r.meta.metaTags);\n\n  // If a route with a title was found, set the document (page) title to that value.\n  if(nearestWithTitle) {\n    document.title = nearestWithTitle.meta.title;\n  } else if(previousNearestWithMeta) {\n    document.title = previousNearestWithMeta.meta.title;\n  }\n\n  // Remove any stale meta tags from the document using the key attribute we set below.\n  Array.from(document.querySelectorAll('[data-vue-router-controlled]')).map(el => el.parentNode.removeChild(el));\n\n  // Skip rendering meta tags if there are none.\n  if(!nearestWithMeta) return next();\n\n  // Turn the meta tag definitions into actual elements in the head.\n  nearestWithMeta.meta.metaTags.map(tagDef => {\n    const tag = document.createElement('meta');\n\n    Object.keys(tagDef).forEach(key => {\n      tag.setAttribute(key, tagDef[key]);\n    });\n\n    // We use this to track which meta tags we create so we don't interfere with other ones.\n    tag.setAttribute('data-vue-router-controlled', '');\n\n    return tag;\n  })\n  // Add the meta tags to the document head.\n    .forEach(tag => document.head.appendChild(tag));\n\n  next();\n});\n\nexport default router\n","import { createStore } from 'vuex'\n\nexport default createStore({\n  state: {},\n  mutations: {},\n  actions: {},\n  modules: {}\n})\n","import { createApp } from 'vue'\nimport vuetify from './plugins/vuetify'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\nconst app = createApp(App)\napp.use(router)\napp.use(store)\napp.use(vuetify)\n\napp.mount('#app')","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./BaseFile.vue?vue&type=style&index=0&id=6b3bd7f8&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./PayloadDetail.vue?vue&type=style&index=0&id=43a5d8cc&scoped=true&lang=css\"","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../node_modules/vue-loader-v16/dist/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./App.vue?vue&type=style&index=0&id=272f92fd&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./BasicInfo.vue?vue&type=style&index=0&id=1b380fc5&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./PartialCheckbox.vue?vue&type=style&index=0&id=2c8a15e8&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./PayloadComposition.vue?vue&type=style&index=0&id=016d9374&scoped=true&lang=css\""],"sourceRoot":""}